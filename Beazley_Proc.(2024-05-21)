-------------------------------------------------(START)-------------------------------------------------------------------------
CREATE TABLE fda."Tokens" (
    "TokenId" SERIAL PRIMARY KEY,
    "UserId" BIGINT,
    "TokenName" VARCHAR(255) NOT NULL,
    "TokenValue" TEXT NOT NULL,
    "TokenExpiryDays" INT NOT NULL DEFAULT 0,
    "ModuleAccess" VARCHAR(255) NOT NULL DEFAULT 'DEFAULT',
    "CreatedOn" BIGINT DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT
);
--------------------------------------------------------------------------------------------------------------------------
ALTER TABLE fda."FDADataQualityMasterRules" ADD COLUMN "DAMADimension" character varying(150);
--------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_GetObjectRowCountOutlierStatusInd"(
	"InObjectId" bigint,
	"InObjectScoreId" bigint,
	"InUserName" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "lvRatio" DECIMAL(18,3);
		"lvRowCountOutlierInd" VARCHAR(1);
		"lvScorecount" BIGINT;
		"lvlastrowcount" BIGINT;
		"lvRowCountCalType" TEXT;
		"lVRuleType" TEXT ;
		"lvRightFieldValue" TEXT;
		"lvUpperThreshold" TEXT;
		"lvLowerThreshold" TEXT;
BEGIN

--COALESCE(NULLIF(e."UpperThreshold",'null'),'0'),COALESCE(NULLIF(e."LowerThreshold",'null'),'0')
---COALESCE(NULLIF("lvUpperThreshold",'null'),'0'),COALESCE(NULLIF("lvLowerThreshold",'null'),'0')

SELECT e."RuleType",COALESCE(NULLIF(e."LeftFieldValue",''),'Statistical'),e."RightFieldValue",
	   NULLIF(NULLIF(NULLIF(e."UpperThreshold",'Unlimited'),''),'null'),
	   NULLIF(NULLIF(NULLIF(e."LowerThreshold",'Unlimited'),''),'null')
INTO "lVRuleType","lvRowCountCalType","lvRightFieldValue","lvUpperThreshold","lvLowerThreshold"
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN (SELECT x."FDASystemObjectsId",y."CreatedOn",y."FDADataQualityRulesId"
			FROM fda."FDASystemObjectFields" x
			INNER JOIN fda."FDADataQualityMasterRulesDetails" y
				ON x."MasterRuleId" = y."FDADataQualityRulesId"
			WHERE y."RuleType" = 'Row Count Variation'
				AND y."LeftFieldValue" > ''
				AND "FDASystemObjectsId" = "InObjectId"
			ORDER BY "CreatedOn" DESC LIMIT 1
			) c 
	ON b."MasterRuleId" = c."FDADataQualityRulesId"
INNER JOIN fda."FDADataQualityMasterRulesDetails" e
	ON c."FDADataQualityRulesId" = e."FDADataQualityRulesId"
WHERE e."RuleType" = 'Row Count Variation'
	AND  b."FDASystemObjectsId" = "InObjectId";

IF UPPER("lVRuleType") = 'ROW COUNT VARIATION' 
THEN 

SELECT COUNT(*)
INTO "lvScorecount"
    FROM fda."FDAObjectsScoreValue"	
	WHERE "FDASystemObjectsId" = "InObjectId"
	AND "FDAObjectScoreValueId" != "InObjectScoreId";
	
	IF "lvScorecount" >= 1
	THEN
		SELECT "RowCount"
		INTO "lvlastrowcount"
		FROM
			(SELECT "FDAObjectScoreValueId", "RowCount"
			 FROM fda."FDAObjectsScoreValue"
			 WHERE "FDASystemObjectsId" = "InObjectId"
				AND "FDAObjectScoreValueId" < "InObjectScoreId" 
			 AND COALESCE("RowCountOutlierInd",'N') = 'N'
			 ORDER BY "FDAObjectScoreValueId" DESC
			 LIMIT 1
			) x;
	END IF;
 
	IF UPPER("lvRowCountCalType") = UPPER('Manual') AND UPPER("lvRightFieldValue") = UPPER('Absolute')
	THEN

		RAISE NOTICE 'lvRightFieldValue : %',"lvRightFieldValue";
		RAISE NOTICE 'lvlastrowcount : %', "lvlastrowcount";
		---RAISE NOTICE 'Interval : %',"RowCount" - "lvlastrowcount";
		
		/*SELECT ( CASE WHEN "lvScorecount" >=1 and ("RowCount" - "lvlastrowcount") > "lvUpperThreshold"  
			OR  "lvScorecount" >=1 and ("RowCount" - "lvlastrowcount") < "lvLowerThreshold" THEN 'Y' 
				WHEN  "lvScorecount" < 1 THEN 'N'  ELSE 'N' END)
			INTO "lvRowCountOutlierInd"
			FROM fda."FDAObjectsScoreValue"
			WHERE "FDAObjectScoreValueId" = "InObjectScoreId";*/
			
		SELECT (CASE 
					WHEN  "lvScorecount" < 1 THEN 'N'
					WHEN "lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND  "lvLowerThreshold" IS NOT NULL 
							AND  "RowCount"  BETWEEN ("lvlastrowcount" - COALESCE("lvLowerThreshold",'0')::bigint) 
												AND ("lvlastrowcount" + COALESCE("lvUpperThreshold",'0')::bigint)  THEN 'N' 
					WHEN "lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND  "lvLowerThreshold" IS NOT NULL 
							AND  "RowCount"  NOT BETWEEN ("lvlastrowcount" - COALESCE("lvLowerThreshold",'0')::bigint) 
												AND ("lvlastrowcount" + COALESCE("lvUpperThreshold",'0')::bigint)  THEN 'Y'
					WHEN ("lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND "lvLowerThreshold" IS NULL 
							AND "RowCount" > ("lvlastrowcount" + COALESCE("lvUpperThreshold",'0')::bigint)) 
						OR ("lvScorecount" >= 1 AND "lvUpperThreshold" IS NULL AND "lvLowerThreshold" IS NOT NULL 
							AND "RowCount" < ("lvlastrowcount" - COALESCE("lvLowerThreshold",'0')::bigint))  THEN 'Y'
				ELSE 'N' 
				END)
			INTO "lvRowCountOutlierInd"
			FROM fda."FDAObjectsScoreValue"
			WHERE "FDAObjectScoreValueId" = "InObjectScoreId";
			
		---RAISE NOTICE 'lvRowCountOutlierInd : %', "lvRowCountOutlierInd";
	END IF;
	
	IF UPPER("lvRowCountCalType") = UPPER('Manual') AND UPPER("lvRightFieldValue") = UPPER('Percentage')
	THEN 
				
		SELECT 
				(CASE 
					WHEN "lvScorecount" >= 1 AND UPPER("lvUpperThreshold") = UPPER('Unlimited') AND UPPER("lvLowerThreshold") = UPPER('Unlimited') THEN 'N'
					WHEN "lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND  "lvLowerThreshold" IS NOT NULL 
						AND "RowCount"  BETWEEN  "lvlastrowcount" - ("lvlastrowcount" * (COALESCE("lvLowerThreshold",'0')::bigint/100::float8))   
											AND	 "lvlastrowcount" + ("lvlastrowcount" * (COALESCE("lvUpperThreshold",'0')::bigint/100::float8)) THEN 'N'
					WHEN "lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND  "lvLowerThreshold" IS NOT NULL
						AND "RowCount" NOT BETWEEN  "lvlastrowcount" - ("lvlastrowcount" * (COALESCE("lvLowerThreshold",'0')::bigint/100::float8))   
											AND	    "lvlastrowcount" + ("lvlastrowcount" * (COALESCE("lvUpperThreshold",'0')::bigint/100::float8)) THEN 'Y'
					WHEN ("lvScorecount" >= 1 AND "lvUpperThreshold" IS NOT NULL AND "lvLowerThreshold" IS NULL 
							AND "RowCount" > ("lvlastrowcount" + ("lvlastrowcount" * (COALESCE("lvUpperThreshold",'0')::bigint/100::float8))))
						OR ("lvScorecount" >= 1 AND "lvUpperThreshold" IS NULL  AND "lvLowerThreshold" IS NOT NULL 
							AND "RowCount" < ("lvlastrowcount" - ("lvlastrowcount" * (COALESCE("lvLowerThreshold",'0')::bigint/100::float8)))) THEN 'Y'
		
					ELSE 'N' 
				END)
	/*	(CASE 
					WHEN  "lvScorecount" >=1 AND UPPER("lvUpperThreshold") = UPPER('Unlimited') AND UPPER("lvLowerThreshold") = UPPER('Unlimited') THEN 'N'
					WHEN  "lvScorecount" >=1 AND "RowCount"  BETWEEN  "lvlastrowcount"-("lvlastrowcount"*("lvLowerThreshold"::bigint/100::float8)) AND  
													"lvlastrowcount"+("lvlastrowcount"*("lvUpperThreshold"::bigint/100::float8))THEN 'N' 
					WHEN "lvScorecount" >=1  AND "RowCount" NOT BETWEEN  "lvlastrowcount"-("lvlastrowcount"*("lvLowerThreshold"::bigint/100::float8)) AND  
													"lvlastrowcount"+("lvlastrowcount"*("lvUpperThreshold"::bigint/100::float8))THEN 'Y' 
					WHEN  "lvScorecount" < 1 THEN 'N' 
				ELSE 'N' 
				END) */
		INTO "lvRowCountOutlierInd"
		FROM fda."FDAObjectsScoreValue"
		WHERE "FDAObjectScoreValueId" = "InObjectScoreId";
	END IF;
	---------------------------------------Statistical--------------------------------------------------------
	---ELSE --UPPER("InLeftFieldValue") = UPPER('Statistical')
	IF UPPER("lvRowCountCalType") = UPPER('Statistical') 
	THEN 
	
			WITH MEDIAN_TAB("AvgRowCount","StdevRowCount") AS
			(SELECT AVG(a."RowCount") "AvgRowCount",
					COALESCE(STDDEV(a."RowCount"),0) "StdevRowCount"
			FROM fda."FDAObjectsScoreValue" a,
				fda."FDASystemObjects" b
			WHERE a."FDASystemObjectsId" = b."FDASystemObjectsId"
				AND a."FDASystemObjectsId" = "InObjectId"
				AND a."CalenderDate" >= (CASE WHEN COALESCE(b."NewBaseLineInd",'N') = 'Y' THEN CAST(b."NewBaseLineDateTime" AS DATE) ELSE (CURRENT_DATE - INTERVAL '30 day') END ))
			
			SELECT 
				(ABS("RowCount" - "AvgRowCount")/ (CASE WHEN "StdevRowCount" = 0 THEN 1 ELSE "StdevRowCount" END)) "Ratio",	
				(CASE 
					WHEN ((ABS("RowCount" - "AvgRowCount")/(CASE WHEN "StdevRowCount" = 0 THEN 1 ELSE "StdevRowCount" END)) > 1
					AND (ABS("RowCount") > 2 * ABS("AvgRowCount") OR ABS("RowCount") <  ABS("AvgRowCount") )) THEN 'Y' 
					ELSE 'N' 
				END) "Ind"
			INTO "lvRatio","lvRowCountOutlierInd"
			FROM fda."FDAObjectsScoreValue"
				JOIN MEDIAN_TAB ON 1=1
			WHERE "FDAObjectScoreValueId" = "InObjectScoreId";
	END IF;
END IF;

		RAISE NOTICE 'lvRowCountOutlierInd : %', "lvRowCountOutlierInd";

		UPDATE fda."FDAObjectsScoreValue"
		SET "RowCountOutlierInd" = "lvRowCountOutlierInd","LastUpdatedBy" = "InUserName"
		WHERE "FDAObjectScoreValueId" = "InObjectScoreId";  
		
	OPEN $4 FOR
	
		SELECT (CASE WHEN "RowCountOutlierInd" = 'Y' THEN true ELSE false END) "RowCountOutlierInd"
		FROM fda."FDAObjectsScoreValue"
		WHERE "FDAObjectScoreValueId" = "InObjectScoreId" 
		AND "LastUpdatedBy" = "InUserName"; 
			
	RETURN NEXT $4;

		
END;
$BODY$;
--------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_InsertImportMetadataAppend"(
	"InUserName" character varying,
	"InSystemName" character varying,
	"InConnectedSystemMetaData" text)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE "ITEM_CURSOR" CURSOR FOR SELECT "VALUE" 
		FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
		WHERE "VALUE" IS NOT NULL;
		
DECLARE "MetaData" TEXT;
        "lvFDASystemId" BIGINT;
        "FDASystemObjectId" BIGINT;
        "FDASystemObjectFieldId" BIGINT;
		"lvSystemCategoryType" TEXT;

DECLARE "ChildId" BIGINT;
        "ChildSystemsId" BIGINT;
        "ChildTableId"	BIGINT;
		"ChildColumnId" BIGINT;
		"lvTableCount" BIGINT;
		"lvTableColumnCount" BIGINT;
		"lvMetaDataStatusInd1" TEXT;
		"lvMetaDataStatusInd2" TEXT;

BEGIN

/*SELECT "FDASystemsId" INTO "lvFDASystemId"
FROM fda."FDASystems" 
WHERE "SystemAliasName" = "InSystemName"; */

SELECT "FDASystemsId","SystemCategoryType"
INTO "lvFDASystemId","lvSystemCategoryType"
FROM fda."FDASystems" 
WHERE "SystemAliasName" = "InSystemName";

-----------------------------(INSERT DATA FOR BACKUP TABLE)----------------------------------------------------

------------------------------------APIBASED OBJECT---------------------------------------------

IF UPPER("lvSystemCategoryType") = UPPER('APIBASED') 
THEN 
	DELETE FROM  fda."FDASystemObjectFieldBackup"
	WHERE "ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'')
							FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
							WHERE "VALUE" IS NOT NULL)
	AND "FDASystemsId" = "lvFDASystemId";						
	
	INSERT INTO fda."FDASystemObjectFieldBackup"
		(	
			"FDASystemsId",
			"FDASystemObjectsId",
			"FDASystemObjectFieldsId",
			"ObjectName",
			"FieldName",
			"IsNullPossible",
			"FieldDataType",
			"CharacterMaximumLength",
			"ColumnPrecision",
			"ObsoleteInMetaDataInd",
			"LastUpdatedOn",
			"LastSyncedBy",
			"CreatedBy",
			"CreationDate",
			"LastDeletedOn",
			"LastDeletedBy"
		)
	SELECT  DISTINCT 
			b."FDASystemsId",
			b."FDASystemObjectsId",
			b."FDASystemObjectFieldsId",
			a."ObjectName",
			b."FieldName",
			b."IsNullPossible",
			b."FieldDataType",
			b."CharacterMaximumLength",
			b."ColumnPrecision",
			b."ObsoleteInMetaDataInd",
			b."LastUpdatedOn",
			b."LastSyncedBy",
			b."CreatedBy",
			b."CreationDate",
			b."LastDeletedOn",
			b."LastDeletedBy"
	FROM fda."FDASystemObjects" a
	LEFT OUTER JOIN fda."FDASystemObjectFields" b
		ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
		AND a."FDASystemsId" =  b."FDASystemsId"
	WHERE a."ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'')
								FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
								WHERE "VALUE" IS NOT NULL
							)
		AND b."FDASystemsId" = "lvFDASystemId";
	
	---------------------------------------------------------------------------------
	SELECT COUNT(*)
	INTO "lvTableCount"
	FROM
		(SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
		 FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
		 WHERE "VALUE" IS NOT NULL
		) x;
	
		IF "lvTableCount" > 0 THEN
		
			INSERT INTO fda."FDASystemObjects"
			(
				"FDASystemsId",
				"ObjectName",
				"ObjectType",
				"ObsoleteInMetaDataInd",
				"LastSyncUpDate",
				"LastUpdatedBy",
				"CreationDate",
				"CreatedBy"
			)
			SELECT 
				"FDASystemsId",
				"ObjectName",
				'DATA' "ObjectType",
				'NEW' "ObsoleteInMetaDataInd",
				CURRENT_DATE,
				"InUserName",
				CURRENT_DATE,
				"InUserName"
			FROM
				(
					SELECT 
						"lvFDASystemId" "FDASystemsId",
						"ObjectName"
					FROM (SELECT DISTINCT 
								"lvFDASystemId" "FDASystemsId",
								COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
							FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
							WHERE "VALUE" IS NOT NULL) x
				EXCEPT
				
					SELECT DISTINCT
						"FDASystemsId" ,
						"ObjectName"
					FROM fda."FDASystemObjects"
				) Y;
			--RAISE NOTICE 'FDASystemObjectsId: %','11111';
		END IF;
		
		UPDATE fda."FDASystemObjects" a
		SET "LastUpdatedBy" = "InUserName",
			"LastSyncUpDate" = CURRENT_DATE
		FROM(SELECT DISTINCT  
					SPLIT_PART("Data",'^',1) "ObjectName"
	  		FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData",'|')) "Data"
			)x
		WHERE a."ObjectName" = x."ObjectName"
		AND a."FDASystemsId" = "lvFDASystemId";
									
		UPDATE fda."FDASystemObjectFields"
		SET "ObsoleteInMetaDataInd" = '',
			"LastSyncedBy" = "InUserName"
		WHERE "FDASystemsId" = "lvFDASystemId"
		AND "FDASystemObjectsId" IN (SELECT DISTINCT "FDASystemObjectsId" FROM fda."FDASystemObjects"
										WHERE "FDASystemsId" = "lvFDASystemId"
										AND "ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
															 FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
															 WHERE "VALUE" IS NOT NULL
															)
									);
			
	FOR row IN "ITEM_CURSOR" LOOP
	"MetaData" = REPLACE(CAST(row AS TEXT),'(','');
	"MetaData" = REPLACE("MetaData",')','');
	"MetaData" = REPLACE("MetaData",'"','');
	
	RAISE NOTICE 'MetaData: %',"MetaData";
	
	--RAISE NOTICE 'FDASystemObjectsId: %','22222';
	SELECT "FDASystemObjectsId" 
		INTO "FDASystemObjectId"
	FROM fda."FDASystemObjects"
	WHERE "ObjectName" = SPLIT_PART("MetaData",'^',1)
		AND "FDASystemsId" = "lvFDASystemId"
		ORDER BY "FDASystemObjectsId" ASC
		LIMIT 1;
		
	--RAISE NOTICE 'FDASystemObjectsId: %','33333';
	SELECT "FDASystemObjectFieldsId" 
		INTO "FDASystemObjectFieldId"
	FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = "lvFDASystemId"
		AND "FDASystemObjectsId" = "FDASystemObjectId"
		AND "FieldName" = SPLIT_PART("MetaData",'^',3)
	ORDER BY "FDASystemObjectFieldsId" ASC
	LIMIT 1;
		
	RAISE NOTICE 'FDASystemObjectId: %',"FDASystemObjectId";
	RAISE NOTICE 'FDASystemObjectFieldsId: %',"FDASystemObjectFieldId";
	-------------------------------------------------------------------------------------------------------
	SELECT CONCAT((CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER' WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING' END),
				  (CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER' WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING' END) 
				 )
		INTO "lvMetaDataStatusInd1";
		
	SELECT CONCAT("FieldDataType","UserOverwriteDatatype")
		INTO "lvMetaDataStatusInd2"
	FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = "lvFDASystemId"
		AND "FDASystemObjectsId" = "FDASystemObjectId"
		AND "FDASystemObjectFieldsId" = "FDASystemObjectFieldId";
	-------------------------------------------------------------------------------------------------------
	RAISE NOTICE 'lvMetaDataStatusIndAPI1: %',"lvMetaDataStatusInd1";
	RAISE NOTICE 'lvMetaDataStatusIndAPI2: %',"lvMetaDataStatusInd2";
	
	IF COALESCE("FDASystemObjectFieldId",0) > 0
	THEN
	
		RAISE NOTICE 'Value: %','Data Updated In FDASystemObjectFields Table';
		
		UPDATE fda."FDASystemObjectFields"
		SET "FieldName" = SPLIT_PART("MetaData",'^',2),
			--"IsNullPossible" = SPLIT_PART("MetaData",'^',3),
			"FieldDataType" = (CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER'
									WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING'
							   END),
			"UserOverwriteDatatype"	= (CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER'
											WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING'
									   END),
			--"CharacterMaximumLength" = SPLIT_PART("MetaData",'^',5),
			--"ColumnPrecision" = SPLIT_PART("MetaData",'^',6),
			"ObsoleteInMetaDataInd" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN 'UPDATED'  
											ELSE 'NEW'
										END),
			"LastUpdatedOn" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN CURRENT_DATE 
										ELSE(CASE WHEN COALESCE("LastDeletedOn",'') > '' THEN CURRENT_DATE
														ELSE "LastUpdatedOn" 
													END) 
								END),
			"LastSyncedBy" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN  "InUserName"
									ELSE(CASE WHEN COALESCE("LastDeletedOn",'') > '' THEN "InUserName"
													ELSE "LastSyncedBy" 
												END)  
								END),
			"LastDeletedOn" = NULL,
			"LastDeletedBy" = NULL
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "FDASystemObjectId"
			AND "FDASystemObjectFieldsId" = "FDASystemObjectFieldId";
	
	ELSE 
	
		RAISE NOTICE 'Value: %','Data Inserted In FDASystemObjectFields Table...';
	
		INSERT INTO  fda."FDASystemObjectFields"
		(
			"FDASystemsId",
			"FDASystemObjectsId",
			"FieldName",
			--"IsNullPossible",
			"FieldDataType",
			"UserOverwriteDatatype",
			--"CharacterMaximumLength",
			--"ColumnPrecision",
			"ObsoleteInMetaDataInd",
			"LastMetaDataSynchUpDate",
			"LastUpdatedOn",
			"LastSyncedBy",
			"CreatedBy",
			"CreationDate"
		)
		VALUES
		(
			"lvFDASystemId",
			"FDASystemObjectId",
			SPLIT_PART("MetaData",'^',2),    
			--SPLIT_PART("MetaData",'^',3),    
			(CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER'
				WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING' END),  
			(CASE WHEN SPLIT_PART("MetaData",'^',3) IN ('KEYFIG') THEN 'NUMBER'
				WHEN SPLIT_PART("MetaData",'^',3) IN ('CHARARCTERITICS') THEN 'STRING' END),
			--SPLIT_PART("MetaData",'^',5),    
			--SPLIT_PART("MetaData",'^',6),
			'NEW',
			CURRENT_DATE,
			CURRENT_DATE,
			"InUserName",
			"InUserName",
			CURRENT_DATE
		);
	
	END IF;
	
	END LOOP;
	
	UPDATE fda."FDASystemObjectFields" 
	SET "ObsoleteInMetaDataInd" = 'DELETED',
		"LastDeletedOn" = CURRENT_DATE,
		"LastDeletedBy" = "InUserName"
	WHERE "FDASystemsId" = "lvFDASystemId"
	AND "ObsoleteInMetaDataInd" = '';
	
	/*
	DELETE FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = "lvFDASystemId"
	AND "ObsoleteInMetaDataInd" = ''
	AND "LastSyncedBy" = "InUserName";
	*/
------------------------------------NORMAL OBJECT---------------------------------------------
ELSE
	DELETE FROM  fda."FDASystemObjectFieldBackup"
	WHERE "ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'')
							FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
							WHERE "VALUE" IS NOT NULL
						  )
	AND "FDASystemsId" = "lvFDASystemId";						
	
	INSERT INTO fda."FDASystemObjectFieldBackup"
		(	
			"FDASystemsId",
			"FDASystemObjectsId",
			"FDASystemObjectFieldsId",
			"ObjectName",
			"FieldName",
			"IsNullPossible",
			"FieldDataType",
			"CharacterMaximumLength",
			"ColumnPrecision",
			"ObsoleteInMetaDataInd",
			"LastUpdatedOn",
			"LastSyncedBy",
			"CreatedBy",
			"CreationDate",
			"LastDeletedOn",
			"LastDeletedBy"
		)
	SELECT  DISTINCT 
			b."FDASystemsId",
			b."FDASystemObjectsId",
			b."FDASystemObjectFieldsId",
			a."ObjectName",
			b."FieldName",
			b."IsNullPossible",
			b."FieldDataType",
			b."CharacterMaximumLength",
			b."ColumnPrecision",
			b."ObsoleteInMetaDataInd",
			b."LastUpdatedOn",
			b."LastSyncedBy",
			b."CreatedBy",
			b."CreationDate",
			b."LastDeletedOn",
			b."LastDeletedBy"
	FROM fda."FDASystemObjects" a
	LEFT OUTER JOIN fda."FDASystemObjectFields" b
		ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
		AND a."FDASystemsId" =  b."FDASystemsId"
	WHERE a."ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'')
								FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
								WHERE "VALUE" IS NOT NULL)
		AND b."FDASystemsId" = "lvFDASystemId";
	
	---------------------------------------------------------------------------------
	SELECT COUNT(*)
	INTO "lvTableCount"
	FROM
	(SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
	FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
	WHERE "VALUE" IS NOT NULL) x;
	
		IF "lvTableCount" > 0 THEN
		
			INSERT INTO fda."FDASystemObjects"
			(
				"FDASystemsId",
				"ObjectName",
				"ObjectType",
				"ObsoleteInMetaDataInd",
				"LastSyncUpDate",
				"LastUpdatedBy",
				"CreationDate",
				"CreatedBy"
			)
			SELECT 
				"FDASystemsId",
				"ObjectName",
				'DATA' "ObjectType",
				'NEW' "ObsoleteInMetaDataInd",
				CURRENT_DATE,
				"InUserName",
				CURRENT_DATE,
				"InUserName"
			FROM
				(
					SELECT 
						"lvFDASystemId" "FDASystemsId",
						"ObjectName"
					FROM (SELECT DISTINCT 
								"lvFDASystemId" "FDASystemsId",
								COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
							FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
							WHERE "VALUE" IS NOT NULL) x
				EXCEPT
				
					SELECT DISTINCT
						"FDASystemsId" ,
						"ObjectName"
					FROM fda."FDASystemObjects"
				) Y;
			--RAISE NOTICE 'FDASystemObjectsId: %','11111';		
			
		END IF;
		
		UPDATE fda."FDASystemObjects" a
		SET "LastUpdatedBy" = "InUserName",
			"LastSyncUpDate" = CURRENT_DATE
		FROM(SELECT DISTINCT  
					SPLIT_PART("Data",'^',1) "ObjectName"
	  		FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData",'|')) "Data")x
		WHERE a."ObjectName" = x."ObjectName"
		AND a."FDASystemsId" = "lvFDASystemId";	
									
		UPDATE fda."FDASystemObjectFields"
		SET "ObsoleteInMetaDataInd" = '',
			"LastSyncedBy" = "InUserName"
		WHERE "FDASystemsId" = "lvFDASystemId"
		AND "FDASystemObjectsId" IN (SELECT DISTINCT "FDASystemObjectsId" FROM fda."FDASystemObjects"
										WHERE "FDASystemsId" = "lvFDASystemId"
										AND "ObjectName" IN (SELECT DISTINCT COALESCE(SPLIT_PART("VALUE",'^',1),'') "ObjectName"
										FROM UNNEST(STRING_TO_ARRAY("InConnectedSystemMetaData" ,'|'))"VALUE"
										WHERE "VALUE" IS NOT NULL));
		
	
	FOR row IN "ITEM_CURSOR" LOOP
	"MetaData" = REPLACE(CAST(row AS TEXT),'(','');
	"MetaData" = REPLACE("MetaData",')','');
	"MetaData" = REPLACE("MetaData",'"','');
	
	RAISE NOTICE 'MetaData: %',"MetaData";
	
	--RAISE NOTICE 'FDASystemObjectsId: %','22222';
	SELECT "FDASystemObjectsId" 
		INTO "FDASystemObjectId"
	FROM fda."FDASystemObjects"
	WHERE "ObjectName" = SPLIT_PART("MetaData",'^',1)
		AND "FDASystemsId" = "lvFDASystemId"
		ORDER BY "FDASystemObjectsId" ASC
		LIMIT 1;
		
	--RAISE NOTICE 'FDASystemObjectsId: %','33333';
	SELECT "FDASystemObjectFieldsId" 
		INTO "FDASystemObjectFieldId"
	FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = "lvFDASystemId"
		AND "FDASystemObjectsId" = "FDASystemObjectId"
		AND "FieldName" = SPLIT_PART("MetaData",'^',2)
		ORDER BY "FDASystemObjectFieldsId" ASC
		LIMIT 1;
		
		RAISE NOTICE 'FDASystemObjectId: %',"FDASystemObjectId";
		RAISE NOTICE 'FDASystemObjectFieldsId: %',"FDASystemObjectFieldId";
		
		SELECT CONCAT(SPLIT_PART("MetaData",'^',3),
					  SPLIT_PART("MetaData",'^',4),
			          (CASE WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('FLOAT64','INT16','INT32','INT64','NUMBER','INTEGER','DECIMAL','DECIMAL17,3','DECIMAL17,2','INT','NUMBER','DOUBLE','SMALLINT','TINYINT','NUMERIC','BIGNUMERIC','FLOAT','BINARY_FLOAT','BINARY_DOUBLE','LONG','BIT') THEN 'NUMBER'
					       WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('VARCHAR','NVARCHAR','NVARCHAR2','CHAR','STRING','BOOLEAN','BOOL','TEXT','VARBINARY','NCHAR','VARCHAR2','BLOB','CLOB','NCLOB') THEN 'STRING'
					       WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','TIMESTAMP6','DATETIME2') THEN 'DATE' 
				      END),
			          SPLIT_PART("MetaData",'^',5),
			          SPLIT_PART("MetaData",'^',6)
			         )
		INTO "lvMetaDataStatusInd1";
		
		SELECT CONCAT("IsNullPossible","FieldDataType","UserOverwriteDatatype","CharacterMaximumLength","ColumnPrecision")
			INTO "lvMetaDataStatusInd2"
		FROM fda."FDASystemObjectFields"	
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "FDASystemObjectId"
			AND "FDASystemObjectFieldsId" = "FDASystemObjectFieldId";
		
		RAISE NOTICE 'lvMetaDataStatusIndDB1: %',"lvMetaDataStatusInd1";
		RAISE NOTICE 'lvMetaDataStatusIndDB2: %',"lvMetaDataStatusInd2";
	
	IF COALESCE("FDASystemObjectFieldId",0) > 0
	THEN
	
		RAISE NOTICE 'Value: %','Data Updated In FDASystemObjectFields Table';	
		
		UPDATE fda."FDASystemObjectFields"
		SET "FieldName" = SPLIT_PART("MetaData",'^',2),
			"IsNullPossible" = COALESCE(NULLIF(SPLIT_PART("MetaData",'^',3),''),'false'),
			"FieldDataType" = SPLIT_PART("MetaData",'^',4),
			"UserOverwriteDatatype"	= (CASE WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('FLOAT64','INT16','INT32','INT64','NUMBER','INTEGER','DECIMAL','DECIMAL17,3','DECIMAL17,2','INT','NUMBER','DOUBLE','SMALLINT','TINYINT','NUMERIC','BIGNUMERIC','FLOAT','BINARY_FLOAT','BINARY_DOUBLE','LONG','BIT') THEN 'NUMBER'
											WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('VARCHAR','NVARCHAR','NVARCHAR2','CHAR','STRING','BOOLEAN','BOOL','TEXT','VARBINARY','NCHAR','VARCHAR2','BLOB','CLOB','NCLOB') THEN 'STRING'
											WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','TIMESTAMP6','DATETIME2') THEN 'DATE' 
									   END),
			"CharacterMaximumLength" = SPLIT_PART("MetaData",'^',5),
			"ColumnPrecision" = SPLIT_PART("MetaData",'^',6),
			"PrimaryKey" = COALESCE(NULLIF(SPLIT_PART("MetaData",'^',7),''),'false'),
			"ForeignKey" = COALESCE(NULLIF(SPLIT_PART("MetaData",'^',8),''),'false'),
			"ObsoleteInMetaDataInd" =   (CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN 'UPDATED'  
											ELSE 'NEW'
										END),
			"LastUpdatedOn" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN CURRENT_DATE 
										ELSE(CASE WHEN COALESCE("LastDeletedOn",'') > '' THEN CURRENT_DATE
														ELSE "LastUpdatedOn" 
													END) 
								END),
			"LastSyncedBy" = (CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN "InUserName" 
									ELSE(CASE WHEN COALESCE("LastDeletedOn",'') > '' THEN "InUserName"
													ELSE "LastSyncedBy" 
												END) 
							  END),
			"LastDeletedOn" = NULL,
			"LastDeletedBy" = NULL
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "FDASystemObjectId"
			AND "FDASystemObjectFieldsId" = "FDASystemObjectFieldId";
		--AND CONCAT("IsNullPossible","FieldDataType","UserOverwriteDatatype","CharacterMaximumLength","ColumnPrecision") != "lvMetaDataStatusInd1";
	
	ELSE 
	
		RAISE NOTICE 'Value: %','Data Inserted In FDASystemObjectFields Table...';
	
		INSERT INTO  fda."FDASystemObjectFields"
		(
			"FDASystemsId",
			"FDASystemObjectsId",
			"FieldName",
			"IsNullPossible",
			"FieldDataType",
			"UserOverwriteDatatype",
			"CharacterMaximumLength",
			"ColumnPrecision",
			"PrimaryKey",
			"ForeignKey",
			"ObsoleteInMetaDataInd",
			"LastMetaDataSynchUpDate",
			"LastUpdatedOn",
			"LastSyncedBy",
			"CreatedBy",
			"CreationDate"
		)
		VALUES
		(
			"lvFDASystemId",
			"FDASystemObjectId",
			SPLIT_PART("MetaData",'^',2),    
			COALESCE(NULLIF(SPLIT_PART("MetaData",'^',3),''),'false'),   
			SPLIT_PART("MetaData",'^',4),  
			(CASE WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('FLOAT64','INT16','INT32','INT64','NUMBER','INTEGER','DECIMAL','DECIMAL17,3','DECIMAL17,2','INT','NUMBER','DOUBLE','SMALLINT','TINYINT','NUMERIC','BIGNUMERIC','FLOAT','BINARY_FLOAT','BINARY_DOUBLE','LONG','BIT') THEN 'NUMBER'
				  WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('VARCHAR','NVARCHAR','NVARCHAR2','CHAR','STRING','BOOLEAN','BOOL','TEXT','VARBINARY','NCHAR','VARCHAR2','BLOB','CLOB','NCLOB') THEN 'STRING'
				  WHEN UPPER(SPLIT_PART("MetaData",'^',4)) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','TIMESTAMP6','DATETIME2') THEN 'DATE' 
			 END),
			SPLIT_PART("MetaData",'^',5),    
			SPLIT_PART("MetaData",'^',6),    
			COALESCE(NULLIF(SPLIT_PART("MetaData",'^',7),''),'false'),
			COALESCE(NULLIF(SPLIT_PART("MetaData",'^',8),''),'false'),
			'NEW',
			CURRENT_DATE,
			CURRENT_DATE,
			"InUserName",
			"InUserName",
			CURRENT_DATE
		);
	
	END IF;
	
	END LOOP;

	/*DELETE FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = "lvFDASystemId"
	AND "ObsoleteInMetaDataInd" = ''
	AND "LastSyncedBy" = "InUserName";*/
	
	UPDATE fda."FDASystemObjectFields"
	SET "ObsoleteInMetaDataInd" = 'DELETED',
		"LastDeletedOn" = CURRENT_DATE,
		"LastDeletedBy" = "InUserName"
	WHERE "FDASystemsId" = "lvFDASystemId"
		AND "ObsoleteInMetaDataInd" = ''; 

END IF;
/*
SELECT "fda"."Proc_InsertImportMetadataAppend"(
      'uttam.tripathy@performalytic.com',
      'SANDBOX1',
      'DBO.EMPLOYEES1^ID^NO^NUMBER^0^(38,1)^true^false^true|DBO.EMPLOYEES1^FNAME^YES^TEXT^50^^false^false^false|DBO.EMPLOYEES1^MIDNAME^YES^TEXT^50^^false^false^false|DBO.EMPLOYEES1^LASTNAME^YES^TEXT^50^^false^false^false|DBO.EMPLOYEES1^GENDER^YES^TEXT^10^^false^false^false|DBO.EMPLOYEES1^AGE^YES^NUMBER^0^(38,0)^false^false^false|DBO.EMPLOYEES1^STATE^YES^TEXT^50^^false^false^false|DBO.EMPLOYEES1^SALARY^YES^NUMBER^0^(10,2)^false^false^false|DBO.EMPLOYEES1^HIRE_DATE^YES^DATE^0^^false^false^false'
      );

*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListFDASystemTableColumns"(
	"InUserInput" character varying,
	"InFDASystem" character varying,
	"InFDATableName" character varying,
	"InFieldDataType" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE 
"UserInputLike" VARCHAR(100);
BEGIN
"UserInputLike" := CONCAT('%',"InUserInput",'%');

IF "InFDASystem"  > '' AND "InFDATableName"  > '' AND UPPER("InFieldDataType") = 'NUMERIC' THEN
OPEN $5 FOR --OPEN THE REF CURSOR

	SELECT  a."FDASystemObjectFieldsId" AS "FDASystemTableColumnsId",
			CAST('true' AS BOOLEAN) "Status",
			a."FieldName" AS "ColumnName",
			( CASE WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT') THEN  'NUMBER' END) AS "DataType",
			'' "Function"
    FROM fda."FDASystemObjectFields"  a
	INNER JOIN fda."FDASystemObjects" b
	    ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN  fda."FDASystems" c
	    ON b."FDASystemsId" = c."FDASystemsId"
    WHERE UPPER(a."FieldName") LIKE (CASE WHEN "InUserInput" = '' THEN UPPER(a."FieldName") ELSE UPPER("UserInputLike") END) 
		AND UPPER(a."FieldDataType") IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT')
		AND b."ObjectName" = "InFDATableName"
		AND c."SystemAliasName" = "InFDASystem"
		AND COALESCE(a."ObsoleteInMetaDataInd",'NEW') <> 'DELETED';
	
RETURN NEXT $5;

ELSE IF "InFDASystem"  > '' AND "InFDATableName"  > '' AND UPPER("InFieldDataType") = 'STRING' THEN
OPEN $5 FOR --OPEN THE REF CURSO
	SELECT  a."FDASystemObjectFieldsId" AS "FDASystemTableColumnsId",
			CAST('true' AS BOOLEAN) "Status",
			a."FieldName" AS "ColumnName",
			( CASE WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('VARCHAR2','VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') THEN  'STRING' END) AS "DataType",
			'' "Function"
    FROM fda."FDASystemObjectFields"  a
	INNER JOIN fda."FDASystemObjects" b
	    ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN  fda."FDASystems" c
	    ON b."FDASystemsId" = c."FDASystemsId"
    WHERE UPPER(a."FieldName") LIKE (CASE WHEN "InUserInput" = '' THEN UPPER(a."FieldName") ELSE UPPER("UserInputLike") END) 
		AND UPPER(a."FieldDataType") NOT IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT')
		AND b."ObjectName" = "InFDATableName"
		AND c."SystemAliasName" = "InFDASystem"
		AND COALESCE(a."ObsoleteInMetaDataInd",'NEW') <> 'DELETED'
	ORDER BY a."FDASystemObjectFieldsId" DESC;
RETURN NEXT $5;
ELSE IF "InFDASystem"  > '' AND "InFDATableName"  > '' AND UPPER("InFieldDataType") = '' THEN

OPEN $5 FOR --OPEN THE REF CURSOR

    SELECT *
	FROM(SELECT a."FDASystemObjectFieldsId" AS "FDASystemTableColumnsId",
				CAST('true' AS BOOLEAN) "Status",
				a."FieldName" AS "ColumnName",
				(CASE 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT') THEN  'NUMBER' 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('VARCHAR2','VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') THEN  'STRING' 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2','TIMESTAMP6') THEN  'DATE'
				END) AS "DataType",
				(CASE 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT') THEN  'SUM' 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('VARCHAR2','VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') THEN  'COUNT DISTINCT' 
					WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2','TIMESTAMP6') THEN  'COUNT DISTINCT'
				END) AS "Function"
		FROM fda."FDASystemObjectFields"  a
		INNER JOIN fda."FDASystemObjects" b
			ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN  fda."FDASystems" c
			ON b."FDASystemsId" = c."FDASystemsId"
		WHERE UPPER(a."FieldName") LIKE (CASE WHEN "InUserInput" = '' THEN UPPER(a."FieldName") ELSE UPPER("UserInputLike") END) 
			AND b."ObjectName" = "InFDATableName"
			AND c."SystemAliasName" = "InFDASystem"
			AND COALESCE(a."ObsoleteInMetaDataInd",'NEW') <> 'DELETED'
		--ORDER BY a."FieldName" ASC
		UNION 
		SELECT  0 AS "FDASystemTableColumnsId",
				CAST('true' AS BOOLEAN) "Status",
				'FDA_RECORD_COUNT' AS "ColumnName",
				'NUMBER' AS "DataType",'SUM' AS "Function"
		)x
	ORDER BY "ColumnName" ASC;

RETURN NEXT $5;

ELSE IF "InUserInput" > '' THEN

OPEN $5 FOR --OPEN THE REF CURSOR

	SELECT 	a."FDASystemObjectFieldsId" AS "FDASystemTableColumnsId",
			CAST('true' AS BOOLEAN) "Status",
			a."FieldName" AS "ColumnName",
		   (CASE 
				WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT') THEN  'NUMBER' 
				WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('VARCHAR2','VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') THEN  'STRING' 
				WHEN UPPER(COALESCE(NULLIF("UserOverwriteDatatype",''), "FieldDataType")) IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2','TIMESTAMP6') THEN  'DATE'
			END) AS "DataType",
			(CASE 
				WHEN UPPER(a."FieldDataType") IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','BIT') THEN  'SUM' 
				WHEN UPPER(a."FieldDataType") IN ('VARCHAR2','VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') THEN  'COUNT DISTINCT' 
				WHEN UPPER(a."FieldDataType") IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2','TIMESTAMP6') THEN  'COUNT DISTINCT'
			END) AS "Function"
    FROM fda."FDASystemObjectFields"  a
	INNER JOIN fda."FDASystemObjects" b
	    ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN  fda."FDASystems" c
	    ON b."FDASystemsId" = c."FDASystemsId"
	WHERE UPPER(a."FieldName") LIKE (CASE WHEN "InUserInput" = '' THEN UPPER("FieldName") ELSE UPPER("UserInputLike") END) 
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'NUMERIC' WHEN "InFieldDataType" = 'STRING' THEN 'CHAR' ELSE UPPER("FieldDataType") END)
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'INT' WHEN "InFieldDataType" = 'STRING' THEN 'VARCHAR' ELSE UPPER("FieldDataType") END)
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'NUMBER' WHEN "InFieldDataType" = 'STRING' THEN 'NVARCHAR' ELSE UPPER("FieldDataType") END)
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'BIGINT' WHEN "InFieldDataType" = 'STRING' THEN 'CHAR' ELSE UPPER("FieldDataType") END)
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'INTEGER' WHEN "InFieldDataType" = 'STRING' THEN 'NVARCHAR' ELSE UPPER("FieldDataType") END)
		AND UPPER(a."FieldDataType") = (CASE WHEN "InFieldDataType" = 'NUMERIC' THEN 'DECIMAL' WHEN "InFieldDataType" = 'STRING' THEN 'NVARCHAR' ELSE UPPER("FieldDataType") END)
		AND COALESCE(a."ObsoleteInMetaDataInd",'NEW') <> 'DELETED';
	
RETURN NEXT $5;
	
ELSE
OPEN $5 FOR --OPEN THE REF CURSOR
	SELECT "FDASystemObjectFieldsId" AS "FDASystemTableColumnsId",
		   "FieldName" AS "ColumnName"
	FROM fda."FDASystemObjectFields"
	WHERE "FDASystemsId" = 0 ;
RETURN NEXT $5;
END IF;
END IF;
END IF;
END IF;
/*
SELECT fda."proc_ListFDASystemTableColumns"('','Presto','fda.empl','','R1');
FETCH ALL IN "R1";
*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ViewMasterRules"(
	"INFDADataQualityRulesId" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "RulesCount" BIGINT;

BEGIN 

OPEN $2 FOR
		
	SELECT  COALESCE(b."RuleName",'') AS "MasterRuleName",
			COALESCE(b."RuleDescription",'') AS "RuleDescription",
			c."SystemAliasName" AS "SystemName",
			"RuleType" AS "RuleName",
			COALESCE("DAMADimension",'') AS "DAMADimension",
			COALESCE(NULLIF(COALESCE("LeftFieldValue",''),'null'),'') "LeftFieldValue",
			COALESCE(NULLIF(COALESCE("RightFieldValue",''),'null'),'') "RightFieldValue",
			(CASE WHEN "RuleType" <> 'Range of Values' THEN a."UpperThreshold" END) AS "UpperThreshold",
			(CASE WHEN "RuleType" <> 'Range of Values' THEN a."LowerThreshold" END) AS "LowerThreshold",
			(CASE WHEN "RuleType" = 'Range of Values'  THEN a."UpperThreshold" END) AS "HighestPossibleValue",
			(CASE WHEN "RuleType" = 'Range of Values'  THEN a."LowerThreshold" END) AS "LowestPossibleValue"
	FROM fda."FDADataQualityMasterRulesDetails" a
	RIGHT JOIN fda."FDADataQualityMasterRules" b
		ON a."FDADataQualityRulesId" = b."FDADataQualityRulesId"
	LEFT JOIN fda."FDASystems" c
		ON b."FDASystemsId" = c."FDASystemsId"
	WHERE b."FDADataQualityRulesId" = COALESCE(NULLIF("INFDADataQualityRulesId",'')::bigint,'0');
			
RETURN NEXT $2;

/*SELECT fda."Proc_ViewMasterRules"(
	'',--"INFDADataQualityRulesId" integer,
	'refcursor');
	FETCH ALL IN "refcursor";
	*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
DROP FUNCTION IF EXISTS fda."Proc_InsertFDADataQualityMasterRules" ;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_InsertFDADataQualityMasterRules"(
	"InRuleId" character varying,
	"InMasterRuleName" character varying,
	"InRuleDescription" text,
	"InData" text,
	"InCreatedBy" character varying,
	"InSystemName" character varying,
	"InDAMADimension" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "lvFDADataQualityRulesId" BIGINT;
DECLARE "OutQualityRuleId" BIGINT;
DECLARE "lvRules" TEXT;

BEGIN

IF "InRuleId" = '' THEN 

	INSERT INTO fda."FDADataQualityMasterRules"
				(
					"RuleName",
					"RuleDescription",
					"DAMADimension",
					"FDASystemsId",
					"CreatedOn",
					"CreatedBy"
				)
	VALUES
				(
					"InMasterRuleName",
					"InRuleDescription",
					"InDAMADimension",
					(SELECT "FDASystemsId" FROM fda."FDASystems" WHERE "SystemAliasName" = "InSystemName"),
					CURRENT_TIMESTAMP,
					"InCreatedBy"
				);
	
	SELECT MAX("FDADataQualityRulesId")
	INTO "OutQualityRuleId" 
	FROM fda."FDADataQualityMasterRules";
	
	INSERT INTO fda."FDADataQualityMasterRulesDetails"
				(
					"FDADataQualityRulesId",
					"RuleType",
					"LeftFieldValue",
					"RightFieldValue",
					"UpperThreshold",
					"LowerThreshold",
					"CreatedOn",
					"CreatedBy" 
				)
	SELECT 
			"OutQualityRuleId" ,
			NULLIF(SPLIT_PART("VALUE",'(^)',1),''),
			NULLIF(SPLIT_PART("VALUE",'(^)',2),''),
			NULLIF(SPLIT_PART("VALUE",'(^)',3),''),
			NULLIF(SPLIT_PART("VALUE",'(^)',4),''),
			NULLIF(SPLIT_PART("VALUE",'(^)',5),''),
			CURRENT_TIMESTAMP,
			"InCreatedBy"
	FROM UNNEST(STRING_TO_ARRAY("InData",'|')) "VALUE";
	
	SELECT MAX((CASE 
					WHEN UPPER("RuleType") = UPPER('Range of Values') THEN 'NUMBER'
					WHEN UPPER("RuleType") = UPPER('Date Range') THEN 'DATE'
					WHEN "RuleType" IN ('Enumerated Value','Row Count Variation','Date Range','Length Check','DataType Check','Possible Character','Blank/NonBlank','Fixed static value','Distinct Check','Enumerated Value(Query)','User Criteria') THEN 'NUMBER,STRING,DATE'
				END))
	INTO "lvRules"
	FROM(SELECT (CASE 
					WHEN "RuleType" IN ('Enumerated Value','Range of Values','Date Range','Length Check') AND "LeftFieldValue" > '' OR "RightFieldValue" > ''
						THEN  "RuleType"
					WHEN "RuleType" IN ('DataType Check','Possible Character','Blank/NonBlank','Fixed static value','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' 
						THEN "RuleType"
					WHEN "RuleType" IN ('Possible Character','Row Count Variation') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
						THEN "RuleType"
				END) "RuleType"
		FROM fda."FDADataQualityMasterRulesDetails"
		WHERE "FDADataQualityRulesId" = "OutQualityRuleId"
		)x
	WHERE "RuleType" IS NOT NULL;
	
	UPDATE fda."FDADataQualityMasterRules" 
	SET "RuleDataType" = "lvRules"
	WHERE "FDADataQualityRulesId" = "OutQualityRuleId";
	
ELSE
	
		UPDATE fda."FDADataQualityMasterRules"
			SET "RuleName" = "InMasterRuleName",
				"RuleDescription" = "InRuleDescription",
				"DAMADimension" = "InDAMADimension",
				"FDASystemsId" = (SELECT "FDASystemsId" FROM fda."FDASystems" WHERE "SystemAliasName" = "InSystemName"),
				"LastUpdatedOn" = CURRENT_TIMESTAMP,
				"LastUpdatedBy" = "InCreatedBy"
		WHERE "FDADataQualityRulesId" = "InRuleId"::bigint ;
			
		"OutQualityRuleId" := (SELECT  "InRuleId"::bigint);
			
		
		DELETE FROM fda."FDADataQualityMasterRulesDetails"
		WHERE "FDADataQualityRulesId" = "InRuleId"::bigint ;
		
		INSERT INTO fda."FDADataQualityMasterRulesDetails"
					(
						"FDADataQualityRulesId",
						"RuleType",
						"LeftFieldValue",
						"RightFieldValue",
						"UpperThreshold",
						"LowerThreshold",
						"CreatedOn",
						"CreatedBy" 
					)
		SELECT 
				"InRuleId"::bigint,
				NULLIF(SPLIT_PART("VALUE",'(^)',1),''),
				NULLIF(SPLIT_PART("VALUE",'(^)',2),''),
				NULLIF(SPLIT_PART("VALUE",'(^)',3),''),
				NULLIF(SPLIT_PART("VALUE",'(^)',4),''),
				NULLIF(SPLIT_PART("VALUE",'(^)',5),''),
				CURRENT_TIMESTAMP,
				"InCreatedBy"
		FROM UNNEST(STRING_TO_ARRAY("InData",'|')) "VALUE";
		
	SELECT MAX((CASE 
					WHEN UPPER("RuleType") = UPPER('Range of Values') THEN 'NUMBER'
					WHEN UPPER("RuleType") = UPPER('Date Range') THEN 'DATE'
					WHEN "RuleType" IN ('Enumerated Value','Row Count Variation','Date Range','Length Check','DataType Check','Possible Character','Blank/NonBlank','Fixed static value','Distinct Check','Enumerated Value(Query)','User Criteria') THEN 'NUMBER,STRING,DATE'
				END))
	INTO "lvRules"
	FROM (SELECT(CASE 
					WHEN "RuleType" IN ('Enumerated Value','Range of Values','Date Range','Length Check') AND "LeftFieldValue" > '' OR "RightFieldValue" > ''
						THEN  "RuleType"
					WHEN "RuleType" IN ('DataType Check','Possible Character','Blank/NonBlank','Fixed static value','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' 
						THEN "RuleType"
					WHEN "RuleType" IN ('Possible Character','Row Count Variation') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
						THEN "RuleType"
				END) "RuleType"
		FROM fda."FDADataQualityMasterRulesDetails"
		WHERE "FDADataQualityRulesId" = "InRuleId"::bigint
		)x
	WHERE "RuleType" IS NOT NULL;
	
	UPDATE fda."FDADataQualityMasterRules" 
	SET "RuleDataType" = "lvRules"
	WHERE "FDADataQualityRulesId" = "InRuleId"::bigint;
	
END IF;

OPEN $8 FOR
	SELECT "OutQualityRuleId";
RETURN NEXT $8;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ViewSystemObjectOverallPreference"(
	"InTabInd" character varying,
	"InSystemName" character varying,
	"InObjectName" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "lvFDASystemId" BIGINT;
		"lvFDASystemObjectId" BIGINT;

BEGIN
		SELECT "FDASystemsId"
			INTO "lvFDASystemId" 
		FROM fda."FDASystems" 
		WHERE "SystemAliasName" = "InSystemName";
		
		SELECT "FDASystemObjectsId" 
			INTO "lvFDASystemObjectId"
		FROM fda."FDASystemObjects"
		WHERE "FDASystemsId" = "lvFDASystemId"
		AND "ObjectName" = "InObjectName"; 
		
IF UPPER("InTabInd") = 'OBJECT' THEN

	OPEN $4 FOR
	
			SELECT  COALESCE(b."RowCountOutlierInd",a."RowCountOutlierInd",'N') AS "RowCountOutlierInd",
					COALESCE(b."FreshnessOutlierInd",a."FreshnessOutlierInd",'N') AS "FreshnessOutlierInd",
					COALESCE(b."RuleOutllierInd",a."RuleOutllierInd",'N') AS "RuleOutllierInd"
			FROM fda."FDASystems" a 
			INNER JOIN fda."FDASystemObjects" b 
				ON a."FDASystemsId" = b."FDASystemsId"
			WHERE a."SystemAliasName" = "InSystemName"
				AND b."ObjectName" = "InObjectName" ;
			
	RETURN NEXT $4;

ELSE IF UPPER("InTabInd") = 'SYSTEM' THEN

	OPEN $4 FOR
	
			SELECT  COALESCE(a."RowCountOutlierInd",'N') AS "RowCountOutlierInd",
					COALESCE(a."FreshnessOutlierInd",'N') AS "FreshnessOutlierInd",
					COALESCE(a."RuleOutllierInd",'N') AS "RuleOutllierInd"
			FROM fda."FDASystems" a
			WHERE a."SystemAliasName" = "InSystemName";
		
	RETURN NEXT $4;
	
END IF;
END IF;

/*

SELECT fda."Proc_ViewSystemObjectOverallPreference"(
'Object',-- 	"InTabInd" character varying,
'Perform_SapHana',-- 	"InSystemName" character varying,
'Hana Test',-- 	"InObjectName" character varying,
'R1',-- 	refcursor,
'R2'-- 	refcursor
);
FETCH ALL IN "R1";

*/

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
DROP FUNCTION IF EXISTS fda."Proc_ListMaintainDataQuality" ;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListMaintainDataQuality"(
	"InOffset" bigint,
	"InLimit" bigint,
	"InOrderBy" character varying,
	"InOredrByType" character varying,
	"InQualityRulesId" character varying,
	"InRuleName" character varying,
	"InRuleType" character varying,
	"InSystemName" character varying,
	"InRuleDescription" text,
	"InObjectName" character varying,
	"InFieldName" character varying,
	"InDAMADimension" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "InSearchInputLike" VARCHAR;
DECLARE "SelectString1" TEXT;
DECLARE "SelectString" TEXT;
DECLARE "FromString" TEXT;
DECLARE "lvInd" CHARACTER VARYING(1);
DECLARE "WhereConditionString" TEXT;
DECLARE "CountSelectString" TEXT;
DECLARE "OrderBystring" TEXT;
DECLARE "WhereObjectFieldCondition" TEXT;

BEGIN

"SelectString" :=CONCAT('SELECT 
								"FDADataQualityRulesId",
								"RuleName",
								"RuleDescription",
								"DAMADimension",
								"RuleType",
								REPLACE("RuleSignature",''~^~'','','') AS "RuleSignature",
								"RuleCount",
								"ObjectApplied",
								"ColumnsApplied",
								"RuleDataType",
								"LastUsedOn",
								"NumberOfException",
								"LinkedFields",
								"LinkedObject",
								"SystemName",
								"SystemType"
						FROM
							(SELECT 
									a."FDADataQualityRulesId",
									"RuleName" ,
									a."RuleDescription",
									COALESCE(a."DAMADimension",'''') "DAMADimension",
									"RuleType" AS "RuleType",
									"RuleSignature",
									"RuleCount",
									COALESCE(f."ObjectApplied",0) AS "ObjectApplied",
									COALESCE(e."ColumnsApplied",0) AS "ColumnsApplied",
									a."RuleDataType",
									e."LinkedFields",
									f."LinkedObject",
									SUBSTRING(a."CreatedOn",1,10) "LastUsedOn",
									COALESCE(g."NumberOfException",0) AS "NumberOfException",
									h."SystemAliasName" AS "SystemName",
									h."SystemType" 
						');

"FromString" := CONCAT('FROM fda."FDADataQualityMasterRules" a
						LEFT JOIN (SELECT 
										STRING_AGG("RuleType",'','')"RuleType",
										STRING_AGG("RuleSignature",''|'') "RuleSignature",
										"FDADataQualityRulesId",
										COUNT("RuleType") "RuleCount"
									FROM(SELECT 
												(CASE WHEN "RuleType" IN (''Enumerated Value'',''Date Range'',''Length Check'') AND ("LeftFieldValue" > '''' AND "RightFieldValue" > '''')
															THEN "RuleType" 
													WHEN "RuleType" IN (''DataType Check'',''Possible Character'',''Blank/NonBlank'',''Null Check'',''Forbidden Value'',''Permitted Value'',''Distinct Check'',''Enumerated Value(Query)'',''User Criteria'') AND "LeftFieldValue" > '''' 
															THEN "RuleType"
													WHEN "RuleType" IN (''Range of Values'',''Possible Character'',''Row Count Variation'') AND ("LeftFieldValue" > '''' OR "RightFieldValue" > '''') 
															THEN "RuleType"  
												END) "RuleType",
												(CASE WHEN "RuleType" IN (''Enumerated Value'',''Range of Values'',''Date Range'',''Length Check'') AND "LeftFieldValue" > '''' or "RightFieldValue" > ''''
															THEN  CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
													WHEN "RuleType" IN (''DataType Check'',''Possible Character'',''Blank/NonBlank'',''Null Check'',''Forbidden Value'',''Permitted Value'',''Distinct Check'',''Enumerated Value(Query)'',''User Criteria'') AND "LeftFieldValue" > '''' 
															THEN CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
													WHEN "RuleType" IN (''Possible Character'',''Row Count Variation'') AND ("LeftFieldValue" > '''' OR "RightFieldValue" > '''') 
															THEN CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
												END) "RuleSignature",
												"FDADataQualityRulesId" 
										FROM fda."FDADataQualityMasterRulesDetails"
										)m
									GROUP BY "FDADataQualityRulesId"
									) b
							ON a."FDADataQualityRulesId" = b."FDADataQualityRulesId" 
						LEFT JOIN ( SELECT	COUNT("FDASystemObjectFieldsId") AS "ColumnsApplied",
											STRING_AGG(distinct "FDASystemObjectFieldsId"::text,'','') "LinkedFields",
											c."FDADataQualityRulesId"
									FROM fda."FDASystemObjects" a
									INNER JOIN fda."FDASystemObjectFields" b
										ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
									INNER JOIN fda."FDADataQualityMasterRules" c
										ON b."MasterRuleId" = c."FDADataQualityRulesId"
									GROUP BY c."FDADataQualityRulesId"
									) e
								ON a."FDADataQualityRulesId" =  e."FDADataQualityRulesId"
						LEFT JOIN ( SELECT	COUNT(DISTINCT a."FDASystemObjectsId") AS "ObjectApplied",
					   						STRING_AGG(distinct a."FDASystemObjectsId"::text,'','') "LinkedObject",
											d."FDADataQualityRulesId" 
									FROM fda."FDASystemObjects" a
									LEFT JOIN ( SELECT 
													"FDASystemObjectsId",
													c."FDADataQualityRulesId" 
												FROM fda."FDASystemObjectFields" b
												INNER JOIN fda."FDADataQualityMasterRules" c
													ON b."MasterRuleId" = c."FDADataQualityRulesId"
											) d
										ON a."FDASystemObjectsId" = d."FDASystemObjectsId"
									GROUP BY d."FDADataQualityRulesId" 
								)f
							ON a."FDADataQualityRulesId" = f."FDADataQualityRulesId"
						LEFT JOIN ( SELECT 
											SUM("OutlierCount") AS "NumberOfException",
											"MasterRuleId"
									FROM fda."FDAObjectScoreOutlierCountByCategory"
									WHERE "LastUpdatedOn" > current_date - 30
										AND "MasterRuleId" IS NOT NULL
									GROUP BY "MasterRuleId"
									) g
							ON a."FDADataQualityRulesId" = g."MasterRuleId"
						LEFT JOIN fda."FDASystems" h
							ON a."FDASystemsId" = h."FDASystemsId"
						LEFT JOIN (SELECT a."ObjectName",
										  b."FieldName",
										  b."MasterRuleId"
									FROM fda."FDASystemObjects" a
									INNER JOIN fda."FDASystemObjectFields" b
										ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
									)i
							ON a."FDADataQualityRulesId" =  i."MasterRuleId"
						');						

IF "InObjectName" > '' OR "InFieldName" > '' THEN 
	"lvInd":= 'N';
	
	IF "InObjectName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'WHERE i."ObjectName" = ''',"InObjectName",''' ');
			"lvInd":= 'Y';
		ELSE
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'AND   i."ObjectName" = ''',"InObjectName",''' ');
		END IF;
	END IF;
	
	IF "InFieldName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'WHERE i."FieldName" ILIKE ''%', "InFieldName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'AND   i."FieldName" ILIKE ''%',"InFieldName",'%'' ');
		END IF;
	END IF;		
END IF;	
							
IF "InOrderBy" > '' AND "InOredrByType" > '' THEN  
"OrderBystring":= CONCAT('ORDER BY "',"InOrderBy"||'" '||"InOredrByType",'
						  OFFSET ', "InOffset" ,' ROWS
						  FETCH NEXT ',"InLimit",' ROWS ONLY');
ELSE 
"OrderBystring":= CONCAT('ORDER BY x."FDADataQualityRulesId" DESC
						  OFFSET ', "InOffset" ,' ROWS
						  FETCH NEXT ',"InLimit",' ROWS ONLY');				
END IF;

IF "InQualityRulesId" > '' OR "InRuleName" > '' OR "InRuleType" > '' OR "InSystemName" > '' OR "InRuleDescription" > '' OR "InDAMADimension" > '' THEN 
	"lvInd":= 'N';
	
	IF "InQualityRulesId" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."FDADataQualityRulesId"::text = ''',"InQualityRulesId",''' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."FDADataQualityRulesId"::text = ''',"InQualityRulesId",''' ');
		END IF;
	END IF;
	
	IF "InRuleName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleName" ILIKE ''%', "InRuleName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."RuleName" ILIKE ''%',"InRuleName",'%'' ');
		END IF;
	END IF;
	
	IF "InRuleType" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleType" ILIKE ''%',"InRuleType" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND  x."RuleType" ILIKE ''%',"InRuleType", '%'' ');
		END IF;
	END IF;
	
	IF "InRuleDescription" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleDescription" ILIKE ''%',"InRuleDescription" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND  x."RuleDescription" ILIKE ''%',"InRuleDescription", '%'' ');
		END IF;
	END IF;
	
	IF "InSystemName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."SystemName" ILIKE ''%', "InSystemName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."SystemName" ILIKE ''%',"InSystemName",'%'' ');
		END IF;
	END IF;
	
	IF "InDAMADimension" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."DAMADimension" ILIKE ''%', "InDAMADimension" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."DAMADimension" ILIKE ''%',"InDAMADimension",'%'' ');
		END IF;
	END IF;
END IF;

"SelectString1" :=	CONCAT("SelectString","FromString","WhereObjectFieldCondition",')x  ',"WhereConditionString","OrderBystring");
"CountSelectString" := CONCAT('SELECT COUNT(*) "OutTotalRecordCount" FROM (',"SelectString","FromString","WhereObjectFieldCondition",')x ',"WhereConditionString",' )Y;');

RAISE NOTICE 'SelectString : %',"SelectString1";
RAISE NOTICE 'SelectString : %',"CountSelectString";

OPEN $13 FOR --OPEN THE REF CURSOR

	EXECUTE "SelectString1";

RETURN NEXT $13;

OPEN $14 FOR --OPEN THE REF CURSOR

	EXECUTE "CountSelectString";

RETURN NEXT $14;
		
/*
SELECT fda."Proc_ListMaintainDataQuality"(
	'0',--"InOffset" bigint,
	'10',--"InLimit" bigint,
	'',--"InOrderBy" character varying,
	'',--"InOredrByType" character varying,
	'',--"InQualityRulesId" character varying,
	'',--"InRuleName" character varying,
	'',--"InRuleType" character varying,
	'',--"InSystemName" character varying,
	'',--"InRuleDescription" text,
	'performdb.entityrule_ss',--"InObjectName" character varying,
	'',--"InFieldName" character varying,
	'',--"InDAMADimension" character varying,
	'refcursor1',
	'refcursor2');
FETCH ALL IN "refcursor1";
	
	*/

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListEntityAttributeChangeLog"(
	"InSystemName" text,
	"InObjectName" text,
	"InFieldName" text,
	"InFieldDataType" text,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "SelectString" TEXT;
        "SelectString1" TEXT;
        "WhereConditionString" TEXT;
		"SelectString2" TEXT;
		"OrderByString" TEXT;
		"lvInd" CHARACTER VARYING(1);

BEGIN

"SelectString" := '	SELECT 
					b."ObjectName",
					a."SystemAliasName" AS "SystemName",
					c."FieldName",
					c."FieldDataType",
					c."ColumnPrecision",
					c."CharacterMaximumLength",
					c."PrimaryKey",
					c."ForeignKey",
					COALESCE(c."CreatedBy",'''') "CreatedBy",
					COALESCE(LEFT(c."CreationDate",10),'''') AS "CreatedDate",
					c."LastSyncedBy" AS "LastUpdatedBy",
					COALESCE(LEFT(c."LastUpdatedOn"::text,10),'''') AS "LastUpdatedDate",
					COALESCE("LastDeletedBy",'''') AS "DeletedBy",
					COALESCE(LEFT("LastDeletedOn",10),'''') AS "DeletedOn",
					--c."ObsoleteInMetaDataInd"
					(CASE 
						WHEN c."ObsoleteInMetaDataInd" = ''UPDATED'' AND (c."LastUpdatedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
							THEN ''BlueStar''
						WHEN c."ObsoleteInMetaDataInd" = ''DELETED'' AND (c."LastDeletedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
							THEN ''RedStar''
					ELSE ''''
					END) AS "FieldStatusInd",
					(CASE 
						WHEN c."ObsoleteInMetaDataInd" = ''DELETED'' AND (c."LastDeletedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
							THEN ''c''
						WHEN c."ObsoleteInMetaDataInd" = ''UPDATED'' AND (c."LastUpdatedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
							THEN ''b''
					ELSE ''a''
					END) AS "OrderByField"
			FROM fda."FDASystems" a
			INNER JOIN fda."FDASystemObjects" b 
			ON a."FDASystemsId" = b."FDASystemsId"
			INNER JOIN fda."FDASystemObjectFields" c 
			ON b."FDASystemObjectsId" = c."FDASystemObjectsId" ';
			
			
"OrderByString" := 'ORDER BY "OrderByField"';

		
IF "InSystemName" > '' OR "InObjectName" > '' OR "InFieldName" > '' OR "InFieldDataType" > '' THEN
"lvInd" := 'N';

	IF "InSystemName" > '' THEN 
			IF "lvInd" = 'N' THEN 
				"WhereConditionString" :=CONCAT("WhereConditionString",' WHERE a."SystemAliasName" ILIKE ''',"InSystemName",''' ');
				"lvInd" := 'Y';
			ELSE	
				"WhereConditionString" :=CONCAT("WhereConditionString",'AND a."SystemAliasName" ILIKE ''',"InSystemName",''' ');
				"lvInd" := 'Y';
			END IF;
	END IF;
	
	IF "InObjectName" > '' THEN 
			IF "lvInd" = 'N' THEN 
				"WhereConditionString" :=CONCAT("WhereConditionString",' WHERE b."ObjectName" ILIKE ''',"InObjectName",''' ');
				"lvInd" := 'Y';
			ELSE	
				"WhereConditionString" :=CONCAT("WhereConditionString",'AND b."ObjectName" ILIKE ''',"InObjectName",''' ');
				"lvInd" := 'Y';
			END IF;
	END IF; 
	
	IF "InFieldName" > '' THEN 
			IF "lvInd" = 'N' THEN 
				"WhereConditionString" :=CONCAT("WhereConditionString",' WHERE c."FieldName" ILIKE ''%',"InFieldName",'%'' ');
				"lvInd" := 'Y';
			ELSE	
				"WhereConditionString" :=CONCAT("WhereConditionString",'AND c."FieldName" ILIKE ''%',"InFieldName",'%'' ');
				"lvInd" := 'Y';
			END IF;
	END IF; 
	
	IF "InFieldDataType" > '' THEN 
			IF "lvInd" = 'N' THEN 
				"WhereConditionString" :=CONCAT("WhereConditionString",' WHERE c."FieldDataType" ILIKE ''%',"InFieldDataType",'%'' ');
				"lvInd" := 'Y';
			ELSE	
				"WhereConditionString" :=CONCAT("WhereConditionString",'AND c."FieldDataType" ILIKE ''%',"InFieldDataType",'%'' ');
				"lvInd" := 'Y';
			END IF;
	END IF; 
END IF;

"SelectString1" :=	CONCAT("SelectString",' ',"WhereConditionString",' ',"OrderByString");

"SelectString2" :=	CONCAT( 'SELECT COUNT(*) AS "NumberOfFields", COUNT(CASE WHEN "PrimaryKey" = ''true'' OR "ForeignKey" = ''true'' THEN 1 END) AS "NumberOfKeys"
							FROM(',"SelectString1",')x ');
							
RAISE NOTICE 'SelectString : %',"SelectString1";
RAISE NOTICE 'SelectCoutString : %',"SelectString2";							

OPEN $5 FOR 
	EXECUTE "SelectString1";
RETURN NEXT $5;

OPEN $6 FOR 
	EXECUTE "SelectString2";
RETURN NEXT $6;
/*
SELECT fda."Proc_ListEntityAttributeChangeLog"(
	'SANDBOX1',--"InSystemName" text,
	'DBO.ICICI_BANK_TRANSACTION',--"InObjectName" text,
	'',--"InFieldName" text,
	'',--"InFieldDataType" text,
	'refcursor',
	'refcursor2');
FETCH ALL IN "refcursor";
*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION erd."Proc_ListERDObjectLogDetails"(
	"InERDId" character varying,
	"InObjectId" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "SelectString" TEXT;
        "SelectString1" TEXT;
        "WhereConditionString" TEXT;
		"OrderByString" TEXT;
		"SelectString2" TEXT;
BEGIN

 "SelectString" := 'SELECT a."ERDiagramId",
						   a."ERDSystemObjectsId",
						   CONCAT(a."SchemaName",''.'',a."ObjectName") AS "ERDObjectName",
						   b."ERDSystemObjectFieldsId",
						   b."FieldName",
						   b."FieldDataType",
						   b."ColumnPrecision",
						   b."CharacterMaximumLength",
						   b."PrimaryKey",
						   b."ForeignKey",
						   COALESCE(b."CreatedBy",'''') "CreatedBy",
						   COALESCE(LEFT(b."CreationDate"::text,10),'''') "CreatedDate",
						   COALESCE(b."LastUpdatedBy",'''') AS "LastUpdatedBy",
						   COALESCE(LEFT(b."LastUpdatedDate"::text,10),'''') "LastUpdatedDate",
						   COALESCE(b."LastDeletedBy",'''') "DeletedBy",
						   COALESCE(LEFT(b."LastDeletedOn",10),'''') "DeletedOn" ,
						   b."MetaDataInd" AS "FieldActionInd",
						   (CASE
           						WHEN UPPER(b."MetaDataInd") = ''UPDATED'' AND (b."LastUpdatedDate"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
									THEN ''BlueStar''
           						WHEN UPPER(b."MetaDataInd") = ''DELETED'' AND (b."LastDeletedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
									THEN ''RedStar''
							ELSE ''''
							END) AS "FieldStatusInd",
						   (CASE 
								WHEN b."MetaDataInd" = ''DELETED'' AND (b."LastDeletedOn"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
									THEN ''c''
								WHEN b."MetaDataInd" = ''UPDATED'' AND (b."LastUpdatedDate"::date BETWEEN CURRENT_DATE - INTERVAL ''6 days'' AND CURRENT_DATE)
									THEN ''b''
							ELSE ''a''
							END) AS "OrderByField"
					FROM erd."ERDSystemObjects" a
					INNER JOIN erd."ERDSystemObjectFields" b
						ON a."ERDSystemObjectsId" = b."ERDSystemObjectsId"';

"WhereConditionString" := CONCAT('WHERE a."ERDiagramId" = ',"InERDId"::bigint);

"OrderByString" := 'ORDER BY "OrderByField"';

IF "InObjectId" > '' THEN 
		"WhereConditionString" := CONCAT("WhereConditionString",' AND a."ERDSystemObjectsId" = ''',"InObjectId"::bigint,''' ');
		RAISE NOTICE 'i am in InRuleID block';
END IF;

"SelectString1" :=	CONCAT("SelectString",' ',"WhereConditionString",' ',"OrderByString");

"SelectString2" :=	CONCAT( 'select COUNT(*) AS "NumberOfFields", COUNT(CASE WHEN "PrimaryKey" = ''true'' OR "ForeignKey" = ''true'' THEN 1 END) AS "NumberOfKeys", 0 AS "NumberOfArrays"
							FROM(',"SelectString1",')x ');

OPEN $3 FOR 
	EXECUTE "SelectString1";
RETURN NEXT $3;

OPEN $4 FOR 
	EXECUTE "SelectString2";
RETURN NEXT $4;

/*
SELECT erd."Proc_ListERDObjectLogDetails"
      (
       '36', --"InERDId", 
	   '',--"InObjectId",
	   'refcursor1',
	   'refcursor2'
	  );
FETCH ALL IN "refcursor1";
*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_SaveSystemEntityAttributeDataTypeInfo"(
	"InUserName" character varying,
	"InSystemName" character varying,
	"InTabInd" character varying,
	"InData" text)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE "ITEM_CURSOR" CURSOR FOR SELECT "VALUE"
		FROM UNNEST(STRING_TO_ARRAY("InData" ,'|')) "VALUE"
		WHERE "VALUE" IS NOT NULL;
		
DECLARE "lvData" TEXT;
DECLARE "lvFDASystemId" BIGINT;
DECLARE "lvFDASystemObjectId" BIGINT;
DECLARE "lvFDASystemObjectFieldId" BIGINT;
--DECLARE	"lvMetaDataStatusInd1" TEXT;
--DECLARE	"lvMetaDataStatusInd2" TEXT;

BEGIN

SELECT "FDASystemsId"
INTO "lvFDASystemId" 
FROM fda."FDASystems" 
WHERE "SystemAliasName" = "InSystemName";

FOR row IN "ITEM_CURSOR" LOOP

	"lvData" = REPLACE(CAST(row AS TEXT),'(','');
	"lvData" = REPLACE("lvData",')','');
	"lvData" = REPLACE("lvData",'"','');

	INSERT INTO fda."FDASystemObjects"
				(
					"FDASystemsId",
					"ObjectName",
					"ObjectType",
					"ObsoleteInMetaDataInd",
					"LastSyncUpDate"
				)
	SELECT "FDASystemsId",
		"ObjectName",
		'DATA',
		'NEW',
		CURRENT_DATE
	FROM
		(
			SELECT "lvFDASystemId" "FDASystemsId",
					"ObjectName"
			FROM 
				(SELECT SPLIT_PART("lvData",'^',1) "ObjectName") X  
			EXCEPT
			SELECT "FDASystemsId","ObjectName"
			FROM fda."FDASystemObjects"
		) Y;
	
	--Get Entity Id
	SELECT "FDASystemObjectsId" 
		INTO "lvFDASystemObjectId"
	FROM fda."FDASystemObjects"
	WHERE "FDASystemsId" = "lvFDASystemId"
		AND "ObjectName" = SPLIT_PART("lvData",'^',1);  --EntityName 

	IF UPPER("InTabInd") = 'ATTRIBUTE' THEN  
	
	--update Entity User Friendly Name
	IF 	SPLIT_PART("lvData",'^',8) > ''
	THEN	
		UPDATE fda."FDASystemObjects"
		SET "UserFriendlyObjectName" = SPLIT_PART("lvData",'^',8)     --UserFriendlyEntityName
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "lvFDASystemObjectId";
	END IF;
		
		--Get Field Id If Already Stored
		
		SELECT "FDASystemObjectFieldsId"
			INTO "lvFDASystemObjectFieldId"
		FROM fda."FDASystemObjectFields"
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "lvFDASystemObjectId"
			AND UPPER("FieldName") = UPPER(SPLIT_PART("lvData",'^',2))
			AND UPPER("FieldDataType") = UPPER(SPLIT_PART("lvData",'^',3)) ;
			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*		SELECT CONCAT(SPLIT_PART("lvData",'^',3),NULLIF(SPLIT_PART("lvData",'^',4),''))
	--CONCAT(SPLIT_PART("lvData",'^',3),NULLIF(SPLIT_PART("lvData",'^',4),''),SPLIT_PART("lvData",'^',5),SPLIT_PART("lvData",'^',6),SPLIT_PART("lvData",'^',7))	 
		INTO "lvMetaDataStatusInd1";
		
		SELECT CONCAT("FieldDataType","UserOverwriteDatatype")
	--CONCAT("FieldDataType","UserOverwriteDatatype","IsNullPossible","CharacterMaximumLength","ColumnPrecision")
			INTO "lvMetaDataStatusInd2"
		FROM fda."FDASystemObjectFields"	
		WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "lvFDASystemObjectId"
			AND "FDASystemObjectFieldsId" = "lvFDASystemObjectFieldId";
		
		RAISE NOTICE 'lvMetaDataStatusIndDB1: %',"lvMetaDataStatusInd1";
		RAISE NOTICE 'lvMetaDataStatusIndDB2: %',"lvMetaDataStatusInd2";
*/
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		IF COALESCE("lvFDASystemObjectFieldId",0) > 0 THEN  --If Field Id Found

			UPDATE fda."FDASystemObjectFields"
			SET "FieldName" =  SPLIT_PART("lvData",'^',2),
				"FieldDataType" =  SPLIT_PART("lvData",'^',3),
				"UserOverwriteDatatype" = NULLIF(SPLIT_PART("lvData",'^',4),''),
				"IsNullPossible" =  SPLIT_PART("lvData",'^',5),
				"CharacterMaximumLength" =  SPLIT_PART("lvData",'^',6),
				"ColumnPrecision" = SPLIT_PART("lvData",'^',7),
				"UserFriendlyFieldName" =  SPLIT_PART("lvData",'^',9),
				"Comment" =  SPLIT_PART("lvData",'^',10),
				"IsSecured" =  SPLIT_PART("lvData",'^',11),
				"IsGDPRRelevant" =  SPLIT_PART("lvData",'^',12),
				"Owner" =  NULLIF(SPLIT_PART("lvData",'^',13),''),
				"AutoMetricsInd" = SPLIT_PART("lvData",'^',14),
				"SegmentedBy" = SPLIT_PART("lvData",'^',15),
				"MasterRuleName" = SPLIT_PART("lvData",'^',16),
				"MasterRuleId" = NULLIF(SPLIT_PART("lvData",'^',17),'')::bigint
				/*"ObsoleteInMetaDataInd" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN 'UPDATED'  
													ELSE(CASE WHEN "ObsoleteInMetaDataInd" = 'DELETED' THEN 'NEW'
															ELSE "ObsoleteInMetaDataInd" 
														END)
											END),
				"LastUpdatedOn" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN CURRENT_DATE 
											ELSE(CASE WHEN "ObsoleteInMetaDataInd" = 'DELETED' THEN CURRENT_DATE
														ELSE "LastUpdatedOn" 
													END) 			
									END),
				"LastSyncedBy" = 	(CASE WHEN "lvMetaDataStatusInd1" <> "lvMetaDataStatusInd2" THEN "InUserName" 
											ELSE(CASE WHEN "ObsoleteInMetaDataInd" = 'DELETED' THEN "InUserName"
													ELSE "LastSyncedBy" 
												END) 
									END)*/
				
			WHERE "FDASystemsId" = "lvFDASystemId"
				AND "FDASystemObjectsId" = "lvFDASystemObjectId"
				AND "FDASystemObjectFieldsId" = "lvFDASystemObjectFieldId";

		-------------------------------------------------------------------------  
		ELSE  --IF No Field Id Found

			INSERT INTO  fda."FDASystemObjectFields"
			(
				"FDASystemsId",
				"FDASystemObjectsId",
				"ObsoleteInMetaDataInd",
				"FieldName",
				"FieldDataType",
				"UserOverwriteDatatype",
				"IsNullPossible",
				"CharacterMaximumLength",
				"ColumnPrecision",				
				"UserFriendlyFieldName",
				"Comment",
				"IsSecured",
				"IsGDPRRelevant",
				"Owner",
				"AutoMetricsInd",
				"SegmentedBy",
				"MasterRuleName",
				"MasterRuleId",
				"LastUpdatedOn",
				"LastSyncedBy"
			)
			VALUES
			(
				"lvFDASystemId",                --FDASystemsId
				"lvFDASystemObjectId",   		--FDASystemObjectsId
				'NEW',                          --ObsoleteInMetaDataInd
				SPLIT_PART("lvData",'^',2),     --FieldName
				SPLIT_PART("lvData",'^',3),     --FieldDataType
				NULLIF(SPLIT_PART("lvData",'^',4),''),     --UserOverwriteDatatype 
				SPLIT_PART("lvData",'^',5),    	--IsNullPossible 
				SPLIT_PART("lvData",'^',6),    	--CharacterMaximumLength 
				SPLIT_PART("lvData",'^',7),    	--ColumnPrecision 
				SPLIT_PART("lvData",'^',9),    	--UserFriendlyFieldName 
				SPLIT_PART("lvData",'^',10),    --Comment 
				SPLIT_PART("lvData",'^',11),   	--IsSecured 
				SPLIT_PART("lvData",'^',12),    --IsGDPRRelevant
				NULLIF(SPLIT_PART("lvData",'^',13),''),    --Owner
				SPLIT_PART("lvData",'^',14),    --AutoMetricsInd
				SPLIT_PART("lvData",'^',15) ,    --SegmentedBy
				SPLIT_PART("lvData",'^',16),	--MasterRuleName
				NULLIF(SPLIT_PART("lvData",'^',17),'')::int,	--MasterRuleId
               	CURRENT_TIMESTAMP ,             --LastUpdatedOn
				"InUserName"
			);
	
		END IF;
	ELSE IF UPPER("InTabInd") = 'ENTITY' THEN
	
		IF COALESCE("lvFDASystemObjectId",0) > 0 THEN  --If Enity Id Found
		
			UPDATE fda."FDASystemObjects"
			SET "ObjectName" =  SPLIT_PART("lvData",'^',1),
				"AutoMetricsInd" =  CASE WHEN SPLIT_PART("lvData",'^',2) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',2) END,
				"SegmentedBy" =  SPLIT_PART("lvData",'^',3),
				"RefreshFrequency" = NULLIF(SPLIT_PART("lvData",'^',4),''),
				"RefreshTime"  = CAST(NULLIF(SPLIT_PART("lvData",'^',5),'') AS TIME),
				"Owner" = NULLIF(SPLIT_PART("lvData",'^',6),''),
				"BasicScoreInd" = CASE WHEN SPLIT_PART("lvData",'^',7) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',7) END,
				"AdvanceScoreInd" = CASE WHEN SPLIT_PART("lvData",'^',8) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',8) END,
				"ObjectGroup" = NULLIF(SPLIT_PART("lvData",'^',9),''),
				"Comment" = NULLIF(SPLIT_PART("lvData",'^',10),''),
				"ObsoleteInMetaDataInd" = 'UPDATED',
				"LastUpdatedDate" = CURRENT_TIMESTAMP,
				"LastUpdatedBy" = "InUserName"
			WHERE "FDASystemsId" = "lvFDASystemId"
			AND "FDASystemObjectsId" = "lvFDASystemObjectId";
		
		ELSE
		
			INSERT INTO  fda."FDASystemObjects"
			(
				"FDASystemsId",
				"ObjectType", 
				"ObjectName", 
				"AutoMetricsInd",
				"SegmentedBy",
				"RefreshFrequency",
				"RefreshTime",
				"Owner",
				"BasicScoreInd",
				"AdvanceScoreInd",
				"ObjectGroup",
				"Comment",
				"ObsoleteInMetaDataInd",
				"LastUpdatedDate"
			)
			VALUES
			(
				"lvFDASystemId",                --FDASystemsId
				'DATA',                         --ObjectType
				SPLIT_PART("lvData",'^',1),     --EntityName
				CASE WHEN SPLIT_PART("lvData",'^',2) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',2) END,     --AutoMetricsInd
				SPLIT_PART("lvData",'^',3),     --SegmentedBy
				NULLIF(SPLIT_PART("lvData",'^',4),''),    --RefreshFrequency
				CAST(NULLIF(SPLIT_PART("lvData",'^',5),'') AS TIME), --RefreshBy
				NULLIF(SPLIT_PART("lvData",'^',6),''),     --Owner
				CASE WHEN SPLIT_PART("lvData",'^',7) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',7) END,   --BasicScoreInd
				CASE WHEN SPLIT_PART("lvData",'^',8) IN ('','false') THEN NULL ELSE SPLIT_PART("lvData",'^',8) END,  --AdvanceScoreInd
				NULLIF(SPLIT_PART("lvData",'^',9),''), --ObjectGroup
				NULLIF(SPLIT_PART("lvData",'^',10),''), --"Comment"
				'NEW',   --ObsoleteInMetaDataInd
				CURRENT_TIMESTAMP   --LastUpdatedDate
			);
		
		END IF;
		
		IF SPLIT_PART("lvData",'^',3) > '' THEN
		
			UPDATE fda."FDASystemObjectFields"
			SET "SegmentedBy" = SPLIT_PART("lvData",'^',3)
			WHERE "FDASystemObjectsId" = "lvFDASystemObjectId"
			AND "FieldDataType" NOT IN ('VARCHAR','DATE','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING','VARCHAR2');
		
		END IF;
	
	END IF;
	END IF;

END LOOP;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListFieldOutlierCheckRules"(
	"InFieldId" bigint,
	"InSegmentedRuleInd" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

declare "lvFieldName" text;

BEGIN

SELECT 	b."FieldName"
INTO "lvFieldName"
FROM fda."FDADataQualityMasterRulesDetails" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDADataQualityRulesId" = b."MasterRuleId"
INNER JOIN fda."FDASystems" c
	ON b."FDASystemsId" =c."FDASystemsId" 
INNER JOIN fda."FDASystemObjects" d
	ON b."FDASystemObjectsId" = d."FDASystemObjectsId"
	AND c."FDASystemsId" = d."FDASystemsId"
WHERE b."FDASystemObjectFieldsId" = "InFieldId";
	
OPEN $3 FOR --OPEN THE REF CURSOR
	SELECT DISTINCT
		d."ObjectName",
		c."SystemName",
		c."SystemAliasName",
		c."SystemPassword",
		c."ConnectionDetails",
		c."SystemUserName",
		c."Schema",
		c."RoleName",
		c."Warehouse",
		c."Region",
		c."S3BucketLocation",
		c."PortNumber",
		c."AccessKeyID",
		c."SecretAccessKey",
		c."ClientEmail",
		c."PrivateKey",
		c."ProjectId",
		c."PassPhrase",
		COALESCE(a."SegmentedByFieldName",'') "SegmentedByFieldName",
		COALESCE(a."SegmentedByFieldValue",'') "SegmentedByFieldValue",
		a."RuleType" AS "RuleName", 
		b."FieldName",
		COALESCE(NULLIF(a."LeftFieldValue",'null'),'') AS "LeftFieldValue", 
		COALESCE(NULLIF(a."RightFieldValue",'null'),'')  AS "RightFieldValue",
		(CASE WHEN a."RuleType" = 'Range of Values'  THEN COALESCE(NULLIF(a."UpperThreshold",'null'),'') END) AS "HighestPossibleValue",
		(CASE WHEN a."RuleType" = 'Range of Values'  THEN COALESCE(NULLIF(a."LowerThreshold",'null'),'') END) AS "LowestPossibleValue",
		--REPLACE(COALESCE(NULLIF(a."RightFieldValue",'null'),''),',','~^~') "RightFieldValue",
        UPPER(c."SystemType") "SystemType",
        (CASE WHEN b."FieldDataType" IN ('VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') AND COALESCE(b."UserOverwriteDatatype",'STRING')= 'STRING'THEN  'STRING'
              WHEN b."FieldDataType" IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL') AND COALESCE(b."UserOverwriteDatatype",'NUMBER')= 'NUMBER'THEN  'NUMBER'
              WHEN b."FieldDataType" IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2') 
					AND COALESCE(b."UserOverwriteDatatype",'DATE')= 'DATE'  THEN  'DATE'
			ELSE b."UserOverwriteDatatype" 
		END) "FieldDataType"
          --b."UserOverwriteDatatype"
    FROM fda."FDADataQualityMasterRulesDetails" a
	INNER JOIN fda."FDASystemObjectFields" b
		ON a."FDADataQualityRulesId" = b."MasterRuleId"
	INNER JOIN fda."FDASystems" c
	
		ON b."FDASystemsId" =c."FDASystemsId" 
	INNER JOIN fda."FDASystemObjects" d
		ON b."FDASystemObjectsId" = d."FDASystemObjectsId"
		AND c."FDASystemsId" = d."FDASystemsId"
    WHERE b."FDASystemObjectFieldsId" = "InFieldId";

---PERFORM fda."Proc_ErrorTracking"('Proc_ListFieldOutlierCheckRules','lvFieldName'||'-'||coalesce("lvFieldName",'NULL'),"lvFieldName",'Mohan');
	
RETURN NEXT $3;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListFDAObjectScoreTrend"(
	"InOffSet" bigint,
	"InLimit" bigint,
	"InOrderByColumn" character varying,
	"InOrderBy" character varying,
	"InObjectId" character varying,
	"InObjectScoreId" character varying,
	"InObjectName" character varying,
	"InRowCount" character varying,
	"InAvgNullCount" character varying,
	"InNullCountPercent" character varying,
	"InAvgDistinctCount" character varying,
	"InDistinctCountPercent" character varying,
	"InLastUpdatedOn" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "OutTotalRecordCount" BIGINT;
DECLARE "SelectString" TEXT;
        "FromString" TEXT;
        "WhereConditionString" TEXT;
		"SelectString2" TEXT;
		"SelectCountString" TEXT;
		"TotalRowCount" BIGINT;
		"lvInd1" VARCHAR(5)='N';
		"OrderByString" TEXT;
		"lvLatestObjectScoreId" BIGINT;
		
		"lvRuleType" TEXT;
		"lvGreyDate" TEXT;
		"lvRuleCount" int;
		"lvCounter" int;
		"RuleName" text;
		"RuleData" text;
		
		"SelectStringAdv" TEXT;
		"lvPYRules" TEXT;
BEGIN

"InRowCount" := LOWER("InRowCount");
"InAvgNullCount" := LOWER("InAvgNullCount");
"InNullCountPercent" := LOWER("InNullCountPercent");
"InAvgDistinctCount" := LOWER("InAvgDistinctCount");
"InDistinctCountPercent" := LOWER("InDistinctCountPercent");
"InLastUpdatedOn" := LOWER("InLastUpdatedOn");

"RuleData" := '';
"lvCounter" := 1;
-----------------TAKING MIN DATE FOR GREY CELL COLOR------------------------------
SELECT 
	MIN(SUBSTRING("CreatedOn",0,11))
INTO "lvGreyDate"
FROM(SELECT 
	(CASE WHEN "RuleType" IN ('Enumerated Value','Date Range','Length Check') AND ("LeftFieldValue" > '' AND "RightFieldValue" > '') THEN
			(CASE WHEN "RuleType" = 'Date Range' THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" = 'Length Check'  THEN 'Date'||' '||"RuleType" 
			 ELSE "RuleType" END)
		WHEN "RuleType" IN ('DataType Check','Blank/NonBlank','Permitted Value','Null Check','Forbidden Value','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' THEN 
			(CASE WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Zip Code','Email') THEN "LeftFieldValue" ||' '||"RuleType" 
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Number') THEN 'Numeric DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Integer') THEN 'DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" NOT IN ('Zip Code','Email','Valid Number') THEN 'Date'||' '||"RuleType"  
			 	WHEN "RuleType" IN ('Enumerated Value(Query)','Distinct Check','Permitted Value') THEN 'Date'||' '||"RuleType"
			 	ELSE  "RuleType" END )
		WHEN "RuleType" IN ('Possible Character','Range of Values') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
			THEN "RuleType"
	 END)"RuleType" ,
	 c."CreatedOn"
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	AND a."FDASystemsId" = b."FDASystemsId"
INNER JOIN fda."FDADataQualityMasterRulesDetails" c
	ON b."MasterRuleId" = c."FDADataQualityRulesId"
WHERE a."FDASystemObjectsId" = "InObjectId" :: BIGINT
AND b."AutoMetricsInd" = 'true')b
WHERE "RuleType" IS NOT NULL;

SELECT 
	STRING_AGG("RuleType",',')
INTO "lvPYRules"
FROM(SELECT DISTINCT
	(CASE WHEN "RuleType" IN ('Enumerated Value','Date Range','Length Check') AND ("LeftFieldValue" > '' AND "RightFieldValue" > '') THEN
			(CASE WHEN "RuleType" = 'Date Range' THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" = 'Length Check'  THEN 'Date'||' '||"RuleType" 
			 ELSE "RuleType" END)
		WHEN "RuleType" IN ('DataType Check','Blank/NonBlank','Permitted Value','Forbidden Value','Null Check','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' THEN 
			(CASE WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Zip Code','Email') THEN "LeftFieldValue" ||' '||"RuleType" 
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Number') THEN 'Numeric DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Integer') THEN 'DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" NOT IN ('Zip Code','Email','Valid Number') THEN 'Date'||' '||"RuleType"  
			 	WHEN "RuleType" IN ('Enumerated Value(Query)','Distinct Check','Permitted Value') THEN 'Date'||' '||"RuleType"
			 	ELSE  "RuleType" END )
		WHEN "RuleType" IN ('Possible Character','Range of Values') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
			THEN "RuleType"
	 END)"RuleType" 
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	AND a."FDASystemsId" = b."FDASystemsId"
INNER JOIN fda."FDADataQualityMasterRulesDetails" c
	ON b."MasterRuleId" = c."FDADataQualityRulesId"
WHERE a."FDASystemObjectsId" = "InObjectId":: BIGINT
AND b."AutoMetricsInd" = 'true'
)x
WHERE "RuleType" IS NOT NULL ;

--------------------------------DYNAMIC RULE FORMING------------------------------
SELECT 
	STRING_AGG("RuleType",',') AS "RuleType",
	COUNT("RuleType")
INTO "lvRuleType","lvRuleCount"
FROM (SELECT 
	"RuleType"
FROM(SELECT DISTINCT
	(CASE WHEN "RuleType" IN ('Enumerated Value','Date Range','Length Check') AND ("LeftFieldValue" > '' AND "RightFieldValue" > '') THEN
			(CASE WHEN "RuleType" = 'Date Range' THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" = 'Length Check'  THEN 'Date'||' '||"RuleType" 
			 ELSE "RuleType" END)
		WHEN "RuleType" IN ('DataType Check','Blank/NonBlank','Permitted Value','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' THEN 
			(CASE WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Zip Code','Email') THEN "LeftFieldValue" ||' '||"RuleType" 
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Number') THEN 'Numeric DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Integer') THEN 'DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" NOT IN ('Zip Code','Email','Valid Number') THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" IN ('Enumerated Value(Query)','Distinct Check','Permitted Value') THEN 'Date'||' '||"RuleType"
			 	ELSE  "RuleType" END )
		WHEN "RuleType" IN ('Possible Character','Range of Values') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
			THEN "RuleType"
	 END)"RuleType" 
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	AND a."FDASystemsId" = b."FDASystemsId"
INNER JOIN fda."FDADataQualityMasterRulesDetails" c
	ON b."MasterRuleId" = c."FDADataQualityRulesId"
WHERE a."FDASystemObjectsId" = "InObjectId":: BIGINT
AND b."AutoMetricsInd" = 'true'
)x
--WHERE x."RuleType" IS NOT NULL
UNION
SELECT 
	a."RuleName" AS "RuleType"
FROM fda."FDAObjectScoreOutlierCountByCategory" a
INNER JOIN(SELECT 
	"FDAObjectScoreValueId"
FROM fda."FDAObjectsScoreValue" a
INNER JOIN fda."FDASystemObjects" b
ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
WHERE a."FDAObjectScoreValueId" <= "InObjectScoreId" :: BIGINT
AND a."FDASystemObjectsId" = "InObjectId" :: BIGINT
ORDER BY a."CreatedDateTime" DESC 
limit 15)b
ON a."FDAObjectScoreId" = b."FDAObjectScoreValueId"
)x
WHERE "RuleType" IS NOT NULL ;

--raise notice 'Value: % ',"V_lvQuerySelect";
RAISE NOTICE 'OUT SIDE_LOOP: % ',"lvRuleCount";
RAISE NOTICE 'OUT SIDE_LOOP: % ',"lvRuleType";

IF (SELECT "AdvanceScoreInd" FROM  fda."FDASystemObjects" WHERE "FDASystemObjectsId" = "InObjectId" :: INT) = 'true' THEN 

"SelectStringAdv" := CONCAT(' TO_CHAR(COALESCE(a."AvgNullCount",0),''fm999G999G999G999G999'') "AvgNullCount",
	   COALESCE(a."AvgNullCountOutlierInd",''N'') "NullCountOutlierInd",
	   
	   (CASE WHEN COALESCE(CAST(a."NullCountPercent" AS DECIMAL(18,2)),0.0) > 0 THEN 
		TO_CHAR(COALESCE(CAST(a."NullCountPercent" AS DECIMAL(18,2)),0.0),''fm999G999G999G999G999D00'')
		ELSE ''0.0'' END) "NullCountPercent",
	   
	   COALESCE(a."NullCountPercentOutlierInd",''N'') "NullCountPercentOutlierInd",
	   TO_CHAR(COALESCE(a."AvgDistinctCount",0),''fm999G999G999G999G999'') "AvgDistinctCount",
	   COALESCE(a."AvgDistinctCountOutlierInd",''N'') "DistinctCountOutlierInd",
	   
	   (CASE WHEN COALESCE(CAST(a."DistinctCountPercent" AS DECIMAL(18,2)),0.0) > 0 THEN 
		TO_CHAR(COALESCE(CAST(a."DistinctCountPercent" AS DECIMAL(18,2)),0.0),''fm999G999G999G999G999D00'')
		ELSE ''0.0'' END) "DistinctCountPercent",
	   
	   COALESCE(a."DistinctCountPercentOutlierInd",''N'') "DistinctCountPercentOutlierInd", ');
END IF;

WHILE "lvCounter" <= "lvRuleCount"
LOOP
	RAISE NOTICE 'lvCounter: %',"lvCounter";
	RAISE NOTICE 'lvRuleCount: %',"lvRuleCount";
	RAISE NOTICE 'lvRuleType: % ',SPLIT_PART("lvRuleType",',',"lvCounter");
	
	"RuleName":=CONCAT('fda."fn_OutlierCountByRule"(''',SPLIT_PART("lvRuleType",',',"lvCounter"),''',a."FDAObjectScoreValueId") AS "',(CASE WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Numeric DataType Check' THEN 'NumberOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date DataType Check' THEN 'DateOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Email DataType Check' THEN 'EmailOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Zip Code DataType Check' THEN 'ZipCodeOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Enumerated Value' THEN 'EnumeratedValueOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Permitted Value' THEN 'PermittedValueOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Possible Character' THEN 'PossibleCharacterOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Range of Values' THEN 'ThresholdOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Enumerated Value(Query)' THEN 'EnumeratedQueryOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Blank/NonBlank' THEN 'BlankRowOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Distinct Check' THEN 'DistinctCheckOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Date Range' THEN 'DateRangeOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'User Criteria' THEN 'UserCriteriaOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'DataType Check' THEN 'InvalidIntegerOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Forbidden Value' THEN 'ForbiddenValueOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Null Check' THEN 'NullCheckOutlier'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Length Check' THEN 'LengthCheckOutlier' END),'",
				(CASE WHEN /*SUBSTRING(a."LastUpdatedDateTime" :: TEXT,0,11)::DATE < ''',"lvGreyDate",''' :: DATE AND */ fda."fn_OutlierCountByRule"(''',SPLIT_PART("lvRuleType",',',"lvCounter"),''',a."FDAObjectScoreValueId") > 0  AND (''',SPLIT_PART("lvRuleType",',',"lvCounter"),''') = ANY(STRING_TO_ARRAY(''',"lvPYRules",''','',''))::text = ''false''  THEN ''GREY''
				ELSE fda."fn_OutlierColorByRuletrendInc"(''Object'',''',SPLIT_PART("lvRuleType",',',"lvCounter"),''',a."FDAObjectScoreValueId",''',"InObjectId",''')  END) AS "',(CASE WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Numeric DataType Check' THEN 'NumberOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date DataType Check' THEN 'DateOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Email DataType Check' THEN 'EmailOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Zip Code DataType Check' THEN 'ZipCodeOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Enumerated Value' THEN 'EnumeratedValueOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Permitted Value' THEN 'PermittedValueOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Possible Character' THEN 'PossibleCharacterOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Range of Values' THEN 'ThresholdOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Enumerated Value(Query)' THEN 'EnumeratedQueryOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Blank/NonBlank' THEN 'BlankRowOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Distinct Check' THEN 'DistinctCheckOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Date Range' THEN 'DateRangeOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'User Criteria' THEN 'UserCriteriaOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'DataType Check' THEN 'InvalidIntegerOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Forbidden Value' THEN 'ForbiddenValueOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Null Check' THEN 'NullCheckOutlierColor'
																																			WHEN SPLIT_PART("lvRuleType",',',"lvCounter") = 'Date Length Check' THEN 'LengthCheckOutlierColor' END),'"') ;
	IF "lvCounter" < "lvRuleCount" 
	THEN 
		RAISE NOTICE 'FROM IF: %',"lvCounter";
		
		"RuleName":= "RuleName"||',';
	
	END IF;
	"RuleData" := "RuleData" || "RuleName";
	---"RuleName":= "RuleName"||',';
	"lvCounter" := "lvCounter"+1;
RAISE NOTICE 'IN_LOOP: %',"RuleName";
									
END LOOP;

"RuleData" :=(SELECT (CASE WHEN LENGTH("RuleData") > 0 THEN ','||"RuleData"
					 ELSE '' END));
RAISE NOTICE 'RuleData: %',"RuleData";

"SelectString2" := CASE WHEN "InOrderByColumn" > '' AND "InOrderBy" > '' THEN
CONCAT(' 
ORDER BY x."',"InOrderByColumn",'" ',"InOrderBy",'
OFFSET ',"InOffSet",' ROWS
FETCH NEXT ',"InLimit",' ROWS ONLY;')
ELSE CONCAT(' 
OFFSET ',"InOffSet",' ROWS
FETCH NEXT ',"InLimit",' ROWS ONLY;')
END;

IF "InObjectId" > '' THEN
"SelectString" := CONCAT('SELECT *
				FROM (
SELECT a."FDAObjectScoreValueId",
       a."FDASystemObjectsId",
	   CONCAT(COALESCE("Freshness",''0''),'' Days old'') as "Freshness",
	   (CASE
           WHEN  COALESCE(b."RefreshFrequency",''Daily Exclude Weekend'')= ''Daily'' AND  COALESCE(CAST("Freshness" AS INT),''0'') > ''1'' THEN  ''RED''
		   WHEN  COALESCE(b."RefreshFrequency",''Daily Exclude Weekend'')= ''Weekly'' AND  COALESCE(CAST("Freshness" AS INT),''0'') > ''7'' THEN ''RED''
		   WHEN  COALESCE(b."RefreshFrequency",''Daily Exclude Weekend'')= ''Monthly'' AND  COALESCE(CAST("Freshness" AS INT),''0'') > ''30'' THEN ''RED''
		   WHEN  COALESCE(b."RefreshFrequency",''Daily Exclude Weekend'')= ''Daily Exclude Weekend'' AND  COALESCE(CAST("Freshness" AS INT),''0'') > ''1'' THEN  ''RED''
			ELSE ''GREEN''
       END) AS "FreshnessColor",
	   
	   (CASE
          WHEN fda."fn_UpdateObjectSyncUpScore"(a."FDASystemObjectsId",a."FDAObjectScoreValueId") > 0 THEN 
			fda."fn_UpdateObjectSyncUpScore"(a."FDASystemObjectsId",a."FDAObjectScoreValueId")
			ELSE 3
		END) AS "ObjectScore",
		
		fda."fn_OutlierColorByRuletrendInc"(''SCORE'','''',a."FDAObjectScoreValueId",a."FDASystemObjectsId") AS "ObjectScoreColor",
	   	

	   TO_CHAR(COALESCE(a."RowCount",0), ''fm999G999G999G999G999'') "RowCount",
	   COALESCE(a."RowCountOutlierInd",''N'') "RowCountOutlierInd",
	   ',"SelectStringAdv",'
	   
	   /*TO_CHAR(COALESCE(a."AvgNullCount",0),''fm999G999G999G999G999'') "AvgNullCount",
	   COALESCE(a."AvgNullCountOutlierInd",''N'') "NullCountOutlierInd",
	   
	   (CASE WHEN COALESCE(CAST(a."NullCountPercent" AS DECIMAL(18,2)),0.0) > 0 THEN 
		TO_CHAR(COALESCE(CAST(a."NullCountPercent" AS DECIMAL(18,2)),0.0),''fm999G999G999G999G999D00'')
		ELSE ''0.0'' END) "NullCountPercent",
	   
	   COALESCE(a."NullCountPercentOutlierInd",''N'') "NullCountPercentOutlierInd",
	   TO_CHAR(COALESCE(a."AvgDistinctCount",0),''fm999G999G999G999G999'') "AvgDistinctCount",
	   COALESCE(a."AvgDistinctCountOutlierInd",''N'') "DistinctCountOutlierInd",
	   
	   (CASE WHEN COALESCE(CAST(a."DistinctCountPercent" AS DECIMAL(18,2)),0.0) > 0 THEN 
		TO_CHAR(COALESCE(CAST(a."DistinctCountPercent" AS DECIMAL(18,2)),0.0),''fm999G999G999G999G999D00'')
		ELSE ''0.0'' END) "DistinctCountPercent",
	   
	   COALESCE(a."DistinctCountPercentOutlierInd",''N'') "DistinctCountPercentOutlierInd", */
	   
	   
	   to_char(a."CreatedDateTime",''YYYY-MM-DD HH24:MI'') "CreatedDateTime",
	   to_char(a."LastUpdatedDateTime",''yyyy-Mon-dd hh:mm AM '') "LastUpdatedDateTime",
	   TO_CHAR(a."CreatedDateTime",''yyyy-mm-dd hh:mm AM '') "ScoreLoadedOn",
	   TO_CHAR( "LastRefreshedDateTime",''YYYY-MM-DD HH24:MI'') "LastRefreshedDateTime",
	   
	    COALESCE(b."RefreshFrequency",''Daily Exclude Weekend'') "LoadFrequency",
	   COALESCE(b."RefreshTime",''12:00 GMT'') "RefreshSLA",
	   (CASE WHEN TO_CHAR( "LastRefreshedDateTime",''HH24:MI'') > TO_CHAR( b."RefreshTime",''HH24:MI'') THEN ''RED''
			ELSE ''GREEN'' END) "SLAColor",
		fda."fn_OutlierCountByRule"(''NULL'',a."FDAObjectScoreValueId") AS "AutoOutlier",
	   (CASE WHEN fda."fn_OutlierCountByRule"(''NULL'',a."FDAObjectScoreValueId") > 0 THEN  ''RED'' 
				ELSE ''GREEN'' END ) AS "AutoOutlierColor",
				COALESCE(a."ChecksumAggValue",''0'') "ChecksumValue"
		',"RuleData",'
	   
	   ');
	   
"FromString" := '
FROM fda."FDAObjectsScoreValue" a
INNER JOIN fda."FDASystemObjects" b
ON a."FDASystemObjectsId" = b."FDASystemObjectsId" ';

END IF;

IF "InObjectId" > '' OR "InObjectScoreId" > '' OR "InRowCount" > '' OR "InAvgNullCount" > '' 
OR "InNullCountPercent" > '' OR "InAvgDistinctCount" > '' OR "InDistinctCountPercent" > '' OR "InLastUpdatedOn" > ''

THEN
	"WhereConditionString" := CONCAT('WHERE a."FDAObjectScoreValueId" <= ',"InObjectScoreId",' 
	AND a."FDASystemObjectsId" = ',"InObjectId",' ');
	"lvInd1" := 'Y';
	 

	IF "InRowCount" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", ' AND CAST(a."RowCount" AS VARCHAR) LIKE ''%',"InRowCount",'%''');
	   ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."RowCount" AS VARCHAR) LIKE ''%',"InRowCount",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;

    IF "InAvgNullCount" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", ' AND CAST(a."AvgNullCount" AS VARCHAR) LIKE ''%',"InAvgNullCount",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."AvgNullCount" AS VARCHAR) LIKE ''%',"InAvgNullCount",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;

    IF "InNullCountPercent" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", ' AND CAST(a."NullCountPercent" AS VARCHAR) LIKE ''%',"InNullCountPercent",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."NullCountPercent" AS VARCHAR) LIKE ''%',"InNullCountPercent",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;

    IF "InAvgDistinctCount" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", 'AND CAST(a."AvgDistinctCount" AS VARCHAR) LIKE ''%',"InAvgDistinctCount",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."AvgDistinctCount" AS VARCHAR) LIKE ''%',"InAvgDistinctCount",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;

    IF "InDistinctCountPercent" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", ' AND CAST(a."DistinctCountPercent" AS VARCHAR) Like ''%',"InDistinctCountPercent",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."DistinctCountPercent" AS VARCHAR) Like ''%',"InDistinctCountPercent",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;
    
	IF "InLastUpdatedOn" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"WhereConditionString" := CONCAT("WhereConditionString", ' AND CAST(a."LastUpdatedDateTime" AS VARCHAR) Like ''%',"InLastUpdatedOn",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"WhereConditionString" := CONCAT("WhereConditionString",' CAST(a."LastUpdatedDateTime" AS VARCHAR) Like ''%',"InLastUpdatedOn",'%''');
			"lvInd1" := 'Y';
        END IF;
        END IF;
	END IF;
	
	
	
	 
END IF;

"SelectString" := CONCAT("SelectString","FromString","WhereConditionString",'ORDER BY a."CreatedDateTime" DESC ) x ', "SelectString2");

RAISE NOTICE 'SelectString: %',"SelectString";

"SelectCountString" := CONCAT('SELECT COUNT(a."FDAObjectScoreValueId") "OutTotalRecordCount"', "FromString" , "WhereConditionString");

RAISE NOTICE 'SelectCountString: %',"SelectCountString";

OPEN $14 FOR 

	EXECUTE "SelectString";

RETURN NEXT $14;
	
OPEN $15 FOR 

	EXECUTE "SelectCountString";

RETURN NEXT $15;

/*
SELECT fda."Proc_ListFDAObjectScoreTrend"(
	'0',--"InOffSet" bigint,
	'15',--"InLimit" bigint,
	'',--"InOrderByColumn" character varying,
	'',--"InOrderBy" character varying,
	'326',--"InObjectId" character varying,
	'74',--"InObjectScoreId" character varying,
	'',--"InObjectName" character varying,
	'',--"InRowCount" character varying,
	'',--"InAvgNullCount" character varying,
	'',--"InNullCountPercent" character varying,
	'',--"InAvgDistinctCount" character varying,
	'',--"InDistinctCountPercent" character varying,
	'',--"InLastUpdatedOn" character varying,
	'R1',--refcursor,
	'R2');
FETCH ALL IN "R1";

*/
END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListMaintainDataQuality"(
	"InOffset" bigint,
	"InLimit" bigint,
	"InOrderBy" character varying,
	"InOredrByType" character varying,
	"InQualityRulesId" character varying,
	"InRuleName" character varying,
	"InRuleType" character varying,
	"InSystemName" character varying,
	"InRuleDescription" text,
	"InObjectName" character varying,
	"InFieldName" character varying,
	"InDAMADimension" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "InSearchInputLike" VARCHAR;
DECLARE "SelectString1" TEXT;
DECLARE "SelectString" TEXT;
DECLARE "FromString" TEXT;
DECLARE "lvInd" CHARACTER VARYING(1);
DECLARE "WhereConditionString" TEXT;
DECLARE "CountSelectString" TEXT;
DECLARE "OrderBystring" TEXT;
DECLARE "WhereObjectFieldCondition" TEXT;

BEGIN

"SelectString" :=CONCAT('SELECT 
								"FDADataQualityRulesId",
								"RuleName",
								"RuleDescription",
								"DAMADimension",
								"RuleType",
								REPLACE("RuleSignature",''~^~'','','') AS "RuleSignature",
								"RuleCount",
								"ObjectApplied",
								"ColumnsApplied",
								"RuleDataType",
								"LastUsedOn",
								"NumberOfException",
								"LinkedFields",
								"LinkedObject",
								"SystemName",
								"SystemType"
						FROM
							(SELECT 
									a."FDADataQualityRulesId",
									"RuleName" ,
									a."RuleDescription",
									COALESCE(a."DAMADimension",'''') "DAMADimension",
									"RuleType" AS "RuleType",
									"RuleSignature",
									"RuleCount",
									COALESCE(f."ObjectApplied",0) AS "ObjectApplied",
									COALESCE(e."ColumnsApplied",0) AS "ColumnsApplied",
									a."RuleDataType",
									e."LinkedFields",
									f."LinkedObject",
									SUBSTRING(a."CreatedOn",1,10) "LastUsedOn",
									COALESCE(g."NumberOfException",0) AS "NumberOfException",
									h."SystemAliasName" AS "SystemName",
									h."SystemType" 
						');

"FromString" := CONCAT('FROM fda."FDADataQualityMasterRules" a
						LEFT JOIN (SELECT 
										STRING_AGG("RuleType",'','')"RuleType",
										STRING_AGG("RuleSignature",''|'') "RuleSignature",
										"FDADataQualityRulesId",
										COUNT("RuleType") "RuleCount"
									FROM(SELECT 
												(CASE WHEN "RuleType" IN (''Enumerated Value'',''Date Range'',''Length Check'') AND ("LeftFieldValue" > '''' AND "RightFieldValue" > '''')
															THEN "RuleType" 
													WHEN "RuleType" IN (''DataType Check'',''Possible Character'',''Blank/NonBlank'',''Null Check'',''Forbidden Value'',''Permitted Value'',''Distinct Check'',''Enumerated Value(Query)'',''User Criteria'') AND "LeftFieldValue" > '''' 
															THEN "RuleType"
													WHEN "RuleType" IN (''Range of Values'',''Possible Character'',''Row Count Variation'') AND ("LeftFieldValue" > '''' OR "RightFieldValue" > '''') 
															THEN "RuleType"  
												END) "RuleType",
												(CASE WHEN "RuleType" IN (''Enumerated Value'',''Range of Values'',''Date Range'',''Length Check'') AND "LeftFieldValue" > '''' or "RightFieldValue" > ''''
															THEN  CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
													WHEN "RuleType" IN (''DataType Check'',''Possible Character'',''Blank/NonBlank'',''Null Check'',''Forbidden Value'',''Permitted Value'',''Distinct Check'',''Enumerated Value(Query)'',''User Criteria'') AND "LeftFieldValue" > '''' 
															THEN CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
													WHEN "RuleType" IN (''Possible Character'',''Row Count Variation'') AND ("LeftFieldValue" > '''' OR "RightFieldValue" > '''') 
															THEN CONCAT_WS(''-'',"RuleType","LeftFieldValue","RightFieldValue" )
												END) "RuleSignature",
												"FDADataQualityRulesId" 
										FROM fda."FDADataQualityMasterRulesDetails"
										)m
									GROUP BY "FDADataQualityRulesId"
									) b
							ON a."FDADataQualityRulesId" = b."FDADataQualityRulesId" 
						LEFT JOIN ( SELECT	COUNT("FDASystemObjectFieldsId") AS "ColumnsApplied",
											STRING_AGG(distinct "FDASystemObjectFieldsId"::text,'','') "LinkedFields",
											c."FDADataQualityRulesId"
									FROM fda."FDASystemObjects" a
									INNER JOIN fda."FDASystemObjectFields" b
										ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
									INNER JOIN fda."FDADataQualityMasterRules" c
										ON b."MasterRuleId" = c."FDADataQualityRulesId"
									GROUP BY c."FDADataQualityRulesId"
									) e
								ON a."FDADataQualityRulesId" =  e."FDADataQualityRulesId"
						LEFT JOIN ( SELECT	COUNT(DISTINCT a."FDASystemObjectsId") AS "ObjectApplied",
					   						STRING_AGG(distinct a."FDASystemObjectsId"::text,'','') "LinkedObject",
											d."FDADataQualityRulesId" 
									FROM fda."FDASystemObjects" a
									LEFT JOIN ( SELECT 
													"FDASystemObjectsId",
													c."FDADataQualityRulesId" 
												FROM fda."FDASystemObjectFields" b
												INNER JOIN fda."FDADataQualityMasterRules" c
													ON b."MasterRuleId" = c."FDADataQualityRulesId"
											) d
										ON a."FDASystemObjectsId" = d."FDASystemObjectsId"
									GROUP BY d."FDADataQualityRulesId" 
								)f
							ON a."FDADataQualityRulesId" = f."FDADataQualityRulesId"
						LEFT JOIN ( SELECT 
											SUM("OutlierCount") AS "NumberOfException",
											"MasterRuleId"
									FROM fda."FDAObjectScoreOutlierCountByCategory"
									WHERE "LastUpdatedOn" > current_date - 30
										AND "MasterRuleId" IS NOT NULL
									GROUP BY "MasterRuleId"
									) g
							ON a."FDADataQualityRulesId" = g."MasterRuleId"
						LEFT JOIN fda."FDASystems" h
							ON a."FDASystemsId" = h."FDASystemsId"
						LEFT JOIN (SELECT a."ObjectName",
										  b."FieldName",
										  b."MasterRuleId"
									FROM fda."FDASystemObjects" a
									INNER JOIN fda."FDASystemObjectFields" b
										ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
									)i
							ON a."FDADataQualityRulesId" =  i."MasterRuleId"
						');						

IF "InObjectName" > '' OR "InFieldName" > '' THEN 
	"lvInd":= 'N';
	
	IF "InObjectName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'WHERE i."ObjectName" = ''',"InObjectName",''' ');
			"lvInd":= 'Y';
		ELSE
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'AND   i."ObjectName" = ''',"InObjectName",''' ');
		END IF;
	END IF;
	
	IF "InFieldName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'WHERE i."FieldName" ILIKE ''%', "InFieldName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereObjectFieldCondition" :=CONCAT("WhereObjectFieldCondition",'AND   i."FieldName" ILIKE ''%',"InFieldName",'%'' ');
		END IF;
	END IF;		
END IF;	
							
IF "InOrderBy" > '' AND "InOredrByType" > '' THEN  
"OrderBystring":= CONCAT('ORDER BY "',"InOrderBy"||'" '||"InOredrByType",'
						  OFFSET ', "InOffset" ,' ROWS
						  FETCH NEXT ',"InLimit",' ROWS ONLY');
ELSE 
"OrderBystring":= CONCAT('ORDER BY x."FDADataQualityRulesId" DESC
						  OFFSET ', "InOffset" ,' ROWS
						  FETCH NEXT ',"InLimit",' ROWS ONLY');				
END IF;

IF "InQualityRulesId" > '' OR "InRuleName" > '' OR "InRuleType" > '' OR "InSystemName" > '' OR "InRuleDescription" > '' OR "InDAMADimension" > '' THEN 
	"lvInd":= 'N';
	
	IF "InQualityRulesId" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."FDADataQualityRulesId"::text = ''',"InQualityRulesId",''' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."FDADataQualityRulesId"::text = ''',"InQualityRulesId",''' ');
		END IF;
	END IF;
	
	IF "InRuleName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleName" ILIKE ''%', "InRuleName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."RuleName" ILIKE ''%',"InRuleName",'%'' ');
		END IF;
	END IF;
	
	IF "InRuleType" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleType" ILIKE ''%',"InRuleType" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND  x."RuleType" ILIKE ''%',"InRuleType", '%'' ');
		END IF;
	END IF;
	
	IF "InRuleDescription" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."RuleDescription" ILIKE ''%',"InRuleDescription" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND  x."RuleDescription" ILIKE ''%',"InRuleDescription", '%'' ');
		END IF;
	END IF;
	
	IF "InSystemName" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."SystemName" ILIKE ''%', "InSystemName" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."SystemName" ILIKE ''%',"InSystemName",'%'' ');
		END IF;
	END IF;
	
	IF "InDAMADimension" > '' THEN 
		IF "lvInd" = 'N' THEN 
			"WhereConditionString" :=CONCAT("WhereConditionString",'WHERE x."DAMADimension" ILIKE ''%', "InDAMADimension" ,'%'' ');
			"lvInd":= 'Y';
		ELSE
			"WhereConditionString" :=CONCAT("WhereConditionString",'AND   x."DAMADimension" ILIKE ''%',"InDAMADimension",'%'' ');
		END IF;
	END IF;
END IF;

"SelectString1" :=	CONCAT("SelectString","FromString","WhereObjectFieldCondition",')x  ',"WhereConditionString","OrderBystring");
"CountSelectString" := CONCAT('SELECT COUNT(*) "OutTotalRecordCount" FROM (',"SelectString","FromString","WhereObjectFieldCondition",')x ',"WhereConditionString",' )Y;');

RAISE NOTICE 'SelectString : %',"SelectString1";
RAISE NOTICE 'SelectString : %',"CountSelectString";

OPEN $13 FOR --OPEN THE REF CURSOR

	EXECUTE "SelectString1";

RETURN NEXT $13;

OPEN $14 FOR --OPEN THE REF CURSOR

	EXECUTE "CountSelectString";

RETURN NEXT $14;
		
/*
SELECT fda."Proc_ListMaintainDataQuality"(
	'0',--"InOffset" bigint,
	'10',--"InLimit" bigint,
	'',--"InOrderBy" character varying,
	'',--"InOredrByType" character varying,
	'',--"InQualityRulesId" character varying,
	'',--"InRuleName" character varying,
	'',--"InRuleType" character varying,
	'',--"InSystemName" character varying,
	'',--"InRuleDescription" text,
	'performdb.entityrule_ss',--"InObjectName" character varying,
	'',--"InFieldName" character varying,
	'',--"InDAMADimension" character varying,
	'refcursor1',
	'refcursor2');
FETCH ALL IN "refcursor1";
	
	*/

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_UpdateFDAObjectFieldsOutlierData"(
	"InObjectScoreId" bigint,
	"InSystemId" bigint,
	"InObjectId" character varying,
	"InObjectFieldId" character varying,
	"InFieldSegmentId" character varying,
	"InObjectSegmentId" character varying,
	"InFieldNames" text,
	"InOutliersCount" character varying,
	"InData" text,
	"InRuleName" character varying,
	"InRuleType" character varying)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE 
"lvObjectScoreId" BIGINT;
"lvLastObjectScoreId" BIGINT;
"lvLastObjectFieldScoreId" BIGINT;
"lvLastFieldSegmentedScoreId" BIGINT;
"lvLastObjectSegmentedScoreId" BIGINT;
"lvTotalOutliers" BIGINT;
"lvSysId" VARCHAR(10);
"lvSegmentFieldName" VARCHAR(500);
"lvSegmentFieldValue" VARCHAR(500);
"lvOutlierFieldName" VARCHAR(500);
"lvRuleDetails" TEXT;

"PYOutlierCount" BIGINT;
"lvOutlierCount" BIGINT;
"PYObjectScoreId" BIGINT;

DECLARE "ITEM_CURSOR" CURSOR FOR SELECT "VALUE"
FROM UNNEST(STRING_TO_ARRAY("InData" ,'{|}')) "VALUE"
WHERE "VALUE" IS NOT NULL
LIMIT 100;

DECLARE "lvData" VARCHAR(1000);

BEGIN

--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InSystemId',(CAST "InSystemId" AS VARCHAR),'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InObjectId',"InObjectId",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InObjectFieldId',"InObjectFieldId",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InFieldSegmentId',"InFieldSegmentId",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InObjectSegmentId',"InObjectSegmentId",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InFieldNames',"InFieldNames",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InOutliersCount',"InOutliersCount",'');
--PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','InData',"InData",'');

IF "InOutliersCount" = '' THEN

 "InOutliersCount" := '0';

END IF;

"lvSysId" := CAST("InSystemId" AS VARCHAR);

IF COALESCE("InObjectId",'') > '' 
	AND "InObjectScoreId" > 0
	AND COALESCE("InObjectFieldId",'') = '' 
	AND COALESCE("InFieldSegmentId",'') = ''
	AND COALESCE("InObjectSegmentId",'') = ''
THEN
	--store Total outliers under on object
		
		/*SELECT COUNT(*)
		INTO "lvTotalOutliers"
		FROM fda."FDAObjectFieldsOutlierData"
		WHERE "FDAObjectScoreId" = "InObjectScoreId"; */
		"lvTotalOutliers" := (SELECT SUM("OutlierCount") 
							FROM fda."FDAObjectScoreOutlierCountByCategory"
							WHERE "FDAObjectScoreId" = "InObjectScoreId"); 
		
		RAISE NOTICE 'VALUE: %',"lvTotalOutliers";

		UPDATE fda."FDAObjectsScoreValue"
		SET "Outliers" = CAST(COALESCE("lvTotalOutliers",0) AS VARCHAR)
		WHERE "FDAObjectScoreValueId" = "InObjectScoreId";
		
		----------------------object score color-------------------
		SELECT "FDAObjectScoreId"
		INTO "PYObjectScoreId"
		FROM(SELECT "FDAObjectScoreId", RANK() OVER ( ORDER BY "FDAObjectScoreId" DESC) "Rank"
			FROM(SELECT DISTINCT "FDAObjectScoreId"
					FROM fda."FDAObjectsScoreValue" a
				INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" b
					ON a."FDAObjectScoreValueId" = b."FDAObjectScoreId"
				WHERE b."FDAObjectScoreId" <= "InObjectScoreId"
				AND a."FDASystemObjectsId" = CAST("InObjectId" AS BIGINT)
				ORDER BY  "FDAObjectScoreId" DESC
				)x
			)y
		WHERE "Rank" = 2;
		
		/*SELECT SUM("OutlierCount")
		INTO "PYOutlierCount"
		FROM fda."FDAObjectScoreOutlierCountByCategory"
		WHERE "FDAObjectScoreId" = "PYObjectScoreId"
		AND "RuleName" = "InRuleName";
		
		SELECT SUM("OutlierCount") 
		INTO "lvOutlierCount"
		FROM fda."FDAObjectScoreOutlierCountByCategory"
		WHERE "FDAObjectScoreId" = "InObjectScoreId"
		AND "RuleName" = "InRuleName"; */
		
		INSERT INTO fda."FDAObjectScoreOutlierCountByObject"
		(
			"FDAObjectScoreId",
			"FDASystemObjectId",
			"RuleName",
			"OutlierCount",
			"OutlierCountColor",
			"LastUpdatedOn"
		)
		SELECT
			"InObjectScoreId",
			CAST("InObjectId" AS BIGINT),
			a."RuleName",
			a."OutlierCount",
			(CASE WHEN COALESCE(a."OutlierCount" :: bigint,0) > 0 AND a."RuleName" = b."RuleName" AND COALESCE(a."OutlierCount" :: bigint,0) = COALESCE(b."OutlierCount" :: bigint,0) THEN 'ORANGE'
						WHEN COALESCE(a."OutlierCount" :: bigint,0) > 0 AND a."RuleName" = b."RuleName"  AND COALESCE(a."OutlierCount" :: bigint,0) <> COALESCE(b."OutlierCount" :: bigint,0) THEN 'RED'
						WHEN COALESCE(a."OutlierCount" :: bigint,0) > 0 AND COALESCE(a."RuleName",'') > '' AND COALESCE(b."RuleName",'') = '' THEN 'RED'
						WHEN COALESCE(a."OutlierCount" :: bigint,0) = 0 THEN 'GREEN' ELSE 'GREEN' END),
			CURRENT_TIMESTAMP
		
		FROM (SELECT "FDAObjectScoreId","RuleName",SUM("OutlierCount") AS "OutlierCount"
			FROM fda."FDAObjectScoreOutlierCountByCategory"
			WHERE "FDAObjectScoreId" = "InObjectScoreId"
			GROUP BY "FDAObjectScoreId","RuleName")a
		LEFT JOIN(SELECT "FDAObjectScoreId","RuleName",SUM("OutlierCount") AS "OutlierCount"
				FROM fda."FDAObjectScoreOutlierCountByCategory"
				WHERE "FDAObjectScoreId" = "PYObjectScoreId"
				group by "FDAObjectScoreId","RuleName")b
			ON a."RuleName" = b."RuleName";
				
		-------------------------------------------------
		
	  
ELSE IF COALESCE("InObjectId",'') > ''  
		AND "InObjectScoreId" > 0
		AND COALESCE("InObjectFieldId",'') > '' 
		AND COALESCE("InFieldSegmentId",'') = ''
		AND COALESCE("InObjectSegmentId",'') = ''
		AND COALESCE("InData",'') > ''
THEN
RAISE NOTICE 'VALUE: %','block 2'; 
	--store Field outliers without segment

		--Get Latest Object Field Score Id
		SELECT MAX("FDAObjectFieldsScoreValueId")
			INTO "lvLastObjectFieldScoreId"
		FROM fda."FDAObjectFieldsScoreValue"
		WHERE "FDAObjectScoreValueId" = "InObjectScoreId"
		AND "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT);
		
		--Get Column Name
		SELECT "FieldName"
			INTO "lvOutlierFieldName"
		FROM fda."FDASystemObjectFields"
		WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT);
		
			SELECT STRING_AGG(X."RuleName",'(^)') 
				INTO "lvRuleDetails"
			FROM (SELECT ("RuleType"||'   |   '||
								(CASE
								WHEN COALESCE("LeftFieldValue",'') > ''AND COALESCE("RightFieldValue",'') > ''
									THEN "LeftFieldValue"||'   ^   '||"RightFieldValue"
								WHEN  COALESCE("LeftFieldValue",'') > ''AND COALESCE("RightFieldValue",'') = ''
									THEN "LeftFieldValue"
								WHEN  COALESCE("LeftFieldValue",'') = ''AND COALESCE("RightFieldValue",'') > ''
									THEN "RightFieldValue"
								END)
							   )"RuleName"
						FROM fda."FDADataQualityMasterRulesDetails"
						WHERE "FDADataQualityRulesId" = (SELECT "MasterRuleId" FROM fda."FDASystemObjectFields"
															WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT))
						AND "RuleType" = (CASE
											  WHEN UPPER("InRuleName") = UPPER('Date Distinct Check') THEN 'Distinct Check'
											  WHEN UPPER("InRuleName") = UPPER('Date Length Check') THEN 'Length Check'
											  WHEN UPPER("InRuleName") = UPPER('Date Date Range') THEN 'Date Range'
											  WHEN UPPER("InRuleName") = UPPER('Date Permitted Value') THEN 'Permitted Value'
											  WHEN UPPER("InRuleName") = UPPER('Date User Crieteria') THEN 'User Crieteria'
											  WHEN UPPER("InRuleName") = UPPER('Date Enumerated Value(Query)') THEN 'Enumerated Value(Query)'
											  WHEN UPPER("InRuleName") = UPPER('Zip Code DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Email DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Numeric DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Forbidden Value') THEN 'Forbidden Value'
											  WHEN UPPER("InRuleName") = UPPER('Null Check') THEN 'Null Check'
										  ELSE "InRuleName"
										  END)
					)X
				WHERE X."RuleName"  IS NOT NULL ;
		--DELETE FROM fda."FDAObjectFieldsOutlierData"
		--WHERE 
		
			INSERT INTO fda."FDAObjectFieldsOutlierData"
			(
				"FDASystemId",
				"FDASystemObjectId",
				"FDAObjectScoreId",
				"FDAObjectFieldId",
				"FDAFieldScoreId",
				"OutlierFieldName",
				"OutlierFieldValue",
				"ObjectFieldNames",
				"ObjectFieldData",
				"LastUpdatedOn",
				"RuleName",
				"RuleType",
				"RuleDetails"
				
			)
			SELECT 
				"InSystemId",
				CAST("InObjectId" AS BIGINT),
				"InObjectScoreId",
				CAST("InObjectFieldId" AS BIGINT),
				"lvLastObjectFieldScoreId",
				"lvOutlierFieldName",
				SPLIT_PART("VALUE",'{~}',1),
				"InFieldNames",
				SPLIT_PART("VALUE",'{~}',2),
				CURRENT_TIMESTAMP,
				"InRuleName",
				"InRuleType",
				"lvRuleDetails"
				
			FROM UNNEST(STRING_TO_ARRAY("InData" ,'{|}')) "VALUE"
			WHERE "VALUE" IS NOT NULL;
			
		--SELECT COUNT(*)
		--INTO "lvTotalOutliers"
		--FROM fda."FDAObjectFieldsOutlierData"
		--WHERE "FDAObjectScoreId" = "lvLastObjectScoreId"
		--	AND "FDAFieldScoreId" = "lvLastObjectFieldScoreId";
			
		UPDATE fda."FDAObjectFieldsScoreValue"
		SET "Outliers" = COALESCE("InOutliersCount",'0')
		WHERE "FDAObjectFieldsScoreValueId" = "lvLastObjectFieldScoreId";
		
		DELETE FROM fda."FDAObjectScoreOutlierCountByCategory"
		WHERE "FDAObjectScoreId" = "InObjectScoreId"
			AND "FDAFieldScoreId" = "lvLastObjectFieldScoreId"
			AND COALESCE("FDAObjectSegmentId",0) = 0
			AND "RuleName" = "InRuleName";
		
		INSERT INTO fda."FDAObjectScoreOutlierCountByCategory"
		(
			"FDAObjectScoreId",
			"FDAFieldScoreId",
			"RuleName",
			"OutlierCount",
			"LastUpdatedOn",
			"MasterRuleId"
		)
		VALUES
		(
			"InObjectScoreId",
			"lvLastObjectFieldScoreId",
			"InRuleName",
			COALESCE("InOutliersCount" :: bigint,0),
			CURRENT_TIMESTAMP,
			(SELECT "MasterRuleId" FROM fda."FDASystemObjectFields"
			WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT) )
		);
		
		
		
			
			
ELSE IF COALESCE("InObjectId",'') > '' AND "InObjectScoreId" > 0
		AND COALESCE("InObjectFieldId",'') > '' AND COALESCE("InFieldSegmentId",'') > ''
		AND COALESCE("InObjectSegmentId",'') = '' AND COALESCE("InData",'') > ''
THEN
	--store Field outliers data with segment
	
			--Get Latest Object Field Score Id
			SELECT MAX("FDAObjectFieldsScoreValueId")
				INTO "lvLastObjectFieldScoreId"
			FROM fda."FDAObjectFieldsScoreValue"
			WHERE "FDAObjectScoreValueId" = "InObjectScoreId"
			AND "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT);
			
			--Get Segmented By Column Name
			SELECT "FieldName"
				INTO "lvSegmentFieldName"
			FROM fda."FDASystemObjectFields"
			WHERE "FDASystemObjectFieldsId" = CAST("InFieldSegmentId" AS BIGINT);
			
			--Get Column Name
			SELECT "FieldName"
				INTO "lvOutlierFieldName"
			FROM fda."FDASystemObjectFields"
			WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT);
			
			DELETE FROM fda."FDAObjectScoreOutlierCountByCategory"
			WHERE "FDAObjectScoreId" = "InObjectScoreId"
				AND "FDAFieldScoreId" = "lvLastObjectFieldScoreId"
				AND "FDAObjectSegmentId" = ("InFieldSegmentId" :: BIGINT)
				 AND "RuleName" = "InRuleName";
			
				 
			SELECT STRING_AGG(X."RuleName",'(^)') 
				INTO "lvRuleDetails"
				FROM (SELECT ("RuleType"||'   |   '||
								(CASE
								WHEN COALESCE("LeftFieldValue",'') > ''AND COALESCE("RightFieldValue",'') > ''
									THEN "LeftFieldValue"||'   ^   '||"RightFieldValue"
								WHEN  COALESCE("LeftFieldValue",'') > ''AND COALESCE("RightFieldValue",'') = ''
									THEN "LeftFieldValue"
								WHEN  COALESCE("LeftFieldValue",'') = ''AND COALESCE("RightFieldValue",'') > ''
									THEN "RightFieldValue"
								END)
							   )"RuleName"
						FROM fda."FDADataQualityMasterRulesDetails"
						WHERE "FDADataQualityRulesId" = (SELECT "MasterRuleId" FROM fda."FDASystemObjectFields"
															WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT))
						AND "RuleType" = (CASE
											  WHEN UPPER("InRuleName") = UPPER('Date Distinct Check') THEN 'Distinct Check'
											  WHEN UPPER("InRuleName") = UPPER('Date Length Check') THEN 'Length Check'
											  WHEN UPPER("InRuleName") = UPPER('Date Date Range') THEN 'Date Range'
											  WHEN UPPER("InRuleName") = UPPER('Date Permitted Value') THEN 'Permitted Value'
											  WHEN UPPER("InRuleName") = UPPER('Date User Crieteria') THEN 'User Crieteria'
											  WHEN UPPER("InRuleName") = UPPER('Date Enumerated Value(Query)') THEN 'Enumerated Value(Query)'
											  WHEN UPPER("InRuleName") = UPPER('Zip Code DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Email DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Numeric DataType Check') THEN 'DataType Check'
											  WHEN UPPER("InRuleName") = UPPER('Forbidden Value') THEN 'Forbidden Value'
											  WHEN UPPER("InRuleName") = UPPER('Null Check') THEN 'Null Check'
											  
											  ELSE "InRuleName"
										  END))X
				WHERE X."RuleName"  IS NOT NULL ;	 
			
			INSERT INTO fda."FDAObjectScoreOutlierCountByCategory"
			(
				"FDAObjectScoreId",
				"FDAFieldScoreId",
				"FDAObjectSegmentId",
				"RuleName",
				"OutlierCount",
				"LastUpdatedOn",
				"MasterRuleId"
			)
			VALUES
			(
				"InObjectScoreId",
				"lvLastObjectFieldScoreId",
				("InFieldSegmentId" :: BIGINT),
				"InRuleName",
				COALESCE("InOutliersCount" :: bigint,0),
				CURRENT_TIMESTAMP,
				(SELECT "MasterRuleId" FROM fda."FDASystemObjectFields"
				WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT) )
			);
		/*---------------------OBJECT SCORE COLOR----------------	
		
		INSERT INTO fda."FDAObjectScoreOutlierCountByObject"
		(
			"FDAObjectScoreId",
			"FDASystemObjectId",
			"RuleName",
			"OutlierCount",
			"LastUpdatedOn"
		)
		VALUES
		(
			"InObjectScoreId",
			CAST("InObjectId" AS BIGINT),
			"InRuleName",
			COALESCE("InOutliersCount" :: bigint,0),
			CURRENT_TIMESTAMP
		);
		
		SELECT "OutlierCount"
		INTO "PYOutlierCount"
		FROM(SELECT "FDAObjectScoreId","RuleName","OutlierCount",
		  RANK() OVER ( ORDER BY "FDAObjectScoreId" DESC) "Rank"
		FROM fda."FDAObjectsScoreValue" a
		INNER JOIN fda."FDAObjectScoreOutlierCountByObject" b
			ON a."FDAObjectScoreValueId" = b."FDAObjectScoreId"
		WHERE b."FDAObjectScoreId" <= "InObjectScoreId"
		AND a."FDASystemObjectsId" = CAST("InObjectId" AS BIGINT)
		AND UPPER("RuleName") = UPPER("InRuleName")
		ORDER BY  "FDAObjectScoreId" DESC)x
		WHERE "Rank" = 2;
		
		UPDATE fda."FDAObjectScoreOutlierCountByObject"
		SET "OutlierCountColor" = (CASE WHEN COALESCE("InOutliersCount" :: bigint,0) <> 0 AND COALESCE("InOutliersCount" :: bigint,0) = COALESCE("PYOutlierCount",0) THEN 'ORANGE'
				WHEN COALESCE("InOutliersCount" :: bigint,0) <> 0 AND COALESCE("InOutliersCount" :: bigint,0) <> COALESCE("PYOutlierCount",0) THEN 'RED'
				WHEN COALESCE("InOutliersCount" :: bigint,0) = 0 THEN 'GREEN' ELSE 'GREEN' END)---SCORE COLOR
		WHERE "FDAObjectScoreId" = "InObjectScoreId"
		AND "RuleName" = "InRuleName" ;*/
			
		--------------------------------------------		
			
			FOR row IN "ITEM_CURSOR" LOOP
			
				"lvData" = REPLACE(CAST(row AS TEXT),'(','');
				"lvData" = REPLACE("lvData",')','');
				"lvData" = REPLACE("lvData",'"','');
				"lvSegmentFieldValue" := SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',1);
				---PERFORM fda."Proc_ErrorTracking"('Proc_UpdateFDAObjectFieldsOutlierData','lvSegmentFieldValue',"lvSegmentFieldValue",'Mohan');
				IF "lvSegmentFieldValue" > ''
				THEN 
				
					--Get Latest Object Segmented Score Id By Segment Field Value
					SELECT MAX("FDAObjectFieldsSegmentedScoreValueId")
						INTO "lvLastFieldSegmentedScoreId"
					FROM fda."FDAObjectFieldsSegmentedScoreValue"
					WHERE "FDAObjectFieldsScoreValueId" = "lvLastObjectFieldScoreId"
						AND "FDASystemObjectSegmentedFieldId" = CAST("InFieldSegmentId" AS BIGINT)
						AND "SegmentFieldValue" = "lvSegmentFieldValue";
						
					IF "lvLastFieldSegmentedScoreId" > 0
					THEN
						RAISE NOTICE 'Value: %',"lvLastFieldSegmentedScoreId";
						RAISE NOTICE 'Value: %',"lvSegmentFieldValue";
						RAISE NOTICE 'Value: %',"lvSegmentFieldValue";
						RAISE NOTICE 'Value: %',"lvData";
						
						
							INSERT INTO fda."FDAObjectFieldsOutlierData"
							(
								"FDASystemId",
								"FDASystemObjectId",
								"FDAObjectScoreId",
								"FDAObjectFieldId",
								"FDAFieldScoreId",
								"FieldSegmentScoreId",
								"FDAFieldSegemntId",
								"FDASegmentFieldName",
								"FDASegmentFieldValue",
								"OutlierFieldName",
								"OutlierFieldValue",
								"ObjectFieldNames",
								"ObjectFieldData",
								"LastUpdatedOn",
								"RuleName",
								"RuleType",
								"RuleDetails"
							)
							VALUES
							( 
								"InSystemId",
								CAST("InObjectId" AS BIGINT),
								"InObjectScoreId",
								CAST("InObjectFieldId" AS BIGINT),
								"lvLastObjectFieldScoreId",
								"lvLastFieldSegmentedScoreId",
								CAST("InFieldSegmentId" AS BIGINT),
								"lvSegmentFieldName",
								SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',1),
								"lvOutlierFieldName",
								SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',2),
								"InFieldNames",
								SPLIT_PART("lvData",'{~}',2),
								CURRENT_TIMESTAMP,
								"InRuleName",
								"InRuleType",
								"lvRuleDetails"
							); 
				
						SELECT COUNT(*)
							INTO "lvTotalOutliers"
						FROM fda."FDAObjectFieldsOutlierData"
						WHERE "FieldSegmentScoreId" = "lvLastFieldSegmentedScoreId";
						
						UPDATE fda."FDAObjectFieldsSegmentedScoreValue"
						SET "Outliers" = CAST(COALESCE("lvTotalOutliers",0) AS VARCHAR)
						WHERE "FDAObjectFieldsSegmentedScoreValueId" = "lvLastFieldSegmentedScoreId"; 
						
						END IF;
				END IF;
				
				
			END LOOP;
			
ELSE IF COALESCE("InObjectId",'') > '' AND "InObjectScoreId" > 0
		AND COALESCE("InObjectFieldId",'') > '' AND COALESCE("InFieldSegmentId",'') = ''
		AND COALESCE("InObjectSegmentId",'') > '' AND COALESCE("InData",'') > ''
THEN
	--store Field outliers with object segment
	
			--Get Segmented By Column Name
			SELECT "FieldName"
				INTO "lvSegmentFieldName"
			FROM fda."FDASystemObjectFields"
				WHERE "FDASystemObjectFieldsId" = CAST("InObjectSegmentId" AS BIGINT);
				
			--Get Column Name
			SELECT "FieldName"
				INTO "lvOutlierFieldName"
			FROM fda."FDASystemObjectFields"
			WHERE "FDASystemObjectFieldsId" = CAST("InObjectFieldId" AS BIGINT);
			/*
			FOR row IN "ITEM_CURSOR" LOOP
			
				"lvData" = REPLACE(CAST(row AS TEXT),'(','');
				"lvData" = REPLACE("lvData",')','');
				"lvData" = REPLACE("lvData",'"','');
			
				--Get Latest Object Segmented Score Id By Segment Field Value
				SELECT MAX("FDAObjectFieldsSegmentedScoreByObjectSegmentId")
					INTO "lvLastFieldSegmentedScoreId"
				FROM fda."FDAObjectFieldsSegmentedScoreByObjectSegment"
				WHERE "FDASystemObjectFieldId" = CAST("InObjectFieldId" AS BIGINT)
					AND "FDASystemObjectId" = CAST("InObjectId" AS BIGINT)
					AND "ObjectSegmentedFieldId" = CAST("InObjectSegmentId" AS BIGINT)
					AND "SegmentFieldName" = "lvSegmentFieldName"
					AND "SegmentFieldValue" = SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',1);
					
					INSERT INTO fda."FDAObjectFieldsOutlierData"
					(
						"FDASystemId",
						"FDASystemObjectId",
						"FDAObjectScoreId",
						"FDAObjectFieldId",
						"ObjectSegmentScoreId",
						"FDAFieldSegemntId",
						"FDASegmentFieldName",
						"FDASegmentFieldValue",
						"OutlierFieldName",
						"OutlierFieldValue",
						"ObjectFieldNames",
						"ObjectFieldData",
						"LastUpdatedOn"
					)
					VALUES
					( 
						"InSystemId",
						CAST("InObjectId" AS BIGINT),
						"lvObjectScoreId",
						CAST("InObjectFieldId" AS BIGINT),
						"lvLastFieldSegmentedScoreId",
						CAST("InObjectSegmentId" AS BIGINT),
						"lvSegmentFieldName",
						SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',1),
						"lvOutlierFieldName",
						SPLIT_PART(SPLIT_PART("lvData",'{~}',1),'{^}',2),
						"InFieldNames",
						SPLIT_PART("lvData",'{~}',2),
						CURRENT_TIMESTAMP
					);
					
				SELECT COUNT(*)
				INTO "lvTotalOutliers"
				FROM fda."FDAObjectFieldsOutlierData"
				WHERE "ObjectSegmentScoreId" = "lvLastFieldSegmentedScoreId";
				
				UPDATE fda."FDAObjectFieldsSegmentedScoreByObjectSegment"
				SET "Outliers" = CAST(COALESCE("lvTotalOutliers",0) AS VARCHAR)
				WHERE "FDAObjectFieldsSegmentedScoreByObjectSegmentId" = "lvLastFieldSegmentedScoreId";
			
			END LOOP;
			*/

	END IF;
	END IF;
	END IF;
END IF;

/*
SELECT fda."Proc_InsertFDAObjectFieldsOutliersDetails"(
'1',  --"InSystemId" bigint,
'60',  --"InObjectId" character varying,
'',  --"InObjectFieldId" character varying,
'241',  --"InFieldSegmentId" character varying,
''   --"InData" text
);
*/

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_DAMAObjectRuleOutlier_V2"(
	"InSystemName" character varying,
	"InObjectName" character varying,
	"InDAMADimension" character varying,
	"InDaysInd" bigint,
	"InDate" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

BEGIN
"InSystemName" := CONCAT('%',"InSystemName",'%');
"InObjectName" := CONCAT('%',"InObjectName",'%');

---------------------------------------------------------------OBJECT(1- DAY)-----------------------------------------------
IF UPPER("InDAMADimension") = 'ACCURACY' --AND "InDaysInd" = 1
THEN

IF "InDaysInd" = 1
THEN

RAISE NOTICE 'DAMADimension : %', 'ACCURACY';
RAISE NOTICE 'DaysInd : %', '1';

OPEN $6 FOR
SELECT "RuleName",
		"OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			   d."RuleName",
			   SUM("OutlierCount") AS "OutlierCount"		   
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY d."RuleName"
	UNION
		SELECT DISTINCT 
			   "RuleName",
			   (COALESCE(SUM(X."SourceCriticalSeverity"),0) + COALESCE(SUM(X."TargetCriticalSeverity"),0)) AS "OutlierCount"
		FROM(SELECT DISTINCT "ReconciliationDate"::date,
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "SourceCriticalSeverity",
					(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "TargetCriticalSeverity",
					"AlertTag",
					aa."AlertTypeInd",
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN 'SourceCriticalSeverity'
							WHEN aa."AlertTypeInd" = 'TargetValue' THEN 'TargetCriticalSeverity' 
					END) "RuleName"
			FROM(SELECT "FDAAlertRulesId",
						"AlertTypeInd",
					 	"AlertTag",
						split_part("AlertTag", '.'::text, 1) AS "SystemAliasName",
						(split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName"
				FROM fda."FDAAlertRules"
				) aa
			LEFT JOIN(SELECT "FDAAlertRulesId",
							"ReconciliationDate",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 1 THEN 1::bigint
								ELSE 0::bigint
							END) AS "CriticalSeverity",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 9 THEN 1::bigint
								ELSE 0::bigint
							END) AS "AllokSeverity"
					FROM fda."FDAAlertOutput"
					) bb								
				ON aa."FDAAlertRulesId" = bb."FDAAlertRulesId"
			LEFT JOIN fda."FDASystems" cc 
				ON aa."SystemAliasName" = cc."SystemAliasName"
			LEFT JOIN fda."FDASystemObjects" dd 
				ON aa."ObjectName" = dd."ObjectName"
				AND cc."FDASystemsId" = dd."FDASystemsId"       
			WHERE bb."ReconciliationDate"::date  = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
				AND aa."SystemAliasName" ILIKE "InSystemName" 
				AND aa."ObjectName" ILIKE "InObjectName"			
			GROUP BY aa."AlertTypeInd",bb."ReconciliationDate","AlertTag"
			)X
		GROUP BY "RuleName"
	)Y
ORDER BY "OutlierCount" DESC;
RETURN NEXT $6;

OPEN $7 FOR
	SELECT *
	FROM(SELECT DISTINCT 
			   '' AS "AlertTag",
			   '' AS "AlertTypeInd",
			   c."MasterRuleId" AS "RuleId",
			   aa."SystemAliasName" AS "SystemName",
			   a."ObjectName",
			   c."RuleName",
			   'DataQualityRule' AS "RuleType",
			   SUM("OutlierCount") AS "OutlierCount",
			   STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
			   LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY a."ObjectName",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName",c."MasterRuleId"
	UNION
		SELECT DISTINCT 
			   "AlertTag",
			   "AlertTypeInd",
			   "RuleId",
			   split_part("AlertTag", '.'::text, 1) AS "SystemName", 
			   (split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName" ,
			   "RuleName",
			   'DataReconciliationRule' AS "RuleType",
			   (COALESCE(SUM(X."SourceCriticalSeverity"),0) + COALESCE(SUM(X."TargetCriticalSeverity"),0)) AS "OutlierCount",
			   '' AS "FDAObjectScoreId",
			   LEFT("ReconciliationDate"::TEXT,10) AS "ScoreRunDate"
		FROM(SELECT DISTINCT "ReconciliationDate"::date,
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "SourceCriticalSeverity",
					(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "TargetCriticalSeverity",
					"AlertTag",
					aa."AlertTypeInd",
					aa."FDAAlertRulesId" AS "RuleId",
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN 'SourceCriticalSeverity'
							WHEN aa."AlertTypeInd" = 'TargetValue' THEN 'TargetCriticalSeverity' 
					END) "RuleName"
			FROM(SELECT "FDAAlertRulesId",
						"AlertTypeInd",
					 	"AlertTag",
						split_part("AlertTag", '.'::text, 1) AS "SystemAliasName",
						(split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName"
				FROM fda."FDAAlertRules"
				) aa
			LEFT JOIN(SELECT "FDAAlertRulesId",
							"ReconciliationDate",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 1 THEN 1::bigint
								ELSE 0::bigint
							END) AS "CriticalSeverity",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 9 THEN 1::bigint
								ELSE 0::bigint
							END) AS "AllokSeverity"
					FROM fda."FDAAlertOutput"
					) bb								
				ON aa."FDAAlertRulesId" = bb."FDAAlertRulesId"
			LEFT JOIN fda."FDASystems" cc 
				ON aa."SystemAliasName" = cc."SystemAliasName"
			LEFT JOIN fda."FDASystemObjects" dd 
				ON aa."ObjectName" = dd."ObjectName"
				AND cc."FDASystemsId" = dd."FDASystemsId"       
			WHERE bb."ReconciliationDate"::date  = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
				AND aa."SystemAliasName" ILIKE "InSystemName" 
				AND aa."ObjectName" ILIKE "InObjectName"			
			GROUP BY aa."AlertTypeInd",bb."ReconciliationDate","AlertTag",aa."FDAAlertRulesId"
			)X
		GROUP BY "AlertTag","AlertTypeInd","RuleName","ReconciliationDate","RuleId"
		)Y
	WHERE "OutlierCount" <> 0
	ORDER BY "OutlierCount" DESC;
RETURN NEXT $7;

ELSE 

RAISE NOTICE 'DAMADimension : %', 'ACCURACY';
RAISE NOTICE 'DaysInd : %', '7';

OPEN $6 FOR

SELECT "RuleName",
	   "OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			   c."RuleName",
			   SUM("OutlierCount") AS "OutlierCount"		   
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
										AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY c."RuleName"
	UNION
		SELECT DISTINCT 
			   "RuleName",
			   (COALESCE(SUM(X."SourceCriticalSeverity"),0) + COALESCE(SUM(X."TargetCriticalSeverity"),0)) AS "OutlierCount"
		FROM(SELECT DISTINCT "ReconciliationDate"::date,
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "SourceCriticalSeverity",
					(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "TargetCriticalSeverity",
					"AlertTag",
					aa."AlertTypeInd",
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN 'SourceCriticalSeverity'
							WHEN aa."AlertTypeInd" = 'TargetValue' THEN 'TargetCriticalSeverity' 
					END) "RuleName"
			FROM(SELECT "FDAAlertRulesId",
						"AlertTypeInd",
					 	"AlertTag",
						split_part("AlertTag", '.'::text, 1) AS "SystemAliasName",
						(split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName"
				FROM fda."FDAAlertRules"
				) aa
			LEFT JOIN(SELECT "FDAAlertRulesId",
							"ReconciliationDate",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 1 THEN 1::bigint
								ELSE 0::bigint
							END) AS "CriticalSeverity",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 9 THEN 1::bigint
								ELSE 0::bigint
							END) AS "AllokSeverity"
					FROM fda."FDAAlertOutput"
					) bb								
				ON aa."FDAAlertRulesId" = bb."FDAAlertRulesId"
			LEFT JOIN fda."FDASystems" cc 
				ON aa."SystemAliasName" = cc."SystemAliasName"
			LEFT JOIN fda."FDASystemObjects" dd 
				ON aa."ObjectName" = dd."ObjectName"
				AND cc."FDASystemsId" = dd."FDASystemsId"       
			WHERE bb."ReconciliationDate"::date  BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
													AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
				AND aa."SystemAliasName" ILIKE "InSystemName" 
				AND aa."ObjectName" ILIKE "InObjectName"			
			GROUP BY aa."AlertTypeInd",bb."ReconciliationDate","AlertTag"
			)X
		GROUP BY "RuleName"
	)Y
ORDER BY "OutlierCount" DESC;
RETURN NEXT $6;

OPEN $7 FOR
	SELECT *
	FROM(SELECT DISTINCT 
			   '' AS "AlertTag",
			   '' AS "AlertTypeInd",
			   c."MasterRuleId" AS "RuleId",
			   aa."SystemAliasName" AS "SystemName",
			   a."ObjectName",
			   c."RuleName",
			   'DataQualityRule' AS "RuleType",
			   SUM("OutlierCount") AS "OutlierCount",
			   STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
			   LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
										AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY a."ObjectName",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName",c."MasterRuleId"
	UNION
		SELECT DISTINCT 
			   "AlertTag",
			   "AlertTypeInd",
			   "RuleId",
			   split_part("AlertTag", '.'::text, 1) AS "SystemName", 
			   (split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName" ,
			   "RuleName",
			   'DataReconciliationRule' AS "RuleType",
			   (COALESCE(SUM(X."SourceCriticalSeverity"),0) + COALESCE(SUM(X."TargetCriticalSeverity"),0)) AS "OutlierCount",
			   '' AS "FDAObjectScoreId",
			   LEFT("ReconciliationDate"::TEXT,10) AS "ScoreRunDate"
		FROM(SELECT DISTINCT "ReconciliationDate"::date,
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "SourceCriticalSeverity",
					(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "TargetCriticalSeverity",
					"AlertTag",
					aa."AlertTypeInd",
					aa."FDAAlertRulesId" AS "RuleId",
					(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN 'SourceCriticalSeverity'
							WHEN aa."AlertTypeInd" = 'TargetValue' THEN 'TargetCriticalSeverity' 
					END) "RuleName"
			FROM(SELECT "FDAAlertRulesId",
						"AlertTypeInd",
					 	"AlertTag",
						split_part("AlertTag", '.'::text, 1) AS "SystemAliasName",
						(split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName"
				FROM fda."FDAAlertRules"
				) aa
			LEFT JOIN(SELECT "FDAAlertRulesId",
							"ReconciliationDate",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 1 THEN 1::bigint
								ELSE 0::bigint
							END) AS "CriticalSeverity",
							(CASE 
								WHEN "FDAAlertOutput"."Severity" = 9 THEN 1::bigint
								ELSE 0::bigint
							END) AS "AllokSeverity"
					FROM fda."FDAAlertOutput"
					) bb								
				ON aa."FDAAlertRulesId" = bb."FDAAlertRulesId"
			LEFT JOIN fda."FDASystems" cc 
				ON aa."SystemAliasName" = cc."SystemAliasName"
			LEFT JOIN fda."FDASystemObjects" dd 
				ON aa."ObjectName" = dd."ObjectName"
				AND cc."FDASystemsId" = dd."FDASystemsId"       
			WHERE bb."ReconciliationDate"::date  BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
													AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
				AND aa."SystemAliasName" ILIKE "InSystemName" 
				AND aa."ObjectName" ILIKE "InObjectName"			
			GROUP BY aa."AlertTypeInd",bb."ReconciliationDate","AlertTag",aa."FDAAlertRulesId"
			)X
		GROUP BY "AlertTag","AlertTypeInd","RuleName","ReconciliationDate","RuleId"
		)Y
	WHERE "OutlierCount" <> 0
	ORDER BY "OutlierCount" DESC;
RETURN NEXT $7;
END IF;
---------------------------------------------------------------------------------------------------------
ELSE IF UPPER("InDAMADimension") = 'TIMELINESS'
THEN

IF  "InDaysInd" = 1 THEN

RAISE NOTICE 'DAMADimension : %', 'TIMELINESS';
RAISE NOTICE 'DaysInd : %', '1';

OPEN $6 FOR

SELECT  "RuleName",
		"OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			c."RuleName",
			SUM("OutlierCount") AS "OutlierCount"			
	FROM fda."FDASystems" aa
	INNER JOIN fda."FDASystemObjects" a
		ON aa."FDASystemsId" = a."FDASystemsId"
	INNER JOIN fda."FDAObjectsScoreValue" b
		ON a."FDASystemsId" = b."FDASystemId"
		AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
		ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
	INNER JOIN fda."FDADataQualityMasterRules" d
		ON d."FDADataQualityRulesId" = c."MasterRuleId"
	WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
		AND d."DAMADimension" ILIKE "InDAMADimension"
		AND aa."SystemAliasName" ILIKE "InSystemName" 
		AND a."ObjectName" ILIKE "InObjectName"
	GROUP BY c."RuleName"
UNION
	SELECT DISTINCT 
			'Freshness/SLA' AS "RuleName",
			SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA") AS "OutlierCount"
	FROM(SELECT b."LastRefreshedDateTime"::date AS "ScoreRunDate",
				(CASE WHEN a."RefreshFrequency" = 'Monthly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 30 THEN 'RED'
					WHEN a."RefreshFrequency" = 'Weekly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 7 THEN 'RED'
					WHEN a."RefreshFrequency" = 'Daily' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
					WHEN a."RefreshFrequency" = 'Daily Exclude Weekend' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
					WHEN a."RefreshFrequency" = 'Only Initial Refresh' THEN 'GREEN'
					ELSE 'GREEN' 
				END) "Color",
				(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) = to_char(b."LoadStartTime", 'HH24:MI'::text) 
						THEN 1
					ELSE 0
				END) AS "GreenSLA",
				(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) <> to_char(b."LoadStartTime", 'HH24:MI'::text) 
						THEN 1
					ELSE 0
				END) AS "RedSLA"			
		FROM fda."FDASystems" a1
		INNER JOIN fda."FDASystemObjects" a
			ON a1."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
		WHERE b."LastRefreshedDateTime"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
			AND a1."SystemAliasName" ILIKE "InSystemName"
			AND a."ObjectName" ILIKE "InObjectName"
		)X
	)Y
ORDER BY "OutlierCount" DESC;
RETURN NEXT $6;		

OPEN $7 FOR

	SELECT *
	FROM(SELECT DISTINCT 
			   c."MasterRuleId" AS "RuleId",
			   aa."SystemAliasName" AS "SystemName",
			   a."ObjectName",
			   c."RuleName",
			   'DataQualityRule' AS "RuleType",
			   SUM("OutlierCount") AS "OutlierCount",
			   STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
			   LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY a."ObjectName",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName",c."MasterRuleId"
	UNION
		SELECT DISTINCT 
				   0 AS "RuleId",
				   "SystemAliasName" AS "SystemName",
				   "ObjectName",
				   'Freshness/SLA' AS "RuleName",
				   'DataQualityFreshnessRule' AS "RuleType",
				   SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA") AS "OutlierCount",
				   '0' "FDAObjectScoreId",
				   LEFT("ScoreRunDate"::TEXT,10) AS "ScoreRunDate"
			FROM(SELECT b."LastRefreshedDateTime"::date AS "ScoreRunDate",
						(CASE WHEN a."RefreshFrequency" = 'Monthly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 30 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Weekly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 7 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily Exclude Weekend' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Only Initial Refresh' THEN 'GREEN'
							ELSE 'GREEN' 
						END) "Color",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) = to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "GreenSLA",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) <> to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "RedSLA",
						a1."SystemAliasName",
						a."ObjectName"
				FROM fda."FDASystems" a1
				INNER JOIN fda."FDASystemObjects" a
					ON a1."FDASystemsId" = a."FDASystemsId"
				INNER JOIN fda."FDAObjectsScoreValue" b
					ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
				WHERE b."LastRefreshedDateTime"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
					AND a1."SystemAliasName" ILIKE "InSystemName"
					AND a."ObjectName" ILIKE "InObjectName"
				)X
			GROUP BY "SystemAliasName","ObjectName","ScoreRunDate"
		)Y
		WHERE "OutlierCount" <> 0
	ORDER BY "OutlierCount" DESC;
RETURN NEXT $7;

ELSE 

RAISE NOTICE 'DAMADimension : %', 'TIMELINESS';
RAISE NOTICE 'DaysInd : %', '7';

OPEN $6 FOR

SELECT  "RuleName",
		"OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			c."RuleName",
			SUM("OutlierCount") AS "OutlierCount"			
	FROM fda."FDASystems" aa
	INNER JOIN fda."FDASystemObjects" a
		ON aa."FDASystemsId" = a."FDASystemsId"
	INNER JOIN fda."FDAObjectsScoreValue" b
		ON a."FDASystemsId" = b."FDASystemId"
		AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
		ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
	INNER JOIN fda."FDADataQualityMasterRules" d
		ON d."FDADataQualityRulesId" = c."MasterRuleId"
	WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
									AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
		AND d."DAMADimension" ILIKE "InDAMADimension"
		AND aa."SystemAliasName" ILIKE "InSystemName" 
		AND a."ObjectName" ILIKE "InObjectName"
	GROUP BY c."RuleName"
UNION
		SELECT DISTINCT 
				'Freshness/SLA' AS "RuleName",
				SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA") AS "OutlierCount"
		FROM(SELECT b."LastRefreshedDateTime"::date AS "ScoreRunDate",
					(CASE WHEN a."RefreshFrequency" = 'Monthly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 30 THEN 'RED'
						WHEN a."RefreshFrequency" = 'Weekly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 7 THEN 'RED'
						WHEN a."RefreshFrequency" = 'Daily' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
						WHEN a."RefreshFrequency" = 'Daily Exclude Weekend' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
						WHEN a."RefreshFrequency" = 'Only Initial Refresh' THEN 'GREEN'
						ELSE 'GREEN' 
					END) "Color",
					(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) = to_char(b."LoadStartTime", 'HH24:MI'::text) 
							THEN 1
						ELSE 0
					END) AS "GreenSLA",
					(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) <> to_char(b."LoadStartTime", 'HH24:MI'::text) 
							THEN 1
						ELSE 0
					END) AS "RedSLA"			
			FROM fda."FDASystems" a1
			INNER JOIN fda."FDASystemObjects" a
				ON a1."FDASystemsId" = a."FDASystemsId"
			INNER JOIN fda."FDAObjectsScoreValue" b
				ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
			WHERE b."LastRefreshedDateTime"::date  BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
													AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
				AND a1."SystemAliasName" ILIKE "InSystemName"
				AND a."ObjectName" ILIKE "InObjectName"
			)X
	)Y
ORDER BY "OutlierCount" DESC;

RETURN NEXT $6;		

OPEN $7 FOR

	SELECT *
	FROM(SELECT DISTINCT 
			   c."MasterRuleId" AS "RuleId",
			   aa."SystemAliasName" AS "SystemName",
			   a."ObjectName",
			   c."RuleName",
			   'DataQualityRule' AS "RuleType",
			   SUM("OutlierCount") AS "OutlierCount",
			   STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
			   LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
		FROM fda."FDASystems" aa
		INNER JOIN fda."FDASystemObjects" a
			ON aa."FDASystemsId" = a."FDASystemsId"
		INNER JOIN fda."FDAObjectsScoreValue" b
			ON a."FDASystemsId" = b."FDASystemId"
			AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
			ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
		INNER JOIN fda."FDADataQualityMasterRules" d
			ON d."FDADataQualityRulesId" = c."MasterRuleId"
		WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
										AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
			AND d."DAMADimension" ILIKE "InDAMADimension"
			AND aa."SystemAliasName" ILIKE "InSystemName" 
			AND a."ObjectName" ILIKE "InObjectName"
		GROUP BY a."ObjectName",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName",c."MasterRuleId"
	UNION
		SELECT DISTINCT 
				   0 AS "RuleId",
				   "SystemAliasName" AS "SystemName",
				   "ObjectName",
				   'Freshness/SLA' AS "RuleName",
				   'DataQualityFreshnessRule' AS "RuleType",
				   SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA") AS "OutlierCount",
				   '0' "FDAObjectScoreId",
				   LEFT("ScoreRunDate"::TEXT,10) AS "ScoreRunDate"
			FROM(SELECT b."LastRefreshedDateTime"::date AS "ScoreRunDate",
						(CASE WHEN a."RefreshFrequency" = 'Monthly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 30 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Weekly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 7 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily Exclude Weekend' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Only Initial Refresh' THEN 'GREEN'
							ELSE 'GREEN' 
						END) "Color",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) = to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "GreenSLA",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) <> to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "RedSLA",
						a1."SystemAliasName",
						a."ObjectName"
				FROM fda."FDASystems" a1
				INNER JOIN fda."FDASystemObjects" a
					ON a1."FDASystemsId" = a."FDASystemsId"
				INNER JOIN fda."FDAObjectsScoreValue" b
					ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
				WHERE b."LastRefreshedDateTime"::date  BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
													AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date	
					AND a1."SystemAliasName" ILIKE "InSystemName"
					AND a."ObjectName" ILIKE "InObjectName"
				)X
			GROUP BY "SystemAliasName","ObjectName","ScoreRunDate"
		)Y
		WHERE "OutlierCount" <> 0
	ORDER BY "OutlierCount" DESC;
RETURN NEXT $7;

END IF;
--------------------------------------------------------------------------------------------------------------
ELSE 

IF  "InDaysInd" = 1 THEN

RAISE NOTICE 'DAMADimension : %', 'OTHER RULES';
RAISE NOTICE 'DaysInd : %', '1';

OPEN $6 FOR 

SELECT "RuleName",
		"OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			c."RuleName",
			SUM("OutlierCount") AS "OutlierCount"			
	FROM fda."FDASystems" aa
	INNER JOIN fda."FDASystemObjects" a
		ON aa."FDASystemsId" = a."FDASystemsId"
	INNER JOIN fda."FDAObjectsScoreValue" b
		ON a."FDASystemsId" = b."FDASystemId"
		AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
		ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
	INNER JOIN fda."FDADataQualityMasterRules" d
		ON d."FDADataQualityRulesId" = c."MasterRuleId"
	WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
		AND d."DAMADimension" ILIKE "InDAMADimension"
		AND aa."SystemAliasName" ILIKE "InSystemName" 
		AND a."ObjectName" ILIKE "InObjectName"
	GROUP BY c."RuleName"
	)X
ORDER BY "OutlierCount" DESC;
RETURN NEXT $6;

OPEN $7 FOR 

SELECT DISTINCT 
		c."MasterRuleId" AS "RuleId",
		aa."SystemAliasName" AS "SystemName",
		a."ObjectName",
		c."RuleName",
		'DataQualityRule' AS "RuleType",
		SUM("OutlierCount") AS "OutlierCount",
		STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
		LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
FROM fda."FDASystems" aa
INNER JOIN fda."FDASystemObjects" a
	ON aa."FDASystemsId" = a."FDASystemsId"
INNER JOIN fda."FDAObjectsScoreValue" b
	ON a."FDASystemsId" = b."FDASystemId"
	AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
	ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
INNER JOIN fda."FDADataQualityMasterRules" d
	ON d."FDADataQualityRulesId" = c."MasterRuleId"
WHERE c."LastUpdatedOn"	::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
	AND d."DAMADimension" ILIKE "InDAMADimension"
	AND aa."SystemAliasName" ILIKE "InSystemName" 
	AND a."ObjectName" ILIKE "InObjectName"
GROUP BY a."ObjectName",c."MasterRuleId",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName"
ORDER BY "OutlierCount" DESC;

RETURN NEXT $7;

ELSE

RAISE NOTICE 'DAMADimension : %', 'OTHER RULES';
RAISE NOTICE 'DaysInd : %', '7';

OPEN $6 FOR 

SELECT  "RuleName",
		"OutlierCount",
	   ( MIN("OutlierCount") over() ) * 0.8 "MinOutlierCount",
	   ( MAX("OutlierCount") over() ) * 1.2 "MaxOutlierCount"
FROM(SELECT DISTINCT 
			c."RuleName",
			SUM("OutlierCount") AS "OutlierCount"			
	FROM fda."FDASystems" aa
	INNER JOIN fda."FDASystemObjects" a
		ON aa."FDASystemsId" = a."FDASystemsId"
	INNER JOIN fda."FDAObjectsScoreValue" b
		ON a."FDASystemsId" = b."FDASystemId"
		AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
	INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
		ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
	INNER JOIN fda."FDADataQualityMasterRules" d
		ON d."FDADataQualityRulesId" = c."MasterRuleId"
	WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
										AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
		AND d."DAMADimension" ILIKE "InDAMADimension"
		AND aa."SystemAliasName" ILIKE "InSystemName" 
		AND a."ObjectName" ILIKE "InObjectName"
	GROUP BY c."RuleName"
	ORDER BY "OutlierCount" DESC
	)X;
RETURN NEXT $6;

OPEN $7 FOR 

SELECT DISTINCT 
		c."MasterRuleId" AS "RuleId",
		aa."SystemAliasName" AS "SystemName",
		a."ObjectName",
		c."RuleName",
		'DataQualityRule' AS "RuleType",
		SUM("OutlierCount") AS "OutlierCount",
		STRING_AGG(DISTINCT "FDAObjectScoreId"::TEXT,',')"FDAObjectScoreId",
		LEFT(c."LastUpdatedOn"::TEXT,10) AS "ScoreRunDate"			
FROM fda."FDASystems" aa
INNER JOIN fda."FDASystemObjects" a
	ON aa."FDASystemsId" = a."FDASystemsId"
INNER JOIN fda."FDAObjectsScoreValue" b
	ON a."FDASystemsId" = b."FDASystemId"
	AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
	ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
INNER JOIN fda."FDADataQualityMasterRules" d
	ON d."FDADataQualityRulesId" = c."MasterRuleId"
WHERE c."LastUpdatedOn"	::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS') 
										AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
	AND d."DAMADimension" ILIKE "InDAMADimension"
	AND aa."SystemAliasName" ILIKE "InSystemName" 
	AND a."ObjectName" ILIKE "InObjectName"
GROUP BY a."ObjectName",c."MasterRuleId",c."RuleName",c."LastUpdatedOn",aa."SystemAliasName"
ORDER BY "OutlierCount" DESC;

RETURN NEXT $7;

END IF;

END IF;
END IF;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_DAMADashboard_V3"(
	"InSystemName" character varying,
	"InObjectName" character varying,
	"InFieldName" character varying,
	"InRuleName" character varying,
	"InDate" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

BEGIN

"InSystemName" := CONCAT('%',"InSystemName",'%');
"InObjectName" := CONCAT('%',"InObjectName",'%');
"InFieldName"  := CONCAT('%',"InFieldName",'%');
"InRuleName"   := CONCAT('%',"InRuleName",'%');

OPEN $6 FOR 

SELECT *,("ACCURACY_DQISCore" + "VALIDITY_DQISCore" + "TIMELINESS_DQISCore" + "COMPLETENESS_DQISCore" + "UNIQUENESS_DQISCore" + "CONSISTENCY_DQISCore") AS "OverallDQIScore"		
	FROM(SELECT SUM("1Day_ACCURACY_TotalCount")"OneDay_ACCURACY_TotalCount",
				SUM("1Day_ACCURACY_OutlierCount")"OneDay_ACCURACY_OutlierCount",
				SUM("7Days_ACCURACY_TotalCount")"SevenDays_ACCURACY_TotalCount",
				SUM("7Days_ACCURACY_OutlierCount")"SevenDays_ACCURACY_OutlierCount",
				COALESCE(((SUM("1Day_ACCURACY_TotalCount"))::FLOAT8 /NULLIF((SUM("1Day_ACCURACY_TotalCount") + SUM("1Day_ACCURACY_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "ACCURACY_DQISCore",
				SUM("1Day_VALIDITY_TotalCount")"OneDay_VALIDITY_TotalCount",
				SUM("1Day_VALIDITY_OutlierCount")"OneDay_VALIDITY_OutlierCount",
				SUM("7Days_VALIDITY_TotalCount")"SevenDays_VALIDITY_TotalCount",
				SUM("7Days_VALIDITY_OutlierCount")"SevenDays_VALIDITY_OutlierCount",
				COALESCE(((SUM("1Day_VALIDITY_TotalCount"))::FLOAT8 /NULLIF((SUM("1Day_VALIDITY_TotalCount") + SUM("1Day_VALIDITY_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "VALIDITY_DQISCore",
				SUM("1Day_TIMELINESS_TotalCount")"OneDay_TIMELINESS_TotalCount",
				SUM("1Day_TIMELINESS_OutlierCount")"OneDay_TIMELINESS_OutlierCount",
				SUM("7Days_TIMELINESS_TotalCount")"SevenDays_TIMELINESS_TotalCount",
				SUM("7Days_TIMELINESS_OutlierCount")"SevenDays_TIMELINESS_OutlierCount",
				COALESCE(((SUM("7Days_TIMELINESS_OutlierCount"))::FLOAT8 /NULLIF((SUM("7Days_TIMELINESS_OutlierCount") + SUM("1Day_TIMELINESS_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "TIMELINESS_DQISCore",
				SUM("1Day_COMPLETENESS_TotalCount")"OneDay_COMPLETENESS_TotalCount",
				SUM("1Day_COMPLETENESS_OutlierCount")"OneDay_COMPLETENESS_OutlierCount",
				SUM("7Days_COMPLETENESS_TotalCount")"SevenDays_COMPLETENESS_TotalCount",
				SUM("7Days_COMPLETENESS_OutlierCount")"SevenDays_COMPLETENESS_OutlierCount",
				COALESCE(((SUM("1Day_COMPLETENESS_TotalCount"))::FLOAT8 /NULLIF((SUM("1Day_COMPLETENESS_TotalCount") + SUM("1Day_COMPLETENESS_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "COMPLETENESS_DQISCore",				
				SUM("1Day_UNIQUENESS_TotalCount")"OneDay_UNIQUENESS_TotalCount",
				SUM("1Day_UNIQUENESS_OutlierCount")"OneDay_UNIQUENESS_OutlierCount",
				SUM("7Days_UNIQUENESS_TotalCount")"SevenDays_UNIQUENESS_TotalCount",
				SUM("7Days_UNIQUENESS_OutlierCount")"SevenDays_UNIQUENESS_OutlierCount",
				COALESCE(((SUM("1Day_UNIQUENESS_TotalCount"))::FLOAT8 /NULLIF((SUM("1Day_UNIQUENESS_TotalCount") + SUM("1Day_UNIQUENESS_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "UNIQUENESS_DQISCore",				
				SUM("1Day_CONSISTENCY_TotalCount")"OneDay_CONSISTENCY_TotalCount",
				SUM("1Day_CONSISTENCY_OutlierCount")"OneDay_CONSISTENCY_OutlierCount",
				SUM("7Days_CONSISTENCY_TotalCount")"SevenDays_CONSISTENCY_TotalCount",
				SUM("7Days_CONSISTENCY_OutlierCount")"SevenDays_CONSISTENCY_OutlierCount",
				COALESCE(((SUM("1Day_CONSISTENCY_TotalCount"))::FLOAT8 /NULLIF((SUM("1Day_CONSISTENCY_TotalCount") + SUM("1Day_CONSISTENCY_OutlierCount")),0)::FLOAT8),0)::NUMERIC(17,2) AS "CONSISTENCY_DQISCore"			
		FROM(SELECT (CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'ACCURACY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_ACCURACY_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'ACCURACY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_ACCURACY_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'ACCURACY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_ACCURACY_TotalCount",				
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'ACCURACY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_ACCURACY_OutlierCount",
					-------
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'VALIDITY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_VALIDITY_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'VALIDITY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_VALIDITY_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'VALIDITY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_VALIDITY_TotalCount",				
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'VALIDITY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_VALIDITY_OutlierCount",
					-------
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'TIMELINESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_TIMELINESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'TIMELINESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_TIMELINESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'TIMELINESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_TIMELINESS_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'TIMELINESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_TIMELINESS_OutlierCount",
					-------
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'COMPLETENESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_COMPLETENESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'COMPLETENESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_COMPLETENESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'COMPLETENESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_COMPLETENESS_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'COMPLETENESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_COMPLETENESS_OutlierCount",
					-------
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'UNIQUENESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_UNIQUENESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'UNIQUENESS' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_UNIQUENESS_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'UNIQUENESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_UNIQUENESS_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'UNIQUENESS' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_UNIQUENESS_OutlierCount",
					-------
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'CONSISTENCY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "1Day_CONSISTENCY_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'CONSISTENCY' THEN SUM(b."RowCount") ELSE 0 END)
						ELSE 0
					END) "7Days_CONSISTENCY_TotalCount",
					(CASE WHEN c."LastUpdatedOn"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN (CASE WHEN d."DAMADimension" = 'CONSISTENCY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "1Day_CONSISTENCY_OutlierCount",
					(CASE WHEN c."LastUpdatedOn"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
														AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date 
							THEN (CASE WHEN d."DAMADimension" = 'CONSISTENCY' THEN SUM(c."OutlierCount") ELSE 0 END)
						ELSE 0
					END) "7Days_CONSISTENCY_OutlierCount"
			FROM fda."FDASystems" aa
			INNER JOIN fda."FDASystemObjects" a
				ON aa."FDASystemsId" = a."FDASystemsId"
			INNER JOIN fda."FDAObjectsScoreValue" b
				ON a."FDASystemsId" = b."FDASystemId"
				AND  a."FDASystemObjectsId" = b."FDASystemObjectsId"
			INNER JOIN fda."FDAObjectScoreOutlierCountByCategory" c
				ON b."FDAObjectScoreValueId" = c."FDAObjectScoreId"
			INNER JOIN fda."FDADataQualityMasterRules" d
				ON d."FDADataQualityRulesId" = c."MasterRuleId"
			WHERE aa."SystemAliasName" ILIKE "InSystemName"
				AND a."ObjectName" ILIKE "InObjectName"
			GROUP BY  d."DAMADimension",c."OutlierCount",c."LastUpdatedOn"
		UNION
			SELECT 	0 "1Day_ACCURACY_TotalCount",
					0 "1Day_ACCURACY_OutlierCount",
					0 "7Days_ACCURACY_TotalCount",
					0 "7Days_ACCURACY_OutlierCount",
					(CASE WHEN "LastRefreshedDateTime"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM((CASE WHEN "Color" = 'GREEN' THEN 1 ELSE 0 END) + "GreenSLA")
						ELSE 0
					END)"1Day_TIMELINESS_TotalCount",
					(CASE WHEN "LastRefreshedDateTime"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
																	AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM((CASE WHEN "Color" = 'GREEN' THEN 1 ELSE 0 END) + "GreenSLA")
						ELSE 0
					END)"7Days_TIMELINESS_TotalCount",
					(CASE WHEN "LastRefreshedDateTime"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA")
						ELSE 0
					END)"1Day_TIMELINESS_OutlierCount",
					(CASE WHEN "LastRefreshedDateTime"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
																	AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM((CASE WHEN "Color" = 'RED' THEN 1 ELSE 0 END) + "RedSLA")
						ELSE 0
					END)"7Days_TIMELINESS_OutlierCount",
					0 "1Day_TIMELINESS_TotalCount",
					0 "1Day_TIMELINESS_OutlierCount",
					0 "7Days_TIMELINESS_TotalCount",
					0 "7Days_TIMELINESS_OutlierCount",
					0 "1Day_COMPLETENESS_TotalCount",
					0 "1Day_COMPLETENESS_OutlierCount",
					0 "7Days_COMPLETENESS_TotalCount",
					0 "7Days_COMPLETENESS_OutlierCount",
					0 "1Day_UNIQUENESS_TotalCount",
					0 "1Day_UNIQUENESS_OutlierCount",
					0 "7Days_UNIQUENESS_TotalCount",
					0 "7Days_UNIQUENESS_OutlierCount",
					0 "1Day_CONSISTENCY_TotalCount",
					0 "1Day_CONSISTENCY_OutlierCount",
					0 "7Days_CONSISTENCY_TotalCount",
					0 "7Days_CONSISTENCY_OutlierCount"
			FROM(SELECT b."LastRefreshedDateTime"::date,
						(CASE WHEN a."RefreshFrequency" = 'Monthly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 30 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Weekly' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 7 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Daily Exclude Weekend' AND CURRENT_DATE - CAST(b."LastRefreshedDateTime" AS DATE) > 1 THEN 'RED'
							WHEN a."RefreshFrequency" = 'Only Initial Refresh' THEN 'GREEN'
							ELSE 'GREEN' 
						END) "Color",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) = to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "GreenSLA",
						(CASE WHEN to_char(a."RefreshTime"::interval, 'HH24:MI'::text) <> to_char(b."LoadStartTime", 'HH24:MI'::text) 
								THEN 1
							ELSE 0
						END) AS "RedSLA"			
				FROM fda."FDASystems" a1
				INNER JOIN fda."FDASystemObjects" a
					ON a1."FDASystemsId" = a."FDASystemsId"
				INNER JOIN fda."FDAObjectsScoreValue" b
					ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
				WHERE a1."SystemAliasName" ILIKE "InSystemName"
					AND a."ObjectName" ILIKE "InObjectName"
				)X
			GROUP BY "LastRefreshedDateTime"
		UNION
			SELECT  (CASE WHEN "ReconciliationDate"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM("SourceAllokSeverity" + "TargetAllokSeverity")
						ELSE 0
					END)"1Day_ACCURACY_TotalCount",
					(CASE WHEN "ReconciliationDate"::date = (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
								THEN SUM("SourceCriticalSeverity" + "TargetCriticalSeverity")
						ELSE 0
					END)"1Days_ACCURACY_OutlierCount",
					(CASE WHEN "ReconciliationDate"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
																	AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM("SourceAllokSeverity" + "TargetAllokSeverity")
						ELSE 0
					END)"7Days_ACCURACY_TotalCount",
					(CASE WHEN "ReconciliationDate"::date BETWEEN ((COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date - INTERVAL '6 DAYS')
																	AND (COALESCE(NULLIF("InDate",''),CURRENT_DATE::text))::date
							THEN SUM("SourceCriticalSeverity" + "TargetCriticalSeverity")
						ELSE 0
					END)"7Days_ACCURACY_OutlierCount",
					0 "1Day_VALIDITY_TotalCount",
					0 "1Day_VALIDITY_OutlierCount",
					0 "7Days_VALIDITY_TotalCount",
					0 "7Days_VALIDITY_OutlierCount",
					0 "1Day_TIMELINESS_TotalCount",
					0 "1Day_TIMELINESS_OutlierCount",
					0 "7Days_TIMELINESS_TotalCount",
					0 "7Days_TIMELINESS_OutlierCount",
					0 "1Day_COMPLETENESS_TotalCount",
					0 "1Day_COMPLETENESS_OutlierCount",
					0 "7Days_COMPLETENESS_TotalCount",
					0 "7Days_COMPLETENESS_OutlierCount",
					0 "1Day_UNIQUENESS_TotalCount",
					0 "1Day_UNIQUENESS_OutlierCount",
					0 "7Days_UNIQUENESS_TotalCount",
					0 "7Days_UNIQUENESS_OutlierCount",
					0 "1Day_CONSISTENCY_TotalCount",
					0 "1Day_CONSISTENCY_OutlierCount",
					0 "7Days_CONSISTENCY_TotalCount",
					0 "7Days_CONSISTENCY_OutlierCount"
			FROM(SELECT bb."ReconciliationDate"::date,
						(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."AllokSeverity") ELSE 0 END) "SourceAllokSeverity",
						(CASE WHEN aa."AlertTypeInd" = 'SourceTargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "SourceCriticalSeverity",
						(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."AllokSeverity") ELSE 0 END) "TargetAllokSeverity",
						(CASE WHEN aa."AlertTypeInd" = 'TargetValue' THEN  SUM(bb."CriticalSeverity") ELSE 0 END) "TargetCriticalSeverity"
				FROM(SELECT "FDAAlertRulesId",
							"AlertTypeInd",
							split_part("AlertTag", '.'::text, 1) AS "SystemAliasName",
							(split_part("AlertTag", '.'::text, 2) || '.'::text) || split_part("AlertTag", '.'::text, 3) AS "ObjectName"
					FROM fda."FDAAlertRules"
					) aa
				LEFT JOIN(SELECT "FDAAlertRulesId",
								"ReconciliationDate",
								(CASE 
									WHEN "FDAAlertOutput"."Severity" = 1 THEN 1::bigint
									ELSE 0::bigint
								END) AS "CriticalSeverity",
								(CASE 
									WHEN "FDAAlertOutput"."Severity" = 9 THEN 1::bigint
									ELSE 0::bigint
								END) AS "AllokSeverity"
						FROM fda."FDAAlertOutput"
						) bb								
					ON aa."FDAAlertRulesId" = bb."FDAAlertRulesId"
				LEFT JOIN fda."FDASystems" cc 
					ON aa."SystemAliasName" = cc."SystemAliasName"
				LEFT JOIN fda."FDASystemObjects" dd 
					ON aa."ObjectName" = dd."ObjectName"
					AND cc."FDASystemsId" = dd."FDASystemsId"       
				WHERE cc."SystemAliasName" ILIKE "InSystemName"
					AND dd."ObjectName" ILIKE "InObjectName"							
				GROUP BY aa."AlertTypeInd",bb."ReconciliationDate"
				)X		
			GROUP BY "ReconciliationDate"
		)Y
	)Z;
	
RETURN NEXT $6;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_DAMAFieldRuleOutlier"(
	"InObjectScoreId" character varying,
	"InObjectName" character varying,
	"InRuleName" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

BEGIN
"InRuleName"   := CONCAT('%',"InRuleName",'%');
"InObjectName" := CONCAT('%',"InObjectName",'%');

OPEN $4 FOR

SELECT a."ObjectName",
	   b."FieldName",
	   SUM(d."OutlierCount") AS "OutlierCount",
	   e."RuleName",
	   d."MasterRuleId" AS "RuleId",
	   STRING_AGG(d."FDAObjectScoreId"::text,',') AS "FDAObjectScoreId"
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN fda."FDAObjectFieldsScoreValue" c
	ON b."FDASystemObjectFieldsId" = c."FDASystemObjectFieldsId"
INNER JOIN (SELECT "FDAObjectScoreOutlierCountByCategoryId",
					"FDAObjectScoreId",
					"FDAFieldScoreId",
					"OutlierCount",
					"LastUpdatedOn",
					"MasterRuleId",
					/*(CASE WHEN "RuleName" IN('Numeric DataType Check','Date DataType Check','Email DataType Check','Zip Code DataType Check') THEN 'DataTypeOutlier'
						WHEN "RuleName" IN ('Blank Check','Blank/NonBlank') THEN 'NullOutlier'
						WHEN "RuleName" IN ('Enumerated Value','Date Enumerated Value(Query)') THEN 'EnumerationCheckOutlier'
						WHEN "RuleName" = 'Date Distinct Check' THEN 'DistinctCheckOutlier'
						WHEN "RuleName" = 'Date Fixed static value' THEN 'FixedStaticValueOutlier'
						WHEN "RuleName" = 'Date Length Check' THEN 'FieldLengthCheckOutlier'
						WHEN "RuleName" = 'Possible Character' THEN 'InvalidCharacterOutlier'
						WHEN "RuleName" = 'Range of Values' THEN 'NumberRangeOutlier' 
					END) "RuleName"*/
					"RuleName"
			FROM  fda."FDAObjectScoreOutlierCountByCategory"
			) d
	ON c."FDAObjectFieldsScoreValueId" = d."FDAFieldScoreId"
INNER JOIN (SELECT "FDAObjectScoreOutlierCountByCategoryId",
                (CASE WHEN "RuleName" = 'Numeric DataType Check' THEN 'Number Outlier'
                      WHEN "RuleName" = 'Date DataType Check' THEN 'Date Outlier'
                      WHEN "RuleName" = 'Range of Values' THEN 'Threshold Outlier'
                      WHEN "RuleName" = 'Email DataType Check' THEN 'Email Outlier'
                      WHEN "RuleName" = 'Zip Code DataType Check' THEN 'ZipCode Outlier'
                      WHEN "RuleName" = 'Enumerated Value' THEN 'Enumerated Value Outlier'
					  WHEN "RuleName" = 'Date Permitted Value' THEN 'Permitted Value Outlier'
                      WHEN "RuleName" = 'Possible Character' THEN 'Possible Character Outlier'
                      WHEN "RuleName" = 'Date Enumerated Value(Query)' THEN 'Enumerated Query Outlier'
                      WHEN "RuleName" IN ('Blank/NonBlank','Blank Check') THEN 'Blank Row Outlier'
                      WHEN "RuleName" = 'Date Length Check' THEN 'Length Check Outlier'
                      WHEN "RuleName" = 'Date Distinct Check' THEN 'Distinct Check Outlier'
                      WHEN "RuleName" = 'Date Date Range' THEN 'Date Range Outlier'
                      WHEN "RuleName" = 'User Criteria' THEN 'User Criteria Outlier'
					  WHEN "RuleName" = 'Forbidden Value' THEN 'ForbiddenValueOutlier'
					  WHEN "RuleName" = 'Null Check' THEN 'NullCheckOutlier'
					  WHEN "RuleName" = 'DataType Check' THEN 'InvalidIntegerOutlier'
                   END)"RuleName"
           FROM  fda."FDAObjectScoreOutlierCountByCategory"
		   ) e
	ON d."FDAObjectScoreOutlierCountByCategoryId" = e."FDAObjectScoreOutlierCountByCategoryId"
INNER JOIN fda."FDADataQualityMasterRules" f
	ON f."FDADataQualityRulesId" = d."MasterRuleId"
WHERE d."FDAObjectScoreId"::TEXT IN ( SELECT "Result" FROM UNNEST(string_to_array("InObjectScoreId", ',')) "Result")
	AND a."ObjectName" ILIKE "InObjectName"
	AND d."RuleName"   ILIKE "InRuleName"
GROUP BY a."ObjectName",b."FieldName",e."RuleName",d."MasterRuleId";

RETURN NEXT $4;

END;
$BODY$;
-------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."fn_OutlierColorByRuletrendInc"(
	"IndType" character varying,
	"InRuleName" character varying,
	"InObjectScoreId" bigint,
	"InObjectId" bigint)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$

DECLARE "lvRowCountOutlierInd" VARCHAR(1);
		"lvFreshnessOutlierInd" VARCHAR(1);
		"lvRuleOutllierInd" VARCHAR(1);
		
		"Result1" BIGINT;
		"Result2" BIGINT;
		"Result3" BIGINT;
		"Result4" text;
		"Result" text;
		"pyScoreId" BIGINT;
		
		"lvFreshness" BIGINT;
		"lvNoOfRowCountOutlier" BIGINT;
		"lvRefreshFrequency" VARCHAR(100);
		"lvCreatedDateTime"  VARCHAR(100);
		"lvRefreshTime"  VARCHAR(100);
		"lvRefreshTimePlusOne"  VARCHAR(100);
		
		"lvPYRules" TEXT;
		"lvRuleType" TEXT;
		"GreyResult" TEXT;
		"lvLastUpdatedDateTime" TEXT;
		"lvNewBaseLineDateTime" TEXT;
		"lvNewBaseLineInd" VARCHAR(5);
	
BEGIN
			
	SELECT "FDAObjectScoreValueId",rank () over( order by "FDAObjectScoreValueId" )
	INTO "pyScoreId"
	FROM(SELECT a."FDAObjectScoreValueId"
		 FROM fda."FDAObjectsScoreValue" a
		 INNER JOIN fda."FDASystemObjects" b
			ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
		 WHERE a."FDAObjectScoreValueId" <= "InObjectScoreId"
		 	AND a."FDASystemObjectsId" = "InObjectId"
		 ORDER BY a."FDAObjectScoreValueId" DESC
		 LIMIT 2
		)x
	LIMIT 1;
	
-------------------------(System_Object Indicator)-------------------------------------------

	SELECT  COALESCE(NULLIF(b."RowCountOutlierInd",'N'),a."RowCountOutlierInd",'N') AS "RowCountOutlierInd",
			COALESCE(NULLIF(b."FreshnessOutlierInd",'N'),a."FreshnessOutlierInd",'N') AS "FreshnessOutlierInd",
			COALESCE(NULLIF(b."RuleOutllierInd",'N'),a."RuleOutllierInd",'N') AS "RuleOutllierInd"		   
	INTO "lvRowCountOutlierInd","lvFreshnessOutlierInd","lvRuleOutllierInd"
	FROM fda."FDASystems" a 
	INNER JOIN fda."FDASystemObjects" b 
		ON a."FDASystemsId" = b."FDASystemsId" 
	WHERE "FDASystemObjectsId" =  "InObjectId";
	
--------------OBJECT SCORE COLOR-------------------	
IF "IndType" = 'SCORE' THEN

	RAISE NOTICE 'FROM IF BLOCK';

SELECT 
	STRING_AGG("RuleType",',') AS "RuleType"
INTO "lvRuleType"
FROM(SELECT DISTINCT
	(CASE WHEN "RuleType" IN ('Enumerated Value','Date Range','Length Check') AND ("LeftFieldValue" > '' AND "RightFieldValue" > '') THEN
			(CASE WHEN "RuleType" = 'Date Range' THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" = 'Length Check'  THEN 'Date'||' '||"RuleType" 
			 ELSE "RuleType" END)
		WHEN "RuleType" IN ('DataType Check','Blank/NonBlank','Permitted Value','Forbidden Value','Null Check','Distinct Check','Enumerated Value(Query)','User Criteria') AND "LeftFieldValue" > '' THEN 
			(CASE WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Zip Code','Email') THEN "LeftFieldValue" ||' '||"RuleType" 
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Number') THEN 'Numeric DataType Check'
			 	WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" IN ('Valid Integer') THEN 'DataType Check'
				WHEN "RuleType" IN ('DataType Check') AND "LeftFieldValue" NOT IN ('Zip Code','Email','Valid Number') THEN 'Date'||' '||"RuleType" 
			 	WHEN "RuleType" IN ('Enumerated Value(Query)','Distinct Check','Permitted Value') THEN 'Date'||' '||"RuleType"
			 	ELSE  "RuleType" END )
		WHEN "RuleType" IN ('Possible Character','Range of Values') AND ("LeftFieldValue" > '' OR "RightFieldValue" > '') 
			THEN "RuleType"
	 END)"RuleType" 
FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystemObjectFields" b
	ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
	AND a."FDASystemsId" = b."FDASystemsId"
INNER JOIN fda."FDADataQualityMasterRulesDetails" c
	ON b."MasterRuleId" = c."FDADataQualityRulesId"
WHERE a."FDASystemObjectsId" = "InObjectId":: BIGINT
AND b."AutoMetricsInd" = 'true'
)x
WHERE x."RuleType" IS NOT NULL;
------------------------------

	
IF "pyScoreId" > 0 THEN 
		
					
		SELECT  SUM("OutlierCount") "OutlierCount"
		FROM  fda."FDAObjectScoreOutlierCountByCategory"
        WHERE "FDAObjectScoreId" = "pyScoreId"
			AND  LOWER(COALESCE("RuleName",'NULL')) IN (SELECT LOWER("Rule")
														FROM UNNEST(STRING_TO_ARRAY("lvRuleType",','))"Rule"
														)
				
		INTO 	
			"Result1";
			
END IF;
	
IF "InObjectScoreId" > 0 THEN 			
		SELECT  SUM("OutlierCount") "OutlierCount"
		FROM  fda."FDAObjectScoreOutlierCountByCategory"
        WHERE "FDAObjectScoreId" = "InObjectScoreId"
			AND  LOWER(COALESCE("RuleName",'NULL')) IN (SELECT LOWER("Rule")
														FROM UNNEST(STRING_TO_ARRAY("lvRuleType",','))"Rule"
														)
				
		INTO 	
			"Result2";
			
END IF;

	SELECT CAST(COALESCE("Freshness",'0') AS INTEGER),COALESCE("LastUpdatedDateTime"::TEXT,'')
		INTO "lvFreshness","lvLastUpdatedDateTime"
	FROM fda."FDAObjectsScoreValue"
	WHERE "FDAObjectScoreValueId" = "InObjectScoreId"; 
	
	SELECT COUNT(*)
		INTO "lvNoOfRowCountOutlier"
	FROM fda."FDAObjectsScoreValue"
	WHERE "FDASystemObjectsId" = "InObjectId"
		AND "FDAObjectScoreValueId" = "InObjectScoreId"
		AND "RowCountOutlierInd" = 'Y';
	
	SELECT COALESCE("RefreshFrequency",'Daily Exclude Weekend'),COALESCE("NewBaseLineDateTime"::TEXT,'') as "NewBaseLineDateTime"
		INTO "lvRefreshFrequency","lvNewBaseLineDateTime"
	FROM fda."FDASystemObjects" 
	WHERE "FDASystemObjectsId" = "InObjectId";
		
		
	SELECT 
					(CASE 
						WHEN   (("lvNoOfRowCountOutlier" >= 1 AND "lvRowCountOutlierInd" = 'Y') OR ("lvFreshnessOutlierInd" = 'Y' AND "lvRefreshFrequency" = 'Daily' AND "lvFreshness" > 1) )
							OR (("lvNoOfRowCountOutlier" >= 1 AND "lvRowCountOutlierInd" = 'Y') OR ("lvFreshnessOutlierInd" = 'Y' AND "lvRefreshFrequency" = 'Daily Exclude Weekend' AND  "lvFreshness" > 1))
							OR (("lvNoOfRowCountOutlier" >= 1 AND "lvRowCountOutlierInd" = 'Y') OR ("lvFreshnessOutlierInd" = 'Y' AND "lvRefreshFrequency" = 'Weekly' AND "lvFreshness" > 7 ))
							OR (("lvNoOfRowCountOutlier" >= 1 AND "lvRowCountOutlierInd" = 'Y') OR ("lvFreshnessOutlierInd" = 'Y' AND "lvRefreshFrequency" = 'Monthly' AND "lvFreshness" > 30 ))
							THEN 1
						WHEN 
							   (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Daily' AND "lvFreshness" = 1 ))
							OR (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Daily' AND "lvFreshness" = 0 ))
							OR (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Daily Exclude Weekend' AND  "lvFreshness" = 1 ))
							OR (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Daily Exclude Weekend' AND  "lvFreshness" = 0 ))
							OR (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Weekly' AND ("lvFreshness" BETWEEN 0 AND 7 ) ))
							OR (("lvNoOfRowCountOutlier" = 0 AND "lvRowCountOutlierInd" = 'N') OR  ("lvFreshnessOutlierInd" = 'N' AND "lvRefreshFrequency" = 'Monthly' AND ("lvFreshness" BETWEEN 0 AND 30) ))
							THEN 3
						ELSE 3
					END)
					
					INTO 
						"Result3"
					;
					
	"Result4":=(SELECT (CASE 
							WHEN ( COALESCE("Result2",0) > 0 OR COALESCE("Result2",0) = 0 ) AND "lvRuleOutllierInd" = 'N' THEN  'GREEN'
							WHEN COALESCE("Result2",0) > 0 AND COALESCE("Result1",0) = COALESCE("Result2",0) AND  "InObjectScoreId" = "pyScoreId"  AND "lvRuleOutllierInd" = 'Y' THEN 'RED'
							WHEN COALESCE("Result2",0) > 0 AND COALESCE("Result1",0) <> COALESCE("Result2",0) AND "InObjectScoreId" <> "pyScoreId" AND "lvRuleOutllierInd" = 'Y' THEN 'RED'
							WHEN "Result2" > 0 AND  "Result1" = "Result2" AND "InObjectScoreId" <> "pyScoreId" AND "lvRuleOutllierInd" = 'Y' THEN 'ORANGE'
							--WHEN "Result2" > 0 AND  "Result1" = "Result2" AND "InObjectScoreId" <> "pyScoreId" AND "lvRuleOutllierInd" = 'Y' THEN 'RED'
							ELSE 'GREEN' 
						END)
				);
				
				
			    
	"Result":= (SELECT (CASE 
							WHEN "Result4" = 'RED' OR  COALESCE("Result3",0) = 1 THEN 'RED'
							WHEN "Result4" = 'ORANGE' OR  COALESCE("Result3",0) = 3 THEN 'GREEN'
							ELSE 'GREEN' 
						END)
				);

---------------------------------------------------
ELSE	
	
	RAISE NOTICE 'FROM ELSE BLOCK';
	
	SELECT COALESCE("NewBaseLineDateTime"::TEXT,'') as "NewBaseLineDateTime",COALESCE("NewBaseLineInd",'N')
		INTO "lvNewBaseLineDateTime","lvNewBaseLineInd"
	FROM fda."FDASystemObjects" 
	WHERE "FDASystemObjectsId" = "InObjectId";
	
	SELECT COALESCE("LastUpdatedDateTime"::TEXT,'')
	INTO "lvLastUpdatedDateTime"
	FROM fda."FDAObjectsScoreValue"
	WHERE "FDAObjectScoreValueId" = "InObjectScoreId"; 

IF "pyScoreId" > 0 AND "InRuleName" = 	'Blank/NonBlank' THEN 
		
			SELECT SUM("OutlierCount")
                FROM (SELECT  COALESCE(SUM("OutlierCount"),0) "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "pyScoreId"
				AND LOWER(COALESCE("RuleName",'NULL')) = LOWER('Blank Check')
                UNION 
                SELECT  COALESCE(SUM("OutlierCount"),0) "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "pyScoreId"
				AND LOWER(COALESCE("RuleName",'NULL')) = LOWER('Blank/NonBlank') )X	
				
		INTO 	
			"Result1";
ELSE		
		SELECT  SUM("OutlierCount") "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "pyScoreId"
				AND  LOWER(COALESCE("RuleName",'NULL')) = LOWER("InRuleName")
				
		INTO 	
			"Result1";
			
END IF;
	
IF 	"InRuleName" = 	'Blank/NonBlank'
THEN			
	       SELECT SUM("OutlierCount")
                FROM (SELECT  COALESCE(SUM("OutlierCount"),0) "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "InObjectScoreId"
				AND LOWER(COALESCE("RuleName",'NULL')) = LOWER('Blank Check')
                UNION 
                SELECT  COALESCE(SUM("OutlierCount"),0) "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "InObjectScoreId"
				AND LOWER(COALESCE("RuleName",'NULL')) = LOWER('Blank/NonBlank') )X	
				
		INTO 	
			"Result2";
		
ELSE		
		SELECT  SUM("OutlierCount") "OutlierCount"
				FROM  fda."FDAObjectScoreOutlierCountByCategory"
                WHERE "FDAObjectScoreId" = "InObjectScoreId"
				AND  LOWER(COALESCE("RuleName",'NULL')) = LOWER("InRuleName")
				
		INTO 	
			"Result2";
			
END IF;

"Result":= (SELECT    (CASE 
							WHEN COALESCE("Result2",0) = 0 THEN  'GREEN'
							WHEN COALESCE("Result2",0) > 0 AND COALESCE("Result1",0) = COALESCE("Result2",0) AND  "InObjectScoreId" = "pyScoreId"  THEN 'RED'
							WHEN COALESCE("Result2",0) > 0 AND COALESCE("Result1",0) <> COALESCE("Result2",0) AND "InObjectScoreId" <> "pyScoreId"  THEN 'RED'
							WHEN COALESCE("Result2",0) > 0 AND "Result1" = "Result2" AND "InObjectScoreId" <> "pyScoreId"  THEN 'ORANGE'
							ELSE 'GREEN'
						END)
					
			);
END IF;	
	
RETURN COALESCE("Result",'GREEN');
        

END;
$BODY$;
------------------------------------------------(END)-------------------------------------------------------------------------------


