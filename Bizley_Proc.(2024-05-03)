alter table fda."FDASystems"
add column "ConnectionOption" character varying(100);
-----------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_GetAlertRulesDetails_V3"(
	"InFDAAlertRulesId" bigint,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "OutAlertTypeInd" VARCHAR(20) ;
"OutAlertTypeCategory" VARCHAR(20) ;
"OutSourceInfoEntryType" VARCHAR(10) ;
"OutTargetInfoEntryType" VARCHAR(10) ;
"OutAlertName" VARCHAR(100) ;
"OutAlertDescription" VARCHAR ;

"OutFDASourceSystemConfigName" VARCHAR(200) ; 
"OutFDASourceSystemDataCheckProgName" VARCHAR(200) ; 
"OutFDASystemSourceName" VARCHAR(2000) ;
"OutSourceQueryString" TEXT ;
"OutFDASourceTableName" VARCHAR(200) ;
"OutFDASourceTableColumnName" TEXT ;
"OutFDAGroupBySourceTableColumnName" TEXT ;
"OutFDASourceCondition" TEXT ;

"OutFDATargetSystemConfigName" VARCHAR(200) ;
"OutFDATargetSystemDataCheckProgName" VARCHAR(200) ; 
"OutFDASystemTargetName" VARCHAR(2000) ;
"OutTargetQueryString" TEXT ;
"OutFDATargetTableName" VARCHAR(200) ;
"OutFDATargetTableColumnName" TEXT ;
"OutFDAGroupByTargetTableColumnName" TEXT ;
"OutFDATargetCondition" TEXT ;

"OutAllowNewSegmentInd" VARCHAR(1) ;

"OutThresholdType" VARCHAR(20) ;

"OutLowerThresholdType" VARCHAR(100) ;
"OutUpperThresholdType" VARCHAR(100) ;
"OutLowerThresholdValue" BIGINT ;
"OutUpperThresholdValue" BIGINT ;
"OutBaseLineValueType" VARCHAR(100) ;
"OutBaseLineValue" VARCHAR(100) ;

"OutTargetColumnLevelThreshold" VARCHAR ;
"OutCheckForSeasonalityInd" VARCHAR(1) ;
"OutCheckForSeasonalityValue" VARCHAR(100) ;

"OutUserEmailTobeNotfied" VARCHAR(2000) ;
"OutPrimaryOwnerEmail" VARCHAR(2000) ;
"OutSecondaryOwnerEmail" VARCHAR(2000) ;
"OutApplicationName" VARCHAR(200);
"OutSourceQueryName" VARCHAR(200);
"OutTargetQueryName" VARCHAR(200);
"OutAlertTag" TEXT;
"OutStoredComparedInd" VARCHAR(5);
"OutMaxRecordCount" bigint ;

"OutSourceSchemaName" VARCHAR(200);
"OutTargetSchemaName" VARCHAR(200);

"OutSourceFirstRowAsColumn" VARCHAR(100);
"OutSourceRowSeparator" 	VARCHAR(100);
"OutSourceColumnSeparator"  VARCHAR(100);
								
"OutTargetFirstRowAsColumn" VARCHAR(100);
"OutTargetRowSeparator"		VARCHAR(100);
"OutTargetColumnSeparator"  VARCHAR(100);

"OutSourceApiName" VARCHAR(200);
"OutSourceApi" TEXT ;
"OutTargetApiName" VARCHAR(200);
"OutTargetApi" TEXT ;
"OutSourceSchema" VARCHAR(100);
"OutTargetSchema" VARCHAR(100);

"OutFDAGroupBySourceTableColumnDataType" TEXT;
"OutFDAGroupByTargetTableColumnDataType"  TEXT;

"OutFDAGroupBySourceSecondaryTableColumnName" TEXT ;
"OutFDAGroupByTargetSecondaryTableColumnName" TEXT ;

BEGIN

SELECT
a."AlertTypeInd",
a."AlertTypeCategory",
a."SourceInfoEntryType",
a."TargetInfoEntryType",
a."AlertName",
a."AlertDescription",
COALESCE(b."SystemAliasName",'') "SystemName",
b."SystemConnectionName",
b."FDADataCheckProcName",
"SourceQueryName",
COALESCE(a."SourceQuery",'') "SourceQuery",
COALESCE(split_part(c."ObjectName",'.',1),'') "SourceSchema",
COALESCE(c."ObjectName",'') "ObjectName",
 c."SchemaName" ,

COALESCE(e."SystemConnectionName",'') "SystemConnectionName",
e."FDADataCheckProcName",
COALESCE(e."SystemAliasName",'') "SystemName",
"TargetQueryName",
COALESCE(a."TargetQuery",'') "TargetQuery",
SPLIT_PART(f."ObjectName",'.',1) AS "TargetSchema",
f."ObjectName",
f."SchemaName",

a."AllowNewSegmentInd",

a."ThresholdType",
a."LowerThresholdType",
a."UpperThresholdType",
a."LowerThresholdValue",
a."UpperThresholdValue",
a."BaseLineValueType",
COALESCE(a."BaseLineValue",'1'),

a."CheckForSeasonalityInd",
a."CheckForSeasonalityValue",

( SELECT STRING_AGG( COALESCE(h."Email", ' '), ',')
  FROM   fda."FDANotifiedOwnerEmail" h
  WHERE "FDAAlertRulesId"= "InFDAAlertRulesId" ),

( SELECT STRING_AGG( COALESCE(i."Email", ' '), ',')
  FROM  fda."FDAPrimaryOwnerEmail" i
  WHERE "FDAAlertRulesId"= "InFDAAlertRulesId"),

( SELECT STRING_AGG( COALESCE(j."Email", ' '), ',')
  FROM   fda."FDASecondaryOwnerEmail" j
  WHERE "FDAAlertRulesId"= "InFDAAlertRulesId"),

(SELECT "ApplicationName" 
 FROM fda."FDAApplications" 
 WHERE "FDAApplicationsId" = a."ApplicationId"),
 a."AlertTag",
 "StoredComparedInd",
 a."MaxRecordCount",
COALESCE(c."FirstRowAsColumn",'')  "SourceFirstRowAsColumn",
COALESCE(c."RowSeparator",'') "SourceRowSeparator",
COALESCE(c."ColumnSeparator",'') "SourceColumnSeparator",
COALESCE(c."FirstRowAsColumn",'')  "TargetFirstRowAsColumn",
COALESCE(c."RowSeparator",'') "TargetRowSeparator",
COALESCE(c."ColumnSeparator",'') "TargetColumnSeparator",
"SourceApiName",
COALESCE(a."SourceApiURL",'') "SourceApiURL",
"TargetApiName",
COALESCE(a."TargetApiURL",'') "TargetApiURL"
 
 
INTO 
	"OutAlertTypeInd",
	"OutAlertTypeCategory",
	"OutSourceInfoEntryType",
	"OutTargetInfoEntryType",
	"OutAlertName",
	"OutAlertDescription",
	"OutFDASystemSourceName",
	"OutFDASourceSystemConfigName",
	"OutFDASourceSystemDataCheckProgName",
	"OutSourceQueryName",
	"OutSourceQueryString",
	"OutSourceSchema",
	"OutFDASourceTableName",
	"OutSourceSchemaName",
	"OutFDATargetSystemConfigName",
	"OutFDATargetSystemDataCheckProgName",
	"OutFDASystemTargetName",
	"OutTargetQueryName",
	"OutTargetQueryString",
	"OutTargetSchema",
	"OutFDATargetTableName",
	"OutTargetSchemaName",
	"OutAllowNewSegmentInd",
	"OutThresholdType",
	"OutLowerThresholdType",
	"OutUpperThresholdType",
	"OutLowerThresholdValue",
	"OutUpperThresholdValue",
	"OutBaseLineValueType",
	"OutBaseLineValue",
	"OutCheckForSeasonalityInd",
	"OutCheckForSeasonalityValue",
	"OutUserEmailTobeNotfied",
	"OutPrimaryOwnerEmail",
	"OutSecondaryOwnerEmail",
	"OutApplicationName",
	"OutAlertTag",
	"OutStoredComparedInd",
	"OutMaxRecordCount",
	"OutSourceFirstRowAsColumn",
	"OutSourceRowSeparator" ,	
	"OutSourceColumnSeparator" ,
	"OutTargetFirstRowAsColumn",
	"OutTargetRowSeparator"	,	
	"OutTargetColumnSeparator",
	"OutSourceApiName",
	"OutSourceApi",
	"OutTargetApiName",
	"OutTargetApi"
	
	
	
	   FROM fda."FDAAlertRules" a
			LEFT OUTER JOIN fda."FDASystems" b
				ON b."FDASystemsId" = a."FDASystemSourceId"
			LEFT OUTER JOIN fda."FDASystemObjects" c
				ON c."FDASystemObjectsId" = a."FDASourceTableId"
		   LEFT OUTER JOIN fda."FDASystemObjectFields" d
				ON d."FDASystemObjectFieldsId" = a."FDASourceTableColumnId"
		   LEFT OUTER JOIN fda."FDASystemObjectFields" d1
				ON d1."FDASystemObjectFieldsId" = a."GroupBySourceColumnId"
		   LEFT OUTER JOIN fda."FDASystems" e
				ON e."FDASystemsId" = a."FDASystemTargeteId"
		   LEFT OUTER JOIN fda."FDASystemObjects" f
				ON f."FDASystemObjectsId" = a."FDATargetTableId"
		   LEFT OUTER JOIN fda."FDASystemObjectFields" g
				ON g."FDASystemObjectFieldsId" = a."FDATargetTableColumnId"
		   LEFT OUTER JOIN fda."FDASystemObjectFields" g1
				ON g1."FDASystemObjectFieldsId" = a."GroupByTargetColumnId"
		   WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

IF "OutSourceInfoEntryType" = 'Wizard'
THEN
-------------------------------------------Source TableColumn------------------------------------------- 
	/*SELECT STRING_AGG(CONCAT(COALESCE("FieldName",' '),'^',"DataType",'^',"Function"),',')
	INTO 
		"OutFDASourceTableColumnName" 	
	FROM
     (SELECT a."Position",
        b."FieldName",
        a."DataType",
		a."Function"
	FROM fda."FDAAlertRulesSourceColumn" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."FDASourceTableColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	  AND a."Status" = 'true'
    ORDER BY a."Position" ASC ) x;*/
	SELECT STRING_AGG(CONCAT(COALESCE("FieldName",' '),'^',"DataType",'^',"Function"),',')
	INTO 
		"OutFDASourceTableColumnName" 	
	FROM
     (SELECT "SourceColumnName" AS "FieldName" ,"SourceDataType" AS "DataType","Function","Position"::int
	FROM fda."FDAAlertRulesColumnMapping" 
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
	  AND "Status" = 'true'
    ORDER BY "Position" ASC ) x;
	

-------------------------------------------Source GroupByColumn------------------------------------------- 
	SELECT STRING_AGG( COALESCE("FieldName", ' '), ',') 
	INTO 
	"OutFDAGroupBySourceTableColumnName"
    FROM (SELECT a."Position" ::int,
           b."FieldName"
	FROM fda."FDAAlertRulesSourceSegment" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."GroupBySourceColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	AND b."ObsoleteInMetaDataInd" <> 'DELETED'
    ORDER BY a."Position" ASC) x;
	
	-------------------------------------------Source Secondary GroupByColumn------------------------------------------- 	
	SELECT STRING_AGG( COALESCE("FieldName", ' '), ',') 
	INTO 
	"OutFDAGroupBySourceSecondaryTableColumnName"
    FROM (SELECT a."Position" ::int,
           b."FieldName"
	FROM fda."FDAAlertRulesSourceSegmentSecondary" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."GroupBySourceColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	AND b."ObsoleteInMetaDataInd" <> 'DELETED'
    ORDER BY a."Position" ASC) x;
	
	-------------------------------------------Source GroupByColumnDataType------------------------------------------- 	
	
	SELECT  STRING_AGG( COALESCE("DataType", ' '), ',')
	INTO "OutFDAGroupBySourceTableColumnDataType"
	FROM(SELECT "DataType"
	FROM fda."FDAAlertRulesSourceSegment"
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
	ORDER BY "Position" ASC)x;
-------------------------------------------Source Condition-------------------------------------------	
	SELECT DISTINCT 
		STRING_AGG( COALESCE(CONCAT("DataType",',',"ColumnName",',',"Condition",',',"Value"), ' '), '|') 
	INTO "OutFDASourceCondition"
	FROM
		(SELECT DISTINCT
			COALESCE(NULLIF(b."UserOverwriteDatatype",''),b."FieldDataType") "DataType",
			c."ColumnName" "ColumnName",
			c."Condition" "Condition",
			c."Value" "Value"
		FROM fda."FDAAlertRules" a
		INNER JOIN fda."FDASystemObjectFields" b
			ON a."FDASystemSourceId" = b."FDASystemsId"
			AND a."FDASourceTableId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAAlertConditionSource" c
			ON a."FDAAlertRulesId" = c."FDAAlertRulesId"
			AND b."FieldName" = c."ColumnName"
		WHERE c."FDAAlertRulesId"  = "InFDAAlertRulesId"
			AND b."ObsoleteInMetaDataInd" <> 'DELETED'
		) x;

END IF;

IF "OutSourceInfoEntryType" = 'Editor' OR "OutSourceInfoEntryType" = 'Api'
THEN
--PRINT 'SOURCE Editor'
-------------------------------------------Source TableColumn------------------------------------------- 
		  
	SELECT STRING_AGG( CONCAT("SourceColumnName",'^',"DataType",'^',"Function"), ',')  
	INTO "OutFDASourceTableColumnName"
	FROM(SELECT COALESCE("SourceColumnName", ' ') as "SourceColumnName","DataType","Function","Position"
	FROM fda."FDAAlertRulesSourceColumn"
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
	AND "Status" = 'true'
	ORDER BY "Position")x;
-------------------------------------------Source GroupByColumn------------------------------------------- 	
	SELECT STRING_AGG( COALESCE("GroupBySourceColumnName", ' '), ',')  
	INTO "OutFDAGroupBySourceTableColumnName" 
	FROM fda."FDAAlertRulesSourceSegment"
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
-------------------------------------------Source Secondary GroupByColumn------------------------------------------- 	
	SELECT STRING_AGG( COALESCE("GroupBySourceColumnName", ' '), ',')  
	INTO "OutFDAGroupBySourceSecondaryTableColumnName" 
	FROM fda."FDAAlertRulesSourceSegmentSecondary"
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

-------------------------------------------Source Condition-------------------------------------------	
	SELECT STRING_AGG( COALESCE(CONCAT("DataType",',',"ColumnName",',',"Condition",',',"Value"), ' '), '|')
	INTO "OutFDASourceCondition"
    FROM   fda."FDAAlertConditionSource"
    WHERE "FDAAlertRulesId" = "InFDAAlertRulesId" ;

END IF;

IF "OutTargetInfoEntryType" = 'Editor' OR "OutTargetInfoEntryType" = 'Api'
THEN
--PRINT 'Target Editor'
-------------------------------------------Target TableColumn------------------------------------------- 
	
	  
	SELECT STRING_AGG( CONCAT("TargetColumnName",'^',"DataType",'^',"Function"), ',')
	INTO "OutFDATargetTableColumnName" 
	from (SELECT COALESCE("TargetColumnName", ' ') as "TargetColumnName" ,"DataType","Function","Position"
	FROM fda."FDAAlertRulesTargetColumn" 
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
	  AND "Status" = 'true'
	  order by "Position")x;
-------------------------------------------Target GroupByColumn------------------------------------------- 		
	SELECT STRING_AGG( COALESCE("GroupByTargetColumnName", ' '), ',')
	INTO "OutFDAGroupByTargetTableColumnName"    
	FROM fda."FDAAlertRulesTargetSegment" 
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
-------------------------------------------Target Secondary GroupByColumn------------------------------------------- 		
	SELECT STRING_AGG( COALESCE("GroupByTargetColumnName", ' '), ',')
	INTO "OutFDAGroupByTargetSecondaryTableColumnName"    
	FROM fda."FDAAlertRulesTargetSegmentSecondary" 
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
-----------------------------------------Target Condition----------------------------------------------		
	SELECT STRING_AGG( COALESCE(CONCAT("DataType",',',"ColumnName",',',"Condition",',',"Value"), ' '), '|')
	INTO "OutFDATargetCondition"
    FROM  fda."FDAAlertConditionTarget"
    WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

END IF;

IF "OutTargetInfoEntryType" = 'Wizard'
THEN
--PRINT 'Target Wizard'
	IF UPPER("OutAlertTypeInd") = UPPER('SourceTargetValue') THEN 
-------------------------------------------Target TableColumn------------------------------------------- 	
	/*SELECT STRING_AGG(CONCAT(COALESCE("FieldName",' '),'^',"DataType",'^',"Function"),',')
	INTO "OutFDATargetTableColumnName"  	
	FROM
     (SELECT a."Position",
        b."FieldName",
        a."DataType",a."Function"
	FROM fda."FDAAlertRulesTargetColumn" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."FDATargetTableColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	  AND a."Status" = 'true'
    ORDER BY a."Position" ASC ) x; */
	
		SELECT STRING_AGG(CONCAT(COALESCE("FieldName",' '),'^',"DataType",'^',"Function"),',')
		INTO "OutFDATargetTableColumnName"  	
		FROM
		(SELECT "TargetDataType" AS "DataType","TargetColumnName" AS "FieldName",
			"Function","Position"::int
		FROM fda."FDAAlertRulesColumnMapping" 
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND "Status" = 'true'
		ORDER BY "Position" ASC ) x;
	ELSE 
		SELECT STRING_AGG(CONCAT(COALESCE("FieldName",' '),'^',"DataType",'^',"Function"),',')
		INTO "OutFDATargetTableColumnName"  
		FROM (SELECT 
			"Position"::int ,"Function",
			"TargetColumnName" AS "FieldName",
			COALESCE("DataType",'') "DataType"
		FROM fda."FDAAlertRulesTargetColumn"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND "Status" = 'true'
		ORDER BY "Position" ASC ) x;
	END IF;
-------------------------------------------Target GroupByColumn------------------------------------------- 	
	SELECT STRING_AGG( COALESCE("FieldName", ' '), ',') 
	INTO "OutFDAGroupByTargetTableColumnName"
    from (SELECT a."Position"::int,
           b."FieldName"
	FROM fda."FDAAlertRulesTargetSegment" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."GroupByTargetColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	AND b."ObsoleteInMetaDataInd" <> 'DELETED'
    ORDER BY a."Position" ASC) x;
	
-------------------------------------------Target Secondary GroupByColumn------------------------------------------- 	
	SELECT STRING_AGG( COALESCE("FieldName", ' '), ',') 
	INTO "OutFDAGroupByTargetSecondaryTableColumnName"
    from (SELECT a."Position"::int,
           b."FieldName"
	FROM fda."FDAAlertRulesTargetSegmentSecondary" a
	INNER JOIN fda."FDASystemObjectFields" b 
		ON a."GroupByTargetColumnId" = b."FDASystemObjectFieldsId"
	WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
	AND b."ObsoleteInMetaDataInd" <> 'DELETED'
    ORDER BY a."Position" ASC) x;
	
	SELECT  STRING_AGG( COALESCE("DataType", ' '), ',')
	INTO "OutFDAGroupByTargetTableColumnDataType"    
	FROM(SELECT "DataType"
	FROM fda."FDAAlertRulesTargetSegment"
	WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
	ORDER BY "Position" ASC)x;
-----------------------------------------Target Condition----------------------------------------------	
	SELECT DISTINCT 
		STRING_AGG( COALESCE(CONCAT("DataType",',',"ColumnName",',',"Condition",',',"Value"), ' '), '|') 
	INTO "OutFDATargetCondition"
	FROM
		(SELECT DISTINCT
			COALESCE(NULLIF(b."UserOverwriteDatatype",''),b."FieldDataType") "DataType",
			c."ColumnName" "ColumnName",
			c."Condition" "Condition",
			c."Value" "Value"
		FROM fda."FDAAlertRules" a
		INNER JOIN fda."FDASystemObjectFields" b
			ON a."FDASystemTargeteId" = b."FDASystemsId"
			AND a."FDATargetTableId" = b."FDASystemObjectsId"
		INNER JOIN fda."FDAAlertConditionTarget" c
			ON a."FDAAlertRulesId" = c."FDAAlertRulesId"
			AND b."FieldName" = c."ColumnName"
		WHERE c."FDAAlertRulesId"  = "InFDAAlertRulesId"
			AND b."ObsoleteInMetaDataInd" <> 'DELETED'
		) x ;
	
	
END IF;

OPEN $2 FOR --OPEN THE REF CURSOR
 
SELECT "OutAlertTypeInd" ,
		"OutAlertTypeCategory" ,
		"OutSourceInfoEntryType" ,
		"OutTargetInfoEntryType" ,
		COALESCE("OutAlertName",'') "OutAlertName" ,
		COALESCE("OutAlertDescription",'') "OutAlertDescription",
		"OutAlertTag",
		
		"OutFDASourceSystemConfigName",
		"OutFDASourceSystemDataCheckProgName",
		COALESCE("OutFDASystemSourceName",'') "OutFDASystemSourceName" ,
		COALESCE("OutSourceQueryName",'') "OutSourceQueryName",
		COALESCE("OutSourceQueryString",'') "OutSourceQueryString" ,
		COALESCE("OutFDASourceTableName",'')"OutFDASourceTableName" ,
		COALESCE("OutSourceSchemaName",'') "OutSourceSchemaName",
		"OutFDASourceTableColumnName",
		"OutFDAGroupBySourceTableColumnName" ,
		"OutFDASourceCondition" ,
		
		"OutFDATargetSystemConfigName" ,
		"OutFDATargetSystemDataCheckProgName" ,
		COALESCE("OutFDASystemTargetName",'') "OutFDASystemTargetName" ,
		COALESCE("OutTargetQueryName",'') "OutTargetQueryName",
		COALESCE("OutTargetQueryString",'') "OutTargetQueryString" ,
		COALESCE("OutFDATargetTableName",'') "OutFDATargetTableName" ,
		COALESCE("OutTargetSchemaName",'') "OutTargetSchemaName",
		"OutFDATargetTableColumnName" ,
		"OutFDAGroupByTargetTableColumnName" ,
		"OutFDATargetCondition" ,
		
		"OutAllowNewSegmentInd",
		
		"OutThresholdType" ,
		
		"OutLowerThresholdType" ,
		"OutUpperThresholdType" ,
		"OutLowerThresholdValue" ,
		"OutUpperThresholdValue" ,
		"OutBaseLineValueType" ,
		"OutBaseLineValue" ,
		
		"OutTargetColumnLevelThreshold" ,
		"OutCheckForSeasonalityInd",
		"OutCheckForSeasonalityValue",
		
		"OutUserEmailTobeNotfied" ,
		"OutPrimaryOwnerEmail" ,
		"OutSecondaryOwnerEmail" ,
		"OutApplicationName" ,
		"OutStoredComparedInd",
		"OutMaxRecordCount",
		
		"OutSourceFirstRowAsColumn",
		"OutSourceRowSeparator" ,	
		"OutSourceColumnSeparator" ,
		"OutTargetFirstRowAsColumn",
		"OutTargetRowSeparator"	,	
		"OutTargetColumnSeparator"
		
		"OutSourceApiName",
		"OutSourceApi",
		"OutTargetApiName",
		"OutTargetApi",
		"OutSourceSchema" ,
		"OutTargetSchema",
		"OutFDAGroupBySourceTableColumnDataType",
		"OutFDAGroupByTargetTableColumnDataType",
		"OutFDAGroupBySourceSecondaryTableColumnName",
		"OutFDAGroupByTargetSecondaryTableColumnName";
RETURN NEXT $2;

END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListAlertOutputSourceAndTargetValueWithSeviorityAdvance_V2"(
	"InFDAAlertOutputId" bigint,
	"InFDAAlertRulesId" bigint,
	"InOffSet" bigint,
	"InLimit" bigint,
	"InOrderByColumnName" character varying,
	"InOrderBy" character varying,
	"InFromDate" character varying,
	"InToDate" character varying,
	"InTabInd" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE 
"SourceType" VARCHAR(10);
"TargetType" VARCHAR(10);
"lvThresholdType" VARCHAR(20);
"lvAlertTypeInd" VARCHAR(30);
DECLARE 
"SourceSegment1" VARCHAR(50);
"SourceSegment2" VARCHAR(50);
"SourceSegment3" VARCHAR(50);
"SourceSegment4" VARCHAR(50);
"SourceSegment5" VARCHAR(50);
"TargetSegment1" VARCHAR(50);
"TargetSegment2" VARCHAR(50);
"TargetSegment3" VARCHAR(50);
"TargetSegment4" VARCHAR(50);
"TargetSegment5" VARCHAR(50);
"OutTotalRecordCount" INT;
		
DECLARE	
"OutAlertName" TEXT;
"OutAlertDescription" TEXT;
"OutNotes" TEXT;
"OutAlertInd" VARCHAR(1);
"OutNewBaseLineInd" VARCHAR(1);
"OutConfirmedByUser" VARCHAR(1);
"OutThreshold" TEXT;
"OutTIMEGMT" TEXT;
"OutAlertStatus" Text;
"OutSegmentCountStatus" Text;
"OutSegmentCountColorInd" Text;
"OutSegmentCountCriticalStatus" Text;
"OutSummaryStatus" Text;

"OutThreshold1"  VARCHAR(100);
"OutThreshold2"  VARCHAR(100);
"OutThreshold3"  VARCHAR(100);
"OutThreshold4"  VARCHAR(100);
"OutThreshold5"  VARCHAR(100);
"OutThreshold6"  VARCHAR(100);
"OutThreshold7"  VARCHAR(100);
"OutThreshold8"  VARCHAR(100);
"OutThreshold9"  VARCHAR(100);
"OutThreshold10" VARCHAR(100);
"OutThreshold11" VARCHAR(100);
"OutThreshold12" VARCHAR(100);
"OutThreshold13" VARCHAR(100);
"OutThreshold14" VARCHAR(100);
"OutThreshold15" VARCHAR(100);
"OutThreshold16" VARCHAR(100);
"OutThreshold17" VARCHAR(100);
"OutThreshold18" VARCHAR(100);
"OutThreshold19" VARCHAR(100);
"OutThreshold20" VARCHAR(100);

"OutSegmentName1" VARCHAR(100);
"OutSegmentName2" VARCHAR(100);
"OutSegmentName3" VARCHAR(100);
"OutSegmentName4" VARCHAR(100);
"OutSegmentName5" VARCHAR(100);

"OutSourceColumnName1"  VARCHAR(100);
"OutTargetColumnName1"  VARCHAR(100);
"OutSourceColumnName2"  VARCHAR(100);
"OutTargetColumnName2"  VARCHAR(100);
"OutSourceColumnName3"  VARCHAR(100);
"OutTargetColumnName3"  VARCHAR(100);
"OutSourceColumnName4"  VARCHAR(100);
"OutTargetColumnName4"  VARCHAR(100);
"OutSourceColumnName5"  VARCHAR(100);
"OutTargetColumnName5"  VARCHAR(100);
"OutSourceColumnName6"  VARCHAR(100);
"OutTargetColumnName6"  VARCHAR(100);
"OutSourceColumnName7"  VARCHAR(100);
"OutTargetColumnName7"  VARCHAR(100);
"OutSourceColumnName8"  VARCHAR(100);
"OutTargetColumnName8"  VARCHAR(100);
"OutSourceColumnName9"  VARCHAR(100);
"OutTargetColumnName9"  VARCHAR(100);
"OutSourceColumnName10"  VARCHAR(100);
"OutTargetColumnName10"  VARCHAR(100);
"OutSourceColumnName11"  VARCHAR(100);
"OutTargetColumnName11"  VARCHAR(100);
"OutSourceColumnName12"  VARCHAR(100);
"OutTargetColumnName12"  VARCHAR(100);
"OutSourceColumnName13"  VARCHAR(100);
"OutTargetColumnName13"  VARCHAR(100);
"OutSourceColumnName14"  VARCHAR(100);
"OutTargetColumnName14"  VARCHAR(100);
"OutSourceColumnName15"  VARCHAR(100);
"OutTargetColumnName15"  VARCHAR(100);
"OutSourceColumnName16"  VARCHAR(100);
"OutTargetColumnName16"  VARCHAR(100);
"OutSourceColumnName17"  VARCHAR(100);
"OutTargetColumnName17"  VARCHAR(100);
"OutSourceColumnName18"  VARCHAR(100);
"OutTargetColumnName18"  VARCHAR(100);
"OutSourceColumnName19"  VARCHAR(100);
"OutTargetColumnName19"  VARCHAR(100);
"OutSourceColumnName20"  VARCHAR(100);
"OutTargetColumnName20"  VARCHAR(100);

"OutSourceTargetValue1DifferencePercent" VARCHAR(10);
"OutSourceTargetValue2DifferencePercent" VARCHAR(10);
"OutSourceTargetValue3DifferencePercent" VARCHAR(10);
"OutSourceTargetValue4DifferencePercent" VARCHAR(10);
"OutSourceTargetValue5DifferencePercent" VARCHAR(10);
"OutSourceTargetValue6DifferencePercent" VARCHAR(10);
"OutSourceTargetValue7DifferencePercent" VARCHAR(10);
"OutSourceTargetValue8DifferencePercent" VARCHAR(10);
"OutSourceTargetValue9DifferencePercent" VARCHAR(10);
"OutSourceTargetValue10DifferencePercent" VARCHAR(10);
"OutSourceTargetValue11DifferencePercent" VARCHAR(10);
"OutSourceTargetValue12DifferencePercent" VARCHAR(10);
"OutSourceTargetValue13DifferencePercent" VARCHAR(10);
"OutSourceTargetValue14DifferencePercent" VARCHAR(10);
"OutSourceTargetValue15DifferencePercent" VARCHAR(10);
"OutSourceTargetValue16DifferencePercent" VARCHAR(10);
"OutSourceTargetValue17DifferencePercent" VARCHAR(10);
"OutSourceTargetValue18DifferencePercent" VARCHAR(10);
"OutSourceTargetValue19DifferencePercent" VARCHAR(10);
"OutSourceTargetValue20DifferencePercent" VARCHAR(10);

DECLARE 
"ResultPercentage1"  VARCHAR(100);
"ResultPercentage2"  VARCHAR(100);
"ResultPercentage3"  VARCHAR(100);
"ResultPercentage4"  VARCHAR(100);
"ResultPercentage5"  VARCHAR(100);
"ResultPercentage6"  VARCHAR(100);
"ResultPercentage7"  VARCHAR(100);
"ResultPercentage8"  VARCHAR(100);
"ResultPercentage9"  VARCHAR(100);
"ResultPercentage10" VARCHAR(100);
"ResultPercentage11" VARCHAR(100);
"ResultPercentage12" VARCHAR(100);
"ResultPercentage13" VARCHAR(100);
"ResultPercentage14" VARCHAR(100);
"ResultPercentage15" VARCHAR(100);
"ResultPercentage16" VARCHAR(100);
"ResultPercentage17" VARCHAR(100);
"ResultPercentage18" VARCHAR(100);
"ResultPercentage19" VARCHAR(100);
"ResultPercentage20" VARCHAR(100);

DECLARE 
"SelectQueryString" TEXT;
"FromString" TEXT;
"WhereConditionString" TEXT;
"WhereConditionString2" TEXT;
"OrderByString" TEXT;

DECLARE
SourceSegmentCount BIGINT;
TargetSegmentCount BIGINT;
SourceColumnCount BIGINT;
TargetColumnCount BIGINT;
"lvBaseLineInd" VARCHAR(20);
"lvBaseLineValue" BIGINT;
"lvAlertType" VARCHAR(20);
"SecondarySegmentCount" BIGINT;

BEGIN

"InTabInd" := upper("InTabInd");

SELECT "AlertTypeInd"
	INTO "lvAlertType"
FROM fda."FDAAlertRules" 
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";
		
SELECT 
"AlertTypeInd",
CAST("BaseLineValue" AS BIGINT),
"BaseLineValueType",
"SourceInfoEntryType",
"TargetInfoEntryType",
"ThresholdType"
/*CONCAT(
(CASE 
	WHEN "LowerThresholdType" = 'Percentage' THEN CONCAT(CAST("LowerThresholdValue" AS NUMERIC(17,1)),'% LCL')
	WHEN "LowerThresholdType" = 'StandardDeviation' THEN CONCAT(CAST("LowerThresholdValue" AS NUMERIC(17,1)),'σ LCL')
	WHEN "LowerThresholdType" = 'Absolute' THEN  CONCAT("LowerThresholdValue",' LCL')
	ELSE 'No LCL'
END),
'-',
(CASE 
	WHEN "UpperThresholdType" = 'Percentage' THEN CONCAT(CAST("UpperThresholdValue" AS NUMERIC(17,1)),'% UCL')
	WHEN "UpperThresholdType" = 'StandardDeviation' THEN CONCAT(CAST("UpperThresholdValue" AS NUMERIC(17,1)),'σ UCL')
	WHEN "UpperThresholdType" = 'Absolute' THEN  CONCAT("UpperThresholdValue",'UCL')
	ELSE 'No UCL'
 END))*/
INTO 
"lvAlertTypeInd",
"lvBaseLineValue",
"lvBaseLineInd",
"SourceType",
"TargetType",
"lvThresholdType"
--"OutThreshold"
FROM fda."FDAAlertRules"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

SELECT COALESCE("ThresholdInfo",'') 
INTO "OutThreshold"
FROM fda."FDAAlertOutput"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
AND "FDAAlertOutputId" = "InFDAAlertOutputId";

RAISE NOTICE 'VALUE: %','11111';
---------------------------------------------COLUMN AND SEGMENT COUNT----------------------------------------
SELECT COUNT(*) 
INTO SourceSegmentCount
FROM fda."FDAAlertRulesSourceSegment"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";

SELECT COUNT(*) 
INTO TargetSegmentCount
FROM fda."FDAAlertRulesTargetSegment"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";

SELECT COUNT(*) 
INTO SourceColumnCount
FROM fda."FDAAlertRulesSourceColumn"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId"
AND "Status" = 'true';

SELECT COUNT(*) 
INTO TargetColumnCount
FROM fda."FDAAlertRulesTargetColumn"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId"
AND "Status" = 'true';

SELECT COUNT(*) 
INTO "SecondarySegmentCount"
FROM fda."FDAAlertRulesTargetSegmentSecondary"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

--------------------------------------------------------------------------------------------------------------
IF LOWER("lvThresholdType") = 'customize' THEN

SELECT COALESCE(MAX(CASE WHEN RowNum = 1 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 2 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 3 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 4 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 5 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 6 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 7 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 8 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 9 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 10 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 11 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 12 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 13 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 14 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 15 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 16 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 17 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 18 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 19 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 20 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL')
INTO
	"OutThreshold1", 
	"OutThreshold2", 
	"OutThreshold3", 
	"OutThreshold4", 
	"OutThreshold5",
	"OutThreshold6", 
	"OutThreshold7", 
	"OutThreshold8", 
	"OutThreshold9", 
	"OutThreshold10",
	"OutThreshold11",
	"OutThreshold12",
	"OutThreshold13",
	"OutThreshold14",
	"OutThreshold15",
	"OutThreshold16",
	"OutThreshold17",
	"OutThreshold18",
	"OutThreshold19",
	"OutThreshold20"
FROM(SELECT	DISTINCT 
			RowNum :: int,
			"ThresholdInfo"	   
	FROM(SELECT SPLIT_PART("VALUE",'(~)',1)::int RowNum,
			   SPLIT_PART("VALUE",'(~)',2) "ThresholdInfo"
		FROM UNNEST(STRING_TO_ARRAY("OutThreshold",'(^)')) "VALUE"
		)X
	)Y;
	
ELSE 

    "OutThreshold1"  := "OutThreshold";
	"OutThreshold2"  := "OutThreshold";
	"OutThreshold3"  := "OutThreshold";
	"OutThreshold4"  := "OutThreshold";
	"OutThreshold5"  := "OutThreshold";
	"OutThreshold6"  := "OutThreshold";
	"OutThreshold7"  := "OutThreshold";
	"OutThreshold8"  := "OutThreshold";
	"OutThreshold9"  := "OutThreshold";
	"OutThreshold10" := "OutThreshold";
	"OutThreshold11" := "OutThreshold";
	"OutThreshold12" := "OutThreshold";
	"OutThreshold13" := "OutThreshold";
	"OutThreshold14" := "OutThreshold";
	"OutThreshold15" := "OutThreshold";
	"OutThreshold16" := "OutThreshold";
	"OutThreshold17" := "OutThreshold";
	"OutThreshold18" := "OutThreshold";
	"OutThreshold19" := "OutThreshold";
	"OutThreshold20" := "OutThreshold";
END IF;

------------------------------------------------------------FETCH SEGMENT NAMES---------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------FETCH SOURCE SEGMENT
--IF COALESCE(SourceSegmentCount,0) > 0 THEN 
	IF UPPER("SourceType") = 'EDITOR' THEN
	RAISE NOTICE 'SourceType: %','SourceType EDITOR';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT DISTINCT 
			a."GroupBySourceColumnName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesSourceSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesSourceSegment" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT DISTINCT 
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			  FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
					FROM fda."FDAAlertOutputByAdvancedSegment"
					WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
					AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				)Y
			) X
		)Z;
	
	ELSE
	RAISE NOTICE 'SourceType: %','SourceType wizard';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT  b."FieldName" "SegmentName",
				ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesSourceSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesSourceSegment" a,
			fda."FDASystemObjectFields" b
		WHERE a."GroupBySourceColumnId" = b."FDASystemObjectFieldsId"
		AND a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;
		*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegment"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				)Y
			) X
		) Z;
	
	
	END IF;
--END IF;

RAISE NOTICE 'TargetSegment1: %',"SourceSegment1";
		RAISE NOTICE 'TargetSegment2: %',"SourceSegment2";
		RAISE NOTICE 'TargetSegment3: %',"SourceSegment3";
		RAISE NOTICE 'TargetSegment4: %',"SourceSegment4";
		RAISE NOTICE 'TargetSegment5: %',"SourceSegment5";

RAISE NOTICE 'VALUE: %','FETCH TARGET SEGMENTS';
------------------------------------------------------------FETCH TARGET SEGMENTS

--IF COALESCE(TargetSegmentCount,0) > 0 THEN

	IF UPPER("TargetType") = 'EDITOR' THEN
	
	RAISE NOTICE 'TargetType: %','TargetType EDITOR';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegment1",
		"TargetSegment2",
		"TargetSegment3",
		"TargetSegment4",
		"TargetSegment5"
		FROM 
		(
		SELECT  DISTINCT 
			a."GroupByTargetColumnName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesTargetSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesTargetSegment" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegment"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				)Y
			) X
		) Z;
			
		RAISE NOTICE 'TargetSegment1: %',"TargetSegment1";
		RAISE NOTICE 'TargetSegment2: %',"TargetSegment2";
		RAISE NOTICE 'TargetSegment3: %',"TargetSegment3";
		RAISE NOTICE 'TargetSegment4: %',"TargetSegment4";
		RAISE NOTICE 'TargetSegment5: %',"TargetSegment5";
	
	ELSE
	
			RAISE NOTICE 'TargetType: %','TargetType WIZARD';

		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegment1",	
		"TargetSegment2",
		"TargetSegment3",
		"TargetSegment4",
		"TargetSegment5"
		FROM
		(
		SELECT  
			b."FieldName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesTargetSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesTargetSegment" a,
			fda."FDASystemObjectFields" b
		WHERE a."GroupByTargetColumnId" = b."FDASystemObjectFieldsId"
		AND a."FDAAlertRulesId" = "InFDAAlertRulesId"
		) X;
		*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegment1",	
		"TargetSegment2",
		"TargetSegment3",
		"TargetSegment4",
		"TargetSegment5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
			
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegment"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				)Y
			) X
		) Z;
	
	END IF;

--END IF;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 "OutSegmentName1" := COALESCE("SourceSegment1","TargetSegment1");
 "OutSegmentName2" := COALESCE("SourceSegment2","TargetSegment2");
 "OutSegmentName3" := COALESCE("SourceSegment3","TargetSegment3");
 "OutSegmentName4" := COALESCE("SourceSegment4","TargetSegment4");
 "OutSegmentName5" := COALESCE("SourceSegment5","TargetSegment5");
 
 
 
RAISE NOTICE 'OutSegmentName1: %',"OutSegmentName1";
RAISE NOTICE 'OutSegmentName2: %',"OutSegmentName2";
RAISE NOTICE 'OutSegmentName3: %',"OutSegmentName3";
RAISE NOTICE 'OutSegmentName4: %',"OutSegmentName4";
RAISE NOTICE 'OutSegmentName5: %',"OutSegmentName5";

-----------------------------------------------------------COLUMN NAMES---------------------------------------------------------------------------------------------------------
RAISE NOTICE 'VALUE: %','33333';
-----------------------------------------------------------FETCH SOURCE COLUMNS

IF COALESCE(SourceColumnCount,0) > 0 THEN 

	IF UPPER("SourceType") = 'EDITOR' THEN
	
		/*SELECT 
		MAX(CASE WHEN RowNum = 1  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END)
		INTO 
		"OutSourceColumnName1" ,
		"OutSourceColumnName2" ,
		"OutSourceColumnName3" ,
		"OutSourceColumnName4" ,
		"OutSourceColumnName5" ,
		"OutSourceColumnName6" ,
		"OutSourceColumnName7" ,
		"OutSourceColumnName8" ,
		"OutSourceColumnName9" ,
		"OutSourceColumnName10",
		"OutSourceColumnName11",
		"OutSourceColumnName12",
		"OutSourceColumnName13",
		"OutSourceColumnName14",
		"OutSourceColumnName15",
		"OutSourceColumnName16",
		"OutSourceColumnName17",
		"OutSourceColumnName18",
		"OutSourceColumnName19",
		"OutSourceColumnName20"
		FROM
		(
		SELECT DISTINCT 
		RANK () OVER ( ORDER BY a."Position" ASC ) RowNum,
		a."SourceColumnName" "ColumnName",
		a."Function" "Function"
		FROM fda."FDAAlertRulesSourceColumn" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		AND a."Status" = 'true'
		) X; */
		SELECT 
			MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2  THEN "ColumnName"  ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 10  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 12  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 13  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 14  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 15  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 16  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 17  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 18  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 19  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 20  THEN "ColumnName" ELSE NULL END)
		INTO 
			"OutSourceColumnName1" ,
			"OutSourceColumnName2" ,
			"OutSourceColumnName3" ,
			"OutSourceColumnName4" ,
			"OutSourceColumnName5" ,
			"OutSourceColumnName6" ,
			"OutSourceColumnName7" ,
			"OutSourceColumnName8" ,
			"OutSourceColumnName9" ,
			"OutSourceColumnName10",
			"OutSourceColumnName11",
			"OutSourceColumnName12",
			"OutSourceColumnName13",
			"OutSourceColumnName14",
			"OutSourceColumnName15",
			"OutSourceColumnName16",
			"OutSourceColumnName17",
			"OutSourceColumnName18",
			"OutSourceColumnName19",
			"OutSourceColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT RowNum,
				SPLIT_PART("ColumnName",'^',2) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegment"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId")x
		)y;
	
	ELSE
	
		/*SELECT  
		MAX(CASE WHEN RowNum = 1  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) 
		INTO 
		"OutSourceColumnName1" ,
		"OutSourceColumnName2" ,
		"OutSourceColumnName3" ,
		"OutSourceColumnName4" ,
		"OutSourceColumnName5" ,
		"OutSourceColumnName6" ,
		"OutSourceColumnName7" ,
		"OutSourceColumnName8" ,
		"OutSourceColumnName9" ,
		"OutSourceColumnName10",
		"OutSourceColumnName11",
		"OutSourceColumnName12",
		"OutSourceColumnName13",
		"OutSourceColumnName14",
		"OutSourceColumnName15",
		"OutSourceColumnName16",
		"OutSourceColumnName17",
		"OutSourceColumnName18",
		"OutSourceColumnName19",
		"OutSourceColumnName20"
		FROM
		(
		SELECT  
		RANK () OVER ( ORDER BY a."Position" ASC ) RowNum,
		a."SourceColumnName" "SegmentName",
		a."Function" "Function"
		FROM fda."FDAAlertRulesSourceColumn" a
		WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
		AND a."Status" = 'true'
		) X;*/
		SELECT 
			MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2  THEN "ColumnName"  ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 10  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 12  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 13  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 14  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 15  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 16  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 17  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 18  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 19  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 20  THEN "ColumnName" ELSE NULL END)
		INTO 
			"OutSourceColumnName1" ,
			"OutSourceColumnName2" ,
			"OutSourceColumnName3" ,
			"OutSourceColumnName4" ,
			"OutSourceColumnName5" ,
			"OutSourceColumnName6" ,
			"OutSourceColumnName7" ,
			"OutSourceColumnName8" ,
			"OutSourceColumnName9" ,
			"OutSourceColumnName10",
			"OutSourceColumnName11",
			"OutSourceColumnName12",
			"OutSourceColumnName13",
			"OutSourceColumnName14",
			"OutSourceColumnName15",
			"OutSourceColumnName16",
			"OutSourceColumnName17",
			"OutSourceColumnName18",
			"OutSourceColumnName19",
			"OutSourceColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				SPLIT_PART("ColumnName",'^',2) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegment"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId")x
		)y;
	
	END IF;

END IF;

--------------------------------------------------------------FETCH TARGET COLUMNS

IF COALESCE(TargetColumnCount,0) > 0 THEN

	IF UPPER("TargetType") = 'EDITOR' THEN
	
		SELECT 
		MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN "ColumnName" ELSE NULL END) 
		INTO 
		"OutTargetColumnName1",
		"OutTargetColumnName2",
		"OutTargetColumnName3",
		"OutTargetColumnName4",
		"OutTargetColumnName5",
		"OutTargetColumnName6",
		"OutTargetColumnName7",
		"OutTargetColumnName8",
		"OutTargetColumnName9",
		"OutTargetColumnName10",
		"OutTargetColumnName11",
		"OutTargetColumnName12",
		"OutTargetColumnName13",
		"OutTargetColumnName14",
		"OutTargetColumnName15",
		"OutTargetColumnName16",
		"OutTargetColumnName17",
		"OutTargetColumnName18",
		"OutTargetColumnName19",
		"OutTargetColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				COALESCE(NULLIF(SPLIT_PART("ColumnName",'^',3),''),SPLIT_PART("ColumnName",'^',2)) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegment"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId")x
		)y;
	
	ELSE
	
		SELECT  
		MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN "ColumnName" ELSE NULL END) 
		INTO 
		"OutTargetColumnName1",
		"OutTargetColumnName2",
		"OutTargetColumnName3",
		"OutTargetColumnName4",
		"OutTargetColumnName5",
		"OutTargetColumnName6",
		"OutTargetColumnName7",
		"OutTargetColumnName8",
		"OutTargetColumnName9",
		"OutTargetColumnName10",
		"OutTargetColumnName11",
		"OutTargetColumnName12",
		"OutTargetColumnName13",
		"OutTargetColumnName14",
		"OutTargetColumnName15",
		"OutTargetColumnName16",
		"OutTargetColumnName17",
		"OutTargetColumnName18",
		"OutTargetColumnName19",
		"OutTargetColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				COALESCE(NULLIF(SPLIT_PART("ColumnName",'^',3),''),SPLIT_PART("ColumnName",'^',2)) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegment"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId")x
		)y;
	
	END IF;

END IF;

RAISE NOTICE 'VALUE: %','4444';

IF COALESCE("OutTargetColumnName1",'') = '' AND COALESCE("OutTargetColumnName2",'') = '' 
THEN
RAISE NOTICE 'VALUE: %','row count block';
	"OutSourceColumnName1" := COALESCE("OutSourceColumnName1",'Row Count');
	"OutTargetColumnName1" := COALESCE("OutTargetColumnName1",'Row Count');
END IF;
IF COALESCE("OutSourceColumnName1",'') = '' AND COALESCE("OutTargetColumnName1",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName1",' ( Last Run )') 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName1",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName1",' ( AVG of Last ',"lvBaseLineValue",' Run )')  END )
	INTO "OutSourceColumnName1"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName1",' ( Latest Run )') 
	INTO "OutTargetColumnName1";
END IF;
IF COALESCE("OutSourceColumnName2",'') = '' AND COALESCE("OutTargetColumnName2",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN CONCAT("OutTargetColumnName2",' ( Last Run )') 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName2",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName2",' (AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName2"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName2",' ( Latest Run )')  
	INTO "OutTargetColumnName2";
	
END IF;

IF COALESCE("OutSourceColumnName3",'') = '' AND COALESCE("OutTargetColumnName3",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN CONCAT("OutTargetColumnName3",' ( Last Run )')
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName3",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName3",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName3"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName3",' ( Latest Run )') 
	INTO "OutTargetColumnName3";
	
END IF;
IF COALESCE("OutSourceColumnName4",'') = '' AND COALESCE("OutTargetColumnName4",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName4",' ( Last Run )' )
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName4",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName4",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName4"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName4",' ( Latest Run )') 
	INTO "OutTargetColumnName4";
	
END IF;

IF COALESCE("OutSourceColumnName5",'') = '' AND COALESCE("OutTargetColumnName5",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName5",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName5",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName5",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName5"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName5",' ( Latest Run )')  
	INTO "OutTargetColumnName5";
END IF;

IF COALESCE("OutSourceColumnName6",'') = '' AND COALESCE("OutTargetColumnName6",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName6",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName6",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName6",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName6"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName6",' ( Latest Run )')  
	INTO "OutTargetColumnName6";
END IF;

IF COALESCE("OutSourceColumnName7",'') = '' AND COALESCE("OutTargetColumnName7",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName7",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName7",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName7",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName7"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName7",' ( Latest Run )')  
	INTO "OutTargetColumnName7";
END IF;

IF COALESCE("OutSourceColumnName8",'') = '' AND COALESCE("OutTargetColumnName8",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName8",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName8",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName8",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName8"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName8",' ( Latest Run )')  
	INTO "OutTargetColumnName8";
END IF;

IF COALESCE("OutSourceColumnName9",'') = '' AND COALESCE("OutTargetColumnName9",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName9",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName9",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName9",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName9"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName9",' ( Latest Run )')  
	INTO "OutTargetColumnName9";
END IF;

IF COALESCE("OutSourceColumnName10",'') = '' AND COALESCE("OutTargetColumnName10",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName10",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName10",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName10",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName10"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName10",' ( Latest Run )')  
	INTO "OutTargetColumnName10";
END IF;

IF COALESCE("OutSourceColumnName11",'') = '' AND COALESCE("OutTargetColumnName11",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName11",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName11",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName11",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName11"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName11",' ( Latest Run )')  
	INTO "OutTargetColumnName11";
END IF;

IF COALESCE("OutSourceColumnName12",'') = '' AND COALESCE("OutTargetColumnName12",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName12",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName12",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName12",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName12"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName12",' ( Latest Run )')  
	INTO "OutTargetColumnName12";
END IF;

IF COALESCE("OutSourceColumnName13",'') = '' AND COALESCE("OutTargetColumnName13",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName13",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName13",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName13",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName13"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName13",' ( Latest Run )')  
	INTO "OutTargetColumnName13";
END IF;

IF COALESCE("OutSourceColumnName14",'') = '' AND COALESCE("OutTargetColumnName14",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName14",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName14",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName14",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName14"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName14",' ( Latest Run )')  
	INTO "OutTargetColumnName14";
END IF;

IF COALESCE("OutSourceColumnName15",'') = '' AND COALESCE("OutTargetColumnName15",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName15",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName15",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName15",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName15"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName15",' ( Latest Run )')  
	INTO "OutTargetColumnName15";
END IF;

IF COALESCE("OutSourceColumnName16",'') = '' AND COALESCE("OutTargetColumnName16",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName16",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName16",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName16",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName16"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName16",' ( Latest Run )')  
	INTO "OutTargetColumnName16";
END IF;

IF COALESCE("OutSourceColumnName17",'') = '' AND COALESCE("OutTargetColumnName17",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName17",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName17",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName17",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName17"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName17",' ( Latest Run )')  
	INTO "OutTargetColumnName17";
END IF;

IF COALESCE("OutSourceColumnName18",'') = '' AND COALESCE("OutTargetColumnName18",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName18",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName18",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName18",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName18"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName18",' ( Latest Run )')  
	INTO "OutTargetColumnName18";
END IF;

IF COALESCE("OutSourceColumnName19",'') = '' AND COALESCE("OutTargetColumnName19",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName19",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName19",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName19",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName19"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName19",' ( Latest Run )')  
	INTO "OutTargetColumnName19";
END IF;

IF COALESCE("OutSourceColumnName20",'') = '' AND COALESCE("OutTargetColumnName20",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName20",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName20",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName20",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName20"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName20",' ( Latest Run )')  
	INTO "OutTargetColumnName20";
END IF;

RAISE NOTICE 'VALUE: %','55555';
----------------------------------------------------------------------------------------------------------------------------------------------------------
"SelectQueryString" := CONCAT(' 
                SELECT *,(CASE WHEN ',"SecondarySegmentCount",' > 0 AND UPPER(''',"lvAlertTypeInd",''') != UPPER(''TargetValue'') AND  "CritIcalInd" = ''Y'' THEN ''Y''
							ELSE ''N'' END) "DrillThroughInd"
				FROM
				(
				SELECT c."FDAAlertOutputByAdvancedSegmentId",
                       c."FDAAlertOutputId",
                       SUBSTRING(CAST(c."ReconciliationDate" AS VARCHAR),6,5) "RunDate",
                       CAST(CAST(c."ReconciliationTime" AS TIME)AS VARCHAR(15)) "ReconciliationTime",
					   (CASE WHEN COALESCE(c."SourceSegment1",''TOTAL'')  = COALESCE(c."TargetSegment1",''TOTAL'') 
								THEN COALESCE(c."TargetSegment1",''TOTAL'') 
					   		 WHEN COALESCE(c."SourceSegment1",'''')  = '''' AND COALESCE(c."TargetSegment1",'''') > '''' 
								THEN c."TargetSegment1"
					   		 WHEN COALESCE(c."TargetSegment1",'''')  = '''' AND COALESCE(c."SourceSegment1",'''') > '''' 
								THEN c."SourceSegment1"
					   		 ELSE c."TargetSegment1" 
					   	END) "SegmentValue1",
					    (CASE WHEN COALESCE(c."SourceSegment2",''TOTAL'')  = COALESCE(c."TargetSegment2",''TOTAL'') 
								THEN c."TargetSegment2" 
					    	  WHEN COALESCE(c."SourceSegment2",'''')  = '''' AND COALESCE(c."TargetSegment2",'''') > '''' 
								THEN c."TargetSegment2"
					    	  WHEN COALESCE(c."TargetSegment2",'''')  = '''' AND COALESCE(c."SourceSegment2",'''') > '''' 
								THEN c."SourceSegment2"
					    	  ELSE c."TargetSegment2"
					    END) "SegmentValue2",
					    (CASE WHEN COALESCE(c."SourceSegment3",''TOTAL'')  = COALESCE(c."TargetSegment3",''TOTAL'') 
								THEN c."TargetSegment3"
					    	  WHEN COALESCE(c."SourceSegment3",'''')  = '''' AND COALESCE(c."TargetSegment3",'''') != '''' 
								THEN c."TargetSegment3"
					    	  WHEN COALESCE(c."TargetSegment3",'''')  = '''' AND COALESCE(c."SourceSegment3",'''') != '''' 
								THEN c."SourceSegment3"
					    	  ELSE c."TargetSegment3"
					    END) "SegmentValue3",
					    (CASE WHEN COALESCE(c."SourceSegment4",''TOTAL'')  = COALESCE(c."TargetSegment4",''TOTAL'') 
								THEN c."TargetSegment4"
					    	  WHEN COALESCE(c."SourceSegment4",'''')  = '''' AND COALESCE(c."TargetSegment4",'''') != '''' 
								THEN c."TargetSegment4"
					    	  WHEN COALESCE(c."TargetSegment4",'''')  = '''' AND COALESCE(c."SourceSegment4",'''') != '''' 
								THEN c."SourceSegment4"
					    	  ELSE c."TargetSegment4" 
					    END) "SegmentValue4",
					    (CASE WHEN COALESCE(c."SourceSegment5",''TOTAL'')  = COALESCE(c."TargetSegment5",''TOTAL'') 
								THEN c."TargetSegment5"
					    	  WHEN COALESCE(c."SourceSegment5",'''')  = '''' AND COALESCE(c."TargetSegment5",'''') != '''' 
								THEN c."TargetSegment5"
					    	  WHEN COALESCE(c."TargetSegment5",'''')  = '''' AND COALESCE(c."SourceSegment5",'''') != '''' 
								THEN c."SourceSegment5"
					    	  ELSE c."TargetSegment5"
					    END) "SegmentValue5",		
								
					    CAST(c."SourceValue1" AS  NUMERIC(39,2)) "SourceValue1",
                        CAST(c."TargetValue1" AS   NUMERIC(39,2)) "TargetValue1",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue1" AS  NUMERIC(39,2)),CAST(c."TargetValue1" AS   NUMERIC(39,2))) "ValueDiff1",						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority1",

					    CAST( c."SourceValue2" AS  NUMERIC(39,2))  "SourceValue2",
                        CAST(c."TargetValue2"   AS  NUMERIC(39,2)) "TargetValue2",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue2" AS  NUMERIC(39,2)),CAST(c."TargetValue2" AS   NUMERIC(39,2))) "ValueDiff2",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''93''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
						END) "ColorBasedSeviority2",

					    CAST( c."SourceValue3"  AS  NUMERIC(39,2)) "SourceValue3",
                        CAST(c."TargetValue3"  AS  NUMERIC(39,2)) "TargetValue3",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue3" AS  NUMERIC(39,2)),CAST(c."TargetValue3" AS   NUMERIC(39,2))) "ValueDiff3",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''1'' THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''2''   THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''3''   THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''9''   THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority3",

					    CAST(c."SourceValue4" AS  NUMERIC(39,2)) "SourceValue4",
                        CAST(c."TargetValue4"  AS  NUMERIC(39,2)) "TargetValue4",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue4" AS  NUMERIC(39,2)),CAST(c."TargetValue4" AS   NUMERIC(39,2))) "ValueDiff4",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority4",

					    CAST(c."SourceValue5" AS  NUMERIC(39,2)) "SourceValue5",
                        CAST(c."TargetValue5" AS  NUMERIC(39,2)) "TargetValue5",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue5" AS  NUMERIC(39,2)),CAST(c."TargetValue5" AS   NUMERIC(39,2))) "ValueDiff5",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority5",
						
						CAST(c."SourceValue6" AS  NUMERIC(39,2)) "SourceValue6",
                        CAST(c."TargetValue6" AS  NUMERIC(39,2)) "TargetValue6",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue6" AS  NUMERIC(39,2)),CAST(c."TargetValue6" AS   NUMERIC(39,2))) "ValueDiff6",						

						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority6", 
						
						CAST(c."SourceValue7" AS  NUMERIC(39,2)) "SourceValue7",
                        CAST(c."TargetValue7" AS  NUMERIC(39,2)) "TargetValue7",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue7" AS  NUMERIC(39,2)),CAST(c."TargetValue7" AS   NUMERIC(39,2))) "ValueDiff7",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority7",
						
						CAST(c."SourceValue8" AS  NUMERIC(39,2)) "SourceValue8",
                        CAST(c."TargetValue8" AS  NUMERIC(39,2)) "TargetValue8",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue8" AS  NUMERIC(39,2)),CAST(c."TargetValue8" AS   NUMERIC(39,2))) "ValueDiff8",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority8",
						
						CAST(c."SourceValue9" AS  NUMERIC(39,2)) "SourceValue9",
                        CAST(c."TargetValue9" AS  NUMERIC(39,2)) "TargetValue9",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue9" AS  NUMERIC(39,2)),CAST(c."TargetValue9" AS   NUMERIC(39,2))) "ValueDiff9",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority9",
						
						CAST(c."SourceValue10" AS  NUMERIC(39,2)) "SourceValue10",
                        CAST(c."TargetValue10" AS  NUMERIC(39,2)) "TargetValue10",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue10" AS  NUMERIC(39,2)),CAST(c."TargetValue10" AS   NUMERIC(39,2))) "ValueDiff10",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority10",
						
						CAST(c."SourceValue11" AS  NUMERIC(39,2)) "SourceValue11",
                        CAST(c."TargetValue11" AS  NUMERIC(39,2)) "TargetValue11",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue11" AS  NUMERIC(39,2)),CAST(c."TargetValue11" AS   NUMERIC(39,2))) "ValueDiff11",						

						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority11",
						
						CAST(c."SourceValue12" AS  NUMERIC(39,2)) "SourceValue12",
                        CAST(c."TargetValue12" AS  NUMERIC(39,2)) "TargetValue12",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue12" AS  NUMERIC(39,2)),CAST(c."TargetValue12" AS   NUMERIC(39,2))) "ValueDiff12",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority12",
						
						CAST(c."SourceValue13" AS  NUMERIC(39,2)) "SourceValue13",
                        CAST(c."TargetValue13" AS  NUMERIC(39,2)) "TargetValue13",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue13" AS  NUMERIC(39,2)),CAST(c."TargetValue13" AS   NUMERIC(39,2))) "ValueDiff13",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority13",
						
						CAST(c."SourceValue14" AS  NUMERIC(39,2)) "SourceValue14",
                        CAST(c."TargetValue14" AS  NUMERIC(39,2)) "TargetValue14",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue14" AS  NUMERIC(39,2)),CAST(c."TargetValue14" AS   NUMERIC(39,2))) "ValueDiff14",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority14",
						
						CAST(c."SourceValue15" AS  NUMERIC(39,2)) "SourceValue15",
                        CAST(c."TargetValue15" AS  NUMERIC(39,2)) "TargetValue15",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue15" AS  NUMERIC(39,2)),CAST(c."TargetValue15" AS   NUMERIC(39,2))) "ValueDiff15",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority15",
						
						CAST(c."SourceValue16" AS  NUMERIC(39,2)) "SourceValue16",
                        CAST(c."TargetValue16" AS  NUMERIC(39,2)) "TargetValue16",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue16" AS  NUMERIC(39,2)),CAST(c."TargetValue16" AS   NUMERIC(39,2))) "ValueDiff16",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority16",
						
						CAST(c."SourceValue17" AS  NUMERIC(39,2)) "SourceValue17",
                        CAST(c."TargetValue17" AS  NUMERIC(39,2)) "TargetValue17",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue17" AS  NUMERIC(39,2)),CAST(c."TargetValue17" AS   NUMERIC(39,2))) "ValueDiff17",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority17",
						
						CAST(c."SourceValue18" AS  NUMERIC(39,2)) "SourceValue18",
                        CAST(c."TargetValue18" AS  NUMERIC(39,2)) "TargetValue18",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue18" AS  NUMERIC(39,2)),CAST(c."TargetValue18" AS   NUMERIC(39,2))) "ValueDiff18",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority18",
						
						CAST(c."SourceValue19" AS  NUMERIC(39,2)) "SourceValue19",
                        CAST(c."TargetValue19" AS  NUMERIC(39,2)) "TargetValue19",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue19" AS  NUMERIC(39,2)),CAST(c."TargetValue19" AS   NUMERIC(39,2))) "ValueDiff19",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority19",
						
						CAST(c."SourceValue20" AS  NUMERIC(39,2)) "SourceValue20",
                        CAST(c."TargetValue20" AS  NUMERIC(39,2)) "TargetValue20",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue20" AS  NUMERIC(39,2)),CAST(c."TargetValue20" AS   NUMERIC(39,2))) "ValueDiff20",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority20",
						
						(CASE
							WHEN c."ColorBasedoThreasold1" = ''1'' OR c."ColorBasedoThreasold2"  = ''1'' 
								OR c."ColorBasedoThreasold3" = ''1'' OR c."ColorBasedoThreasold4"  = ''1'' 
									OR c."ColorBasedoThreasold5" = ''1'' OR c."ColorBasedoThreasold6"  = ''1'' 
										OR c."ColorBasedoThreasold7" = ''1'' OR c."ColorBasedoThreasold8"  = ''1'' 
											OR c."ColorBasedoThreasold9" = ''1'' OR c."ColorBasedoThreasold10" = ''1'' 
												OR c."ColorBasedoThreasold11" = ''1'' OR c."ColorBasedoThreasold12" = ''1'' 
													OR c."ColorBasedoThreasold13" = ''1'' OR c."ColorBasedoThreasold14" = ''1'' 
														OR c."ColorBasedoThreasold15" = ''1'' OR c."ColorBasedoThreasold16" = ''1'' 
															OR c."ColorBasedoThreasold17" = ''1'' OR c."ColorBasedoThreasold18" = ''1'' 
																OR c."ColorBasedoThreasold19" = ''1'' OR c."ColorBasedoThreasold20" = ''1''
								THEN ''Y''
							ELSE ''N''
						END) "CritIcalInd" 
						');

 "FromString" := ' FROM fda."FDAAlertOutputByAdvancedSegment"  AS c,
 fda."FDAAlertRules" a
 ';

 "WhereConditionString" := CONCAT('
WHERE c."FDAAlertRulesId" = a."FDAAlertRulesId"
  AND c."FDAAlertRulesId" = ',"InFDAAlertRulesId",'
  AND c."FDAAlertOutputId" = ',"InFDAAlertOutputId",'
  AND c."TargetSegment1" NOT IN (SELECT "TargetSegmentValue1"
								FROM fda."FDAAlertRulesTargetSegmentValue"
							    WHERE "FDAAlertRulesId" = ',"InFDAAlertRulesId",'
								  AND "CheckedStatus" = ''FALSE'') )x');
"WhereConditionString2" :=CONCAT(' WHERE CONCAT("ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
												"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20"	) LIKE ''%RED%''
								OR CONCAT("ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
												"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20"	) LIKE ''%YELLOW%'' ');

 "OrderByString" := CASE WHEN "InOrderByColumnName" > '' AND "InOrderBy" > '' AND "InTabInd" = 'Y' THEN
                        CONCAT(' ORDER BY "',"InOrderByColumnName",'","ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
								"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
						 WHEN "InOrderByColumnName" = '' AND "InOrderBy" = '' AND "InTabInd" = 'Y' THEN
                        CONCAT(' ORDER BY "ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
								"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
						 WHEN "InOrderByColumnName" > '' AND "InOrderBy" > '' THEN
						 CONCAT(' ORDER BY "',"InOrderByColumnName",'" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
                        ELSE 						
							 CONCAT(' ORDER BY "SegmentValue1","SegmentValue2","SegmentValue3","SegmentValue4","SegmentValue5" ASC
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
                        /*ELSE CONCAT(' ORDER BY x."ColorBasedSeviority1",
						                       x."ColorBasedSeviority2",
                                               x."ColorBasedSeviority3",
		                                       x."ColorBasedSeviority4",
		                                       x."ColorBasedSeviority5" ASC
                                      OFFSET ',"InOffSet",' ROWS
                                      FETCH NEXT ',"InLimit",' ROWS ONLY')
									*/
                         END;

IF "InTabInd" = 'Y' THEN 
 "SelectQueryString" := CONCAT("SelectQueryString","FromString","WhereConditionString","WhereConditionString2","OrderByString");
 ELSE 
"SelectQueryString" := CONCAT("SelectQueryString","FromString","WhereConditionString","OrderByString");
END IF;
--RAISE NOTICE 'SelectQueryString: %',"SelectQueryString";
--RAISE NOTICE 'WhereConditionString: %',"WhereConditionString";
RAISE NOTICE 'VALUE: %',"SelectQueryString";

OPEN $10 FOR
	EXECUTE  "SelectQueryString" ;
RETURN NEXT $10;
  
--WHERE SegmentValue1 >''
SELECT COUNT(*) INTO "OutTotalRecordCount" 
FROM
(SELECT c."FDAAlertOutputByAdvancedSegmentId",
        c."FDAAlertOutputId"  
FROM fda."FDAAlertOutputByAdvancedSegment"  AS c
WHERE c."FDAAlertRulesId" = "InFDAAlertRulesId"
  AND c."FDAAlertOutputId" = "InFDAAlertOutputId" )x ;
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 "ResultPercentage1" := ((((SELECT COUNT("ColorBasedoThreasold1") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold1",''),'0') AS NUMERIC) NOT IN (1,2)) * 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END 
                                                                                  FROM fda."FDAAlertOutputByAdvancedSegment"
												                                  WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ) ) *100);
 "ResultPercentage2" := ((((SELECT COUNT("ColorBasedoThreasold2") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold2",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                  FROM fda."FDAAlertOutputByAdvancedSegment"
												                                  WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage3" := ((((SELECT COUNT("ColorBasedoThreasold3") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold3",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END 
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage4" := ((((SELECT COUNT("ColorBasedoThreasold4") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold4",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage5" := ((((SELECT COUNT("ColorBasedoThreasold5") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold5",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage6" := ((((SELECT COUNT("ColorBasedoThreasold6") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold6",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage7" := ((((SELECT COUNT("ColorBasedoThreasold7") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold7",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage8" := ((((SELECT COUNT("ColorBasedoThreasold8") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold8",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage9" := ((((SELECT COUNT("ColorBasedoThreasold9") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold9",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage10" := ((((SELECT COUNT("ColorBasedoThreasold10") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold10",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage11" := ((((SELECT COUNT("ColorBasedoThreasold11") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold11",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage12" := ((((SELECT COUNT("ColorBasedoThreasold12") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold12",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage13" := ((((SELECT COUNT("ColorBasedoThreasold13") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold13",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage14" := ((((SELECT COUNT("ColorBasedoThreasold14") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold14",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage15" := ((((SELECT COUNT("ColorBasedoThreasold15") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold15",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage16" := ((((SELECT COUNT("ColorBasedoThreasold16") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold16",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage17" := ((((SELECT COUNT("ColorBasedoThreasold17") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold17",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage18" := ((((SELECT COUNT("ColorBasedoThreasold18") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold18",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage19" := ((((SELECT COUNT("ColorBasedoThreasold19") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold19",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);
 "ResultPercentage20" := ((((SELECT COUNT("ColorBasedoThreasold20") 
                                FROM fda."FDAAlertOutputByAdvancedSegment"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold20",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegment"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId") * 0.1 ))*100);																				 

--PRINT(123)
SELECT (CASE WHEN  "ResultPercentage1" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage1" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage1",1,2),'.','') END) INTO "OutSourceTargetValue1DifferencePercent";			
SELECT (CASE WHEN  "ResultPercentage2" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage2" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage2",1,2),'.','') END) INTO "OutSourceTargetValue2DifferencePercent";							   
SELECT (CASE WHEN  "ResultPercentage3" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage3" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage3",1,2),'.','') END) INTO "OutSourceTargetValue3DifferencePercent";							   
SELECT (CASE WHEN "ResultPercentage4" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage4" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage4",1,2),'.','') END) INTO "OutSourceTargetValue4DifferencePercent";							   
SELECT (CASE WHEN "ResultPercentage5" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage5" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage5",1,2),'.','') END) INTO "OutSourceTargetValue5DifferencePercent";
SELECT (CASE WHEN "ResultPercentage6" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage6" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage6",1,2),'.','') END) INTO "OutSourceTargetValue6DifferencePercent";
SELECT (CASE WHEN "ResultPercentage7" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage7" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage7",1,2),'.','') END) INTO "OutSourceTargetValue7DifferencePercent";
SELECT (CASE WHEN "ResultPercentage8" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage8" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage8",1,2),'.','') END) INTO "OutSourceTargetValue8DifferencePercent";
SELECT (CASE WHEN "ResultPercentage9" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage9" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage9",1,2),'.','') END) INTO "OutSourceTargetValue9DifferencePercent";
SELECT (CASE WHEN "ResultPercentage10" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage10" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage10",1,2),'.','') END) INTO "OutSourceTargetValue10DifferencePercent";
SELECT (CASE WHEN "ResultPercentage11" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage11" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage11",1,2),'.','') END) INTO "OutSourceTargetValue11DifferencePercent";
SELECT (CASE WHEN "ResultPercentage12" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage12" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage12",1,2),'.','') END) INTO "OutSourceTargetValue12DifferencePercent";
SELECT (CASE WHEN "ResultPercentage13" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage13" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage13",1,2),'.','') END) INTO "OutSourceTargetValue13DifferencePercent";
SELECT (CASE WHEN "ResultPercentage14" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage14" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage14",1,2),'.','') END) INTO "OutSourceTargetValue14DifferencePercent";
SELECT (CASE WHEN "ResultPercentage15" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage15" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage15",1,2),'.','') END) INTO "OutSourceTargetValue15DifferencePercent";
SELECT (CASE WHEN "ResultPercentage16" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage16" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage16",1,2),'.','') END) INTO "OutSourceTargetValue16DifferencePercent";
SELECT (CASE WHEN "ResultPercentage17" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage17" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage17",1,2),'.','') END) INTO "OutSourceTargetValue17DifferencePercent";
SELECT (CASE WHEN "ResultPercentage18" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage18" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage18",1,2),'.','') END) INTO "OutSourceTargetValue18DifferencePercent";
SELECT (CASE WHEN "ResultPercentage19" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage19" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage19",1,2),'.','') END) INTO "OutSourceTargetValue19DifferencePercent";
SELECT (CASE WHEN "ResultPercentage20" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage20" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage20",1,2),'.','') END) INTO "OutSourceTargetValue20DifferencePercent";
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Fetch Notes Added with 
SELECT "Notes",
	"AlertInd",
	"NewBaseLineInd",
	"ConfirmedByUser",
	CONCAT(to_char(cast("LastUpdatedDateTime" as timestamp),'HH24:MI:SS'),' GMT') AS "TIMEGMT",
	"AlertStatus",
	(CASE 
		WHEN  "SourceSegmentCount" is not null 
			OR  "TargetSegmentCount" is not null 
				THEN 
					(CASE 
						WHEN "SourceSegmentCount" = "TargetSegmentCount"
							THEN 'In total there are ' || "SourceSegmentCount" || ' segments in Source and ' || "TargetSegmentCount" || ' in target. Therefore, segment count reconciles perfectly fine.'
						ELSE 'In total there are ' || "SourceSegmentCount" || ' segments in Source and ' || "TargetSegmentCount" || ' in target. Therefore, segment count does not reconcile perfectly.'
					END)
		ELSE ''
	END) AS "SegmentCountStatus",
	(CASE 
	 	WHEN  "SourceSegmentCount" is not null 
			OR  "TargetSegmentCount" is not null 
	 			THEN 
	 				(CASE 
						WHEN "SourceSegmentCount" = "TargetSegmentCount" 
							THEN 'GREEN' 
						ELSE 'RED'
	 				END)
	 	ELSE ''
	END) AS"SegmentCountColorInd",
	(CASE 
		WHEN "SourceSegmentCount" >= 1000 
	 		OR "TargetSegmentCount" >= 1000 
			THEN 'However, in order to limit the number of segments, detailed reconciliation below is only for 1,000 segments.' 
		ELSE '' 
	END) AS"SegmentCountCriticalStatus"

INTO "OutNotes","OutAlertInd","OutNewBaseLineInd","OutConfirmedByUser","OutTIMEGMT","OutAlertStatus","OutSegmentCountStatus","OutSegmentCountColorInd","OutSegmentCountCriticalStatus"
FROM fda."FDAAlertOutput"
WHERE "FDAAlertOutputId" = "InFDAAlertOutputId";
-------------------------------------------------------------(SUMMARY STATUS)--------------------------------------------------------------------------------------------------------------------
SELECT (CASE WHEN "AlertTypeInd" = 'SourceTargetValue'
				THEN(CASE WHEN COALESCE("SourceSegmentCount",0) > 0 AND  COALESCE("TargetSegmentCount",0) > 0 AND "AlertSegmentInd" = 'WHITE' AND "AlertDetailsDataInd" = 'RED' 
								THEN 'In summary, this reconciliation failed because even though total segment count matched, the details data for each segment did not match.'
						  WHEN COALESCE("SourceSegmentCount",0) > 0 AND  COALESCE("TargetSegmentCount",0) > 0 AND "AlertSegmentInd" = 'RED' AND ("AlertDetailsDataInd" = 'WHITE' OR "AlertDetailsDataInd" = 'RED')
								THEN 'In summary, this reconciliation failed because even total segment count itself did not match.'
						  WHEN COALESCE("SourceSegmentCount",0) = 0 AND  COALESCE("TargetSegmentCount",0) = 0 AND "AlertDetailsDataInd" = 'WHITE'
						  THEN 'In summary, this reconciliation passed because for this the details data matched.'
						  WHEN COALESCE("SourceSegmentCount",0) = 0 AND COALESCE("TargetSegmentCount",0) = 0 AND "AlertDetailsDataInd" = 'RED'
						  THEN 'In summary, this reconciliation failed because for this the details data  did not matched.'	
						  ELSE 'In summary, this reconciliation passed because for this total segment matched and details data also matched.'
					END)
			ELSE(CASE WHEN "AlertDetailsDataInd" = 'RED' 
							THEN 'In summary, this reconciliation failed because the details data for each segment did not match.'
					  ELSE 'In summary, this reconciliation passed because the details data for each segment matched.'
				END)
		END) AS "SummaryStatus"
INTO "OutSummaryStatus"
FROM(SELECT	DISTINCT "AlertTypeInd","SourceSegmentCount","TargetSegmentCount",
			(CASE WHEN COALESCE("SourceSegmentCount",0) = COALESCE("TargetSegmentCount",0) THEN 'WHITE' ELSE 'RED' END) "AlertSegmentInd",		
			(CASE
				WHEN MIN(CASE 
							WHEN "ColorBasedoThreasold1" = '1' OR "ColorBasedoThreasold2" = '1' OR "ColorBasedoThreasold3" = '1' OR "ColorBasedoThreasold4" = '1'
								OR "ColorBasedoThreasold5" = '1' OR "ColorBasedoThreasold6" = '1' OR "ColorBasedoThreasold7" = '1' OR "ColorBasedoThreasold8" = '1'
									OR "ColorBasedoThreasold9" = '1' OR "ColorBasedoThreasold10" = '1' OR "ColorBasedoThreasold11" = '1' OR "ColorBasedoThreasold12" = '1'
										OR "ColorBasedoThreasold13" = '1' OR "ColorBasedoThreasold14" = '1' OR "ColorBasedoThreasold15" = '1' OR "ColorBasedoThreasold16" = '1'
											OR "ColorBasedoThreasold17" = '1' OR "ColorBasedoThreasold18" = '1' OR "ColorBasedoThreasold19" = '1' OR "ColorBasedoThreasold20" = '1'
								THEN '1'
							ELSE '9'
						END) OVER()  = '1' 
					THEN 'RED' 
				ELSE 'WHITE' 
			END) "AlertDetailsDataInd"			
	FROM fda."FDAAlertRules" a
	INNER JOIN fda."FDAAlertOutputByAdvancedSegment" b
		ON a."FDAAlertRulesId" = b."FDAAlertRulesId"
	INNER JOIN fda."FDAAlertOutput" c
		ON b."FDAAlertRulesId" = c."FDAAlertRulesId"
		AND b."FDAAlertOutputId" = c."FDAAlertOutputId"
	WHERE b."FDAAlertRulesId" = "InFDAAlertRulesId"
		AND b."FDAAlertOutputId" = "InFDAAlertOutputId"
	)x;

SELECT  "AlertName","AlertDescription"
INTO "OutAlertName","OutAlertDescription"	
FROM fda."FDAAlertRules"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

OPEN $11 FOR
SELECT "OutNotes",
	   "OutAlertInd",
	   "OutNewBaseLineInd",
	   "OutConfirmedByUser",
	   "OutAlertName",
	   "OutAlertDescription",
	   "OutTIMEGMT",
	   "OutTotalRecordCount",
	   "OutAlertStatus",
	   "OutSegmentCountStatus",
	   "OutSegmentCountColorInd",
	   "OutSegmentCountCriticalStatus",
	   "OutSummaryStatus",
	   
	   COALESCE(NULLIF("OutSegmentName1",''),'TOTAL') AS "OutSegmentName1", 
	   "OutSegmentName2",
	   "OutSegmentName3",
	   "OutSegmentName4",
	   "OutSegmentName5",
	   
	   "OutSourceColumnName1" ,
	   "OutTargetColumnName1" ,
	   "OutSourceColumnName2" ,
	   "OutTargetColumnName2" ,
	   "OutSourceColumnName3" ,
	   "OutTargetColumnName3" ,
	   "OutSourceColumnName4" ,
	   "OutTargetColumnName4" ,
	   "OutSourceColumnName5" ,
	   "OutTargetColumnName5" ,
	   "OutSourceColumnName6" ,
	   "OutTargetColumnName6" ,
	   "OutSourceColumnName7" ,
	   "OutTargetColumnName7" ,
	   "OutSourceColumnName8" ,
	   "OutTargetColumnName8" ,
	   "OutSourceColumnName9" ,
	   "OutTargetColumnName9" ,
	   "OutSourceColumnName10",
	   "OutTargetColumnName10",
	   "OutSourceColumnName11",
	   "OutTargetColumnName11",
	   "OutSourceColumnName12",
	   "OutTargetColumnName12",
	   "OutSourceColumnName13",
	   "OutTargetColumnName13",
	   "OutSourceColumnName14",
	   "OutTargetColumnName14",
	   "OutSourceColumnName15",
	   "OutTargetColumnName15",
	   "OutSourceColumnName16",
	   "OutTargetColumnName16",
	   "OutSourceColumnName17",
	   "OutTargetColumnName17",
	   "OutSourceColumnName18",
	   "OutTargetColumnName18",
	   "OutSourceColumnName19",
	   "OutTargetColumnName19",
	   "OutSourceColumnName20",
	   "OutTargetColumnName20",
	   
	   "OutThreshold1" ,
	   "OutThreshold2" ,
	   "OutThreshold3" ,
	   "OutThreshold4" ,
	   "OutThreshold5" ,
	   "OutThreshold6" ,
	   "OutThreshold7" ,
	   "OutThreshold8" ,
	   "OutThreshold9" ,
	   "OutThreshold10",
	   "OutThreshold11",
	   "OutThreshold12",
	   "OutThreshold13",
	   "OutThreshold14",
	   "OutThreshold15",
	   "OutThreshold16",
	   "OutThreshold17",
	   "OutThreshold18",
	   "OutThreshold19",
	   "OutThreshold20",
	   
	   "OutSourceTargetValue1DifferencePercent" ,
	   "OutSourceTargetValue2DifferencePercent" ,
	   "OutSourceTargetValue3DifferencePercent" ,
	   "OutSourceTargetValue4DifferencePercent" ,
	   "OutSourceTargetValue5DifferencePercent" ,
	   "OutSourceTargetValue6DifferencePercent" ,
	   "OutSourceTargetValue7DifferencePercent" ,
	   "OutSourceTargetValue8DifferencePercent" ,
	   "OutSourceTargetValue9DifferencePercent" ,
	   "OutSourceTargetValue10DifferencePercent",
	   "OutSourceTargetValue11DifferencePercent",
	   "OutSourceTargetValue12DifferencePercent",
	   "OutSourceTargetValue13DifferencePercent",
	   "OutSourceTargetValue14DifferencePercent",
	   "OutSourceTargetValue15DifferencePercent",
	   "OutSourceTargetValue16DifferencePercent",
	   "OutSourceTargetValue17DifferencePercent",
	   "OutSourceTargetValue18DifferencePercent",
	   "OutSourceTargetValue19DifferencePercent",
	   "OutSourceTargetValue20DifferencePercent";

RETURN NEXT $11;
--PRINT Out Param
/*
SELECT fda."Proc_ListAlertOutputSourceAndTargetValueWithSeviorityAdvance_V2"(
	5,--"InFDAAlertOutputId" bigint,
	2,--"InFDAAlertRulesId" bigint,
	0,--"InOffSet" bigint,
	10000,--"InLimit" bigint,
	'',--"InOrderByColumnName" character varying,
	'',--"InOrderBy" character varying,
	'',--"InFromDate" character varying,
	'',--"InToDate" character varying,
	'',--"InTabInd" character varying,
	'refcursor1',
	'refcursor2');
FETCH ALL IN "refcursor1";
*/
END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListFDASystemObjectFieldDetailsForScoreSyncUp"(
	"InSystemName" character varying,
	"InObjectName" character varying,
	"InIndType" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE 
"CURRENT_TIME" VARCHAR(10);
"SCORE_SYNC_TIME" VARCHAR(10);
"lvScoreActiveColumnCount" BIGINT;
BEGIN

IF "InSystemName" = '' AND "InObjectName" = '' AND "InIndType" = '' THEN

	SELECT 
		(CASE 
			WHEN LENGTH(CAST(EXTRACT(MINUTE FROM CURRENT_TIMESTAMP) AS TEXT)) = 2 
				THEN CONCAT(EXTRACT(HOUR FROM  CURRENT_TIMESTAMP),':',EXTRACT(MINUTE FROM  CURRENT_TIMESTAMP))
			ELSE CONCAT(EXTRACT(HOUR FROM  CURRENT_TIMESTAMP),':',0,EXTRACT(MINUTE FROM  CURRENT_TIMESTAMP))
		END)
	INTO "CURRENT_TIME";
	
	SELECT "TimeInHH:MM" INTO "SCORE_SYNC_TIME"
	FROM fda."TimeSchedules"
	WHERE "TimeFor" = 'ObjectScore';
	
		IF "SCORE_SYNC_TIME" = "CURRENT_TIME" THEN
		
				OPEN $4 FOR
				
					SELECT DISTINCT
							a."FDASystemsId",
							a."SystemAliasName" "SystemName",
							a."SystemType",
							a."SystemCategoryType"
					FROM fda."FDASystems" a,
						fda."FDASystemObjects" b
					WHERE a."FDASystemsId" = b."FDASystemsId"
						AND COALESCE(b."ObjectType",'') = 'DATA'
						AND COALESCE(UPPER(a."SystemCategoryType"),'') = 'PHYSICAL'
						AND COALESCE(b."ObjectName",'') != ''
						--AND COALESCE(b."ObjectName",'') NOT LIKE 'dbo.v%'
						--AND COALESCE(a."SystemAliasName",'') != 'SAP'
						--AND COALESCE(a."SystemAliasName",'') IN ('decisionsigma','cntrctweb')
						AND COALESCE(b."AutoMetricsInd",'') IS NOT NULL
						AND COALESCE(b."AutoMetricsInd",'') = 'true';
	
				RETURN NEXT $4;
				
		ELSE
				
				OPEN $4 FOR
				
					SELECT DISTINCT
						a."FDASystemsId",
						a."SystemAliasName" "SystemName",
						a."SystemType",
						a."SystemCategoryType"
					FROM fda."FDASystems" a,
					fda."FDASystemObjects" b
					WHERE a."FDASystemsId" = 0;
	
				RETURN NEXT $4;
			
		END IF;

ELSE IF "InSystemName" > '' AND "InObjectName" = '' AND "InIndType" = '' THEN

	OPEN $4 FOR
	
		SELECT DISTINCT
			a."FDASystemsId",
			a."SystemAliasName" "SystemName",
			b."FDASystemObjectsId",
			b."ObjectName",
			b."ObjectType",
			b."SchemaName",
			(SELECT c."FDASystemObjectFieldsId"
			 FROM fda."FDASystemObjectFields" c
			 WHERE c."FieldName" = b."SegmentedBy"
			 	AND b."SegmentedBy" > ''
				AND c."FDASystemObjectsId" = b."FDASystemObjectsId") "SegmentByFieldId",
			b."SegmentedBy" "SegmentByFieldName",
			b."BasicScoreInd",
			b."AdvanceScoreInd"
		FROM fda."FDASystems" a,
			fda."FDASystemObjects" b
		WHERE a."FDASystemsId" = b."FDASystemsId"
			AND COALESCE(a."SystemAliasName",'') = "InSystemName"
			AND COALESCE(b."ObjectType",'') IN ('DATA','TABLE','VIEW')
			AND COALESCE(UPPER(a."SystemCategoryType"),'') = 'PHYSICAL'
			AND COALESCE(b."ObjectName",'') != ''
			--AND COALESCE(b."ObjectName",'') NOT LIKE 'dbo.v%'
			--AND COALESCE(a."SystemAliasName",'') != 'SAP'
			AND COALESCE(b."AutoMetricsInd",'') IS NOT NULL
			AND COALESCE(b."AutoMetricsInd",'') = 'true';
	
	RETURN NEXT $4;

ELSE IF "InSystemName" > '' AND "InObjectName" > '' AND "InIndType" = '' THEN
	
	--SELECT COUNT(c."FDASystemObjectFieldsId")
	--INTO "lvScoreActiveColumnCount"
	--FROM fda."FDASystems" a,
	--	fda."FDASystemObjects" b,
	--	fda."FDASystemObjectFields" c
	--WHERE a."FDASystemsId" = b."FDASystemsId"
	--	AND b."FDASystemObjectsId" = c."FDASystemObjectsId"
	--	AND a."SystemAliasName" = "InSystemName"
	--	AND b."ObjectName" = "InObjectName"
	--	AND COALESCE(c."AutoMetricsInd",'') IN ('true');
	--	
	--IF COALESCE("lvScoreActiveColumnCount",0) > 0 THEN
	
		OPEN $4 FOR
	
			SELECT DISTINCT
				a."FDASystemsId",
				a."SystemAliasName" "SystemName",
				b."FDASystemObjectsId",
				b."ObjectName",
				c."FDASystemObjectFieldsId",
				c."FieldName",
				--c."FieldDataType",
				(CASE WHEN c."FieldDataType" IN ('VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') 
						AND COALESCE(c."UserOverwriteDatatype",'STRING') = 'STRING'	THEN  'STRING'
					WHEN c."FieldDataType" IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL') 
						AND COALESCE(c."UserOverwriteDatatype",'NUMBER') = 'NUMBER'	THEN  'NUMBER'
					WHEN c."FieldDataType" IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2') 
						AND COALESCE(c."UserOverwriteDatatype",'DATE') = 'DATE'  THEN  'DATE'
					ELSE c."UserOverwriteDatatype" 
				END) "FieldDataType",
				COALESCE(NULLIF(c."SegmentedBy",'null'),'') AS  "FieldSegmentName",
				COALESCE(NULLIF(b."SegmentedBy",'null'),'') AS  "ObjectSegmentName",
				COALESCE(
							(SELECT c1."FDASystemObjectFieldsId" FROM fda."FDASystemObjectFields" c1
							 WHERE c1."FieldName" = c."SegmentedBy" AND c."SegmentedBy" > ''
							 AND c1."FDASystemObjectsId" = b."FDASystemObjectsId"
							)::varchar,''
						) "FieldSegmentId",
				COALESCE((SELECT c."FDASystemObjectFieldsId"
							FROM fda."FDASystemObjectFields" c
							WHERE c."FieldName" = b."SegmentedBy"
								AND b."SegmentedBy" > ''
								AND c."FDASystemObjectsId" = b."FDASystemObjectsId"
						)::varchar,''
						) "ObjectSegmentId"
			FROM fda."FDASystems" a
			INNER JOIN fda."FDASystemObjects" b
				ON a."FDASystemsId" = b."FDASystemsId"
			LEFT JOIN fda."FDASystemObjectFields" c
				ON b."FDASystemObjectsId" = c."FDASystemObjectsId"
				WHERE a."SystemAliasName" = "InSystemName"
				AND b."ObjectName" = "InObjectName"
				AND COALESCE(c."AutoMetricsInd",'') IN ('true')
				AND COALESCE(c."ObsoleteInMetaDataInd",'NEW') != 'DELETED';
		
		RETURN NEXT $4;
	
	--ELSE
	--
	--	OPEN $4 FOR
	--
	--		SELECT DISTINCT
	--			a."FDASystemsId",
	--			a."SystemAliasName" "SystemName",
	--			b."FDASystemObjectsId",
	--			b."ObjectName",
	--			'' "FDASystemObjectFieldsId",
	--			'' "FieldName",
	--			'' "FieldDataType",
	--			'' "FieldSegmentName",
	--			'' "ObjectSegmentName",
	--			'' "FieldSegmentId",
	--			'' "ObjectSegmentId"
	--		FROM fda."FDASystems" a,
	--			fda."FDASystemObjects" b
	--		WHERE a."FDASystemsId" = b."FDASystemsId"
	--			AND a."SystemAliasName" = "InSystemName"
	--			AND b."ObjectName" = "InObjectName";
	--		
	--	RETURN NEXT $4;
	--
	--END IF;

ELSE IF "InSystemName" > '' AND "InObjectName" > '' AND "InIndType" > '' THEN

	OPEN $4 FOR
	
			/*SELECT DISTINCT
			a."FDASystemsId",
			a."SystemAliasName" "SystemName",
			a."SystemType",
			b."FDASystemObjectsId",
			b."ObjectName",
			(SELECT c."FDASystemObjectFieldsId"
			 FROM fda."FDASystemObjectFields" c
			 WHERE c."FieldName" = b."SegmentedBy"
			 	AND b."SegmentedBy" > ''
				AND c."FDASystemObjectsId" = b."FDASystemObjectsId") "SegmentByFieldId",
			COALESCE(b."SegmentedBy",'') AS  "SegmentByObjectName",
			c."FDASystemObjectFieldsId",
			c."FieldName",
			COALESCE(NULLIF(c."SegmentedBy",'null'),'') AS "SegmentByFieldName",
			b."BasicScoreInd",
			b."AdvanceScoreInd"
		FROM fda."FDASystems" a,
			fda."FDASystemObjects" b,
			fda."FDASystemObjectFields" c
		WHERE a."FDASystemsId" = b."FDASystemsId"
			AND COALESCE(a."SystemAliasName",'') = "InSystemName"
			AND b."FDASystemObjectsId" = c."FDASystemObjectsId"
			AND COALESCE(b."ObjectType",'') IN ('DATA','TABLE','VIEW')
			AND COALESCE(UPPER(a."SystemCategoryType"),'') = 'PHYSICAL'
			AND COALESCE(b."ObjectName",'') != ''
			--AND COALESCE(b."ObjectName",'') NOT LIKE 'dbo.v%'
			AND COALESCE(b."ObjectName",'') = "InObjectName"
			--AND COALESCE(a."SystemAliasName",'') != 'SAP'
			AND COALESCE(b."AutoMetricsInd",'') IS NOT NULL
			AND  COALESCE(c."AutoMetricsInd",'') IN ('true'); */
			
		SELECT DISTINCT
				a."FDASystemsId",
				a."SystemAliasName" "SystemName",
				a."SystemType",
				b."FDASystemObjectsId",
				b."ObjectName",
				(SELECT c."FDASystemObjectFieldsId"
				FROM fda."FDASystemObjectFields" c
				WHERE c."FieldName" = b."SegmentedBy"
					AND b."SegmentedBy" > ''
					AND c."FDASystemObjectsId" = b."FDASystemObjectsId") "SegmentByFieldId",
				COALESCE(b."SegmentedBy",'') AS  "SegmentByObjectName",
				c."FDASystemObjectFieldsId",
				c."FieldName",
				(CASE WHEN c."FieldDataType" IN ('VARCHAR','NVARCHAR','CHAR','BOOLEAN','TEXT','STRING','CHAR','CHARACTER','NCHAR','TEXT','NVARCHAR','NVARCHAR2','CHAR VARYING','NCHAR VARYING') 
						AND COALESCE(c."UserOverwriteDatatype",'STRING') = 'STRING'	THEN  'STRING'
					WHEN c."FieldDataType" IN ('NUMBER','INTEGER','DECIMAL','INT','FLOAT','NUMERIC','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL') 
						AND COALESCE(c."UserOverwriteDatatype",'NUMBER') = 'NUMBER'	THEN  'NUMBER'
					WHEN c."FieldDataType" IN ('DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ','DATETIME2') 
						AND COALESCE(c."UserOverwriteDatatype",'DATE') = 'DATE'  THEN  'DATE'
					ELSE c."UserOverwriteDatatype" 
				END) "FieldDataType",		
				(SELECT d."FDASystemObjectFieldsId"
				FROM fda."FDASystemObjectFields" d
				WHERE d."FieldName" = COALESCE(NULLIF(c."SegmentedBy",'null'),'')
					AND b."SegmentedBy" > ''
					AND d."FDASystemObjectsId" = b."FDASystemObjectsId") "FieldSegmentByFieldId",
				COALESCE(NULLIF(c."SegmentedBy",'null'),'') AS "SegmentByFieldName", 
				COALESCE(b."BasicScoreInd",'') AS "BasicScoreInd",
				COALESCE(b."AdvanceScoreInd",'') AS "AdvanceScoreInd"
		FROM fda."FDASystems" a
		INNER JOIN fda."FDASystemObjects" b
			ON a."FDASystemsId" = b."FDASystemsId"
			AND COALESCE(a."SystemAliasName",'') =  "InSystemName"
			AND COALESCE(b."ObjectType",'') IN ('DATA','TABLE','VIEW')
			AND COALESCE(UPPER(a."SystemCategoryType"),'') = 'PHYSICAL'
			AND COALESCE(b."ObjectName",'') != ''
			AND COALESCE(b."ObjectName",'') = "InObjectName"
			AND COALESCE(b."AutoMetricsInd",'') IS NOT NULL
		LEFT JOIN  fda."FDASystemObjectFields" c
			ON b."FDASystemObjectsId" = c."FDASystemObjectsId"
			AND COALESCE(c."AutoMetricsInd",'') IN ('true')
		WHERE COALESCE(c."ObsoleteInMetaDataInd",'NEW') != 'DELETED'; 
	
		/*SELECT DISTINCT
			a."FDASystemsId",
			a."SystemAliasName" "SystemName",
			a."SystemType",
			b."FDASystemObjectsId",
			b."ObjectName",
			(SELECT c."FDASystemObjectFieldsId"
			 FROM fda."FDASystemObjectFields" c
			 WHERE c."FieldName" = b."SegmentedBy"
			 	AND b."SegmentedBy" > ''
				AND c."FDASystemObjectsId" = b."FDASystemObjectsId") "SegmentByFieldId",
			COALESCE(b."SegmentedBy",'') AS  "SegmentByObjectName",
			c."FDASystemObjectFieldsId",
			c."FieldName",
			COALESCE(NULLIF(c."SegmentedBy",'null'),'') AS "SegmentByFieldName",
			b."BasicScoreInd",
			b."AdvanceScoreInd"
		FROM fda."FDASystems" a,
			fda."FDASystemObjects" b,
			fda."FDASystemObjectFields" c
		WHERE a."FDASystemsId" = b."FDASystemsId"
			AND COALESCE(a."SystemAliasName",'') = "InSystemName"
			AND b."FDASystemObjectsId" = c."FDASystemObjectsId"
			AND COALESCE(b."ObjectType",'') IN ('DATA','TABLE','VIEW')
			AND COALESCE(UPPER(a."SystemCategoryType"),'') = 'PHYSICAL'
			AND COALESCE(b."ObjectName",'') != ''
			--AND COALESCE(b."ObjectName",'') NOT LIKE 'dbo.v%'
			AND COALESCE(b."ObjectName",'') = "InObjectName"
			--AND COALESCE(a."SystemAliasName",'') != 'SAP'
			AND COALESCE(b."AutoMetricsInd",'') IS NOT NULL
			AND  COALESCE(c."AutoMetricsInd",'') IN ('true');
			*/
	
	RETURN NEXT $4;

END IF;
END IF;
END IF;
END IF;
/*
SELECT "fda"."Proc_ListFDASystemObjectFieldDetailsForScoreSyncUp"(
      'dsigma',
      'dbo.Target6',
      '',
      'ITEM_CURSOR'
      );
FETCH ALL IN "ITEM_CURSOR";

*/

END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION erd."Proc_ViewERDiagram_V2"(
	"InErdId" character varying,
	"InSubjectArea" character varying,
	"InDisplayType" character varying,
	"InObjectName" character varying,
	"InDBType" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "SelectString" TEXT;
		"WhereConditionString" TEXT;
		"OrderByString" TEXT;
		"lvInd" VARCHAR(1) = 'Y';
		"ConditionColumn" text;

BEGIN 

"ConditionColumn" :=(SELECT (CASE WHEN "InDBType" = 'SnowFlake' THEN  '"'||'SnowFlake'||'Ind"'
								  WHEN "InDBType" = 'Hive' THEN  '"'||'SnowFlake'||'Ind"'
							    ELSE '"'||"InDBType"||'Ind"' 
							END) 
					);
IF UPPER("InDBType") = UPPER('Hive') 
THEN 
	"InDBType":= (SELECT 'SnowFlake');
END IF;

"SelectString" = CONCAT('SELECT 
							x."ERDSystemObjectsId" AS "id",
							x."ObjectName" AS "label",
							JSON_AGG(x ORDER BY
									 CASE 
										WHEN "PrimaryKey" = ''PK'' THEN 1 
										WHEN "ForeignKey" = ''FK'' THEN 2
										ELSE 3
									 END,
									 ''ERDSystemObjectFieldsId'' ASC
									) "Data"
							         FROM(SELECT DISTINCT
                                                 e."ERDiagramId",
                                                 b."ERDSystemObjectsId",
                                                 c."ERDSystemObjectFieldsId",
                                                 (CASE WHEN UPPER(''',"InDisplayType",''') = ''LOGICAL'' THEN COALESCE(b."SchemaName",'''') ||''.''||COALESCE(NULLIF(b."UserFriendlyObjectName",''''),b."ObjectName",'''')
												 ELSE COALESCE(b."SchemaName",'''') ||''.''||COALESCE(b."ObjectName",'''')
												 END) "ObjectName",
												 (CASE WHEN UPPER(''',"InDisplayType",''') = ''LOGICAL'' THEN COALESCE(NULLIF(c."UserFriendlyFieldName",''''),c."FieldName",'''')
														ELSE COALESCE("FieldName",'''')
												 END) "FieldName",
                                                 COALESCE(
                                                     (CASE WHEN UPPER(''',"InDisplayType",''') = ''LOGICAL'' THEN UPPER(f."LogicalDatatype")
                                                         WHEN UPPER(''',"InDisplayType",''') = ''PHYSICAL'' THEN erd."fn_ConvertDBTypeBySystem"(e."ErDatabaseType",''',"InDBType",''',c."FieldDataType",COALESCE(NULLIF(c."ColumnPrecision",'' ''),'''')) END),
                                                     c."FieldDataType"
                                                 ) "DataType",
                                                 (CASE
                                                 WHEN UPPER(''',"InDisplayType",''') = ''LOGICAL'' THEN UPPER(f."LogicalDatatype")
                                                 WHEN UPPER(''',"InDisplayType",''') = ''PHYSICAL'' THEN
                                                     CASE
                                                         WHEN UPPER(f."PhysicalDatatype") = '''' THEN
                                                             f."PhysicalDatatype" || ''('' || COALESCE(NULLIF(c."ColumnPrecision", ''0''), '''') || '')''
                                                         WHEN UPPER(f."PhysicalDatatype") = '''' THEN
                                                             f."PhysicalDatatype" || ''('' || COALESCE(NULLIF(c."CharacterMaximumLength", ''0''), '''') || '')''
                                                         ELSE
                                                             COALESCE(NULLIF(c."ColumnPrecision", ''0''), '''') || '''' || COALESCE(NULLIF(c."CharacterMaximumLength", ''0''), '''')
                                                     END
                                                 ELSE
                                                     COALESCE(NULLIF(c."ColumnPrecision", ''0''), '''') || '''' || COALESCE(NULLIF(c."CharacterMaximumLength", ''0''), '''')
                                                 END) "DataTypeRange",
                                                 (CASE WHEN "PrimaryKey" = ''true'' THEN ''PK'' else '''' END) "PrimaryKey",
                                                 (CASE WHEN "ForeignKey" = ''true'' THEN ''FK'' else '''' END) "ForeignKey",
                                                 Y."LinkedId"
                                                 FROM erd."ERDSystemObjects" b
                                                 LEFT JOIN erd."ERDSystemObjectFields" c
                                                     ON b."ERDSystemObjectsId" = c."ERDSystemObjectsId"
                                                 INNER JOIN erd."ERDiagram" e
                                                     ON b."ERDiagramId" = e."ERDiagramId"
                                                 INNER JOIN erd."ERDDBDatatype" f
                                                     ON UPPER(c."FieldDataType") = UPPER(f."PhysicalDatatype")
                                                 LEFT JOIN (
                                                     SELECT
                                                         X."ERDSystemObjectsId",
                                                         STRING_AGG(X."ChildTableId"::TEXT || '','' || X."ParentTableId"::TEXT, '','') "LinkedId"
                                                     FROM (
                                                         SELECT
                                                             "ERDSystemObjectsId",
                                                             "ObjectName",
                                                             b."ChildTableId",
                                                             b."ParentTableId"
                                                         FROM erd."ERDSystemObjects" a
                                                         LEFT JOIN erd."ErdRelationDetails" b
                                                             ON a."ERDSystemObjectsId" = b."ParentTableId"
                                                         WHERE a."ERDiagramId" = ''',"InErdId"::INT,'''
                                                         UNION
                                                         SELECT
                                                             "ERDSystemObjectsId",
                                                             "ObjectName",
                                                             b."ChildTableId",
                                                             b."ParentTableId"
                                                         FROM erd."ERDSystemObjects" a
                                                         LEFT JOIN erd."ErdRelationDetails" b
                                                             ON a."ERDSystemObjectsId" = b."ChildTableId"
                                                         WHERE a."ERDiagramId" = ''',"InErdId"::INT,'''
                                                     ) X
                                                     GROUP BY X."ERDSystemObjectsId"
                                                 ) Y
                                                 ON b."ERDSystemObjectsId" = Y."ERDSystemObjectsId"
                                                 WHERE e."ERDiagramId" = ''',"InErdId"::INT,'''
												 AND COALESCE(c."MetaDataInd",''NEW'') <> ''DELETED''
                                         ');

"OrderByString" = 'GROUP BY x."ERDSystemObjectsId",x."ObjectName"
ORDER BY x."ERDSystemObjectsId";';

IF   "InSubjectArea" > '' OR "InObjectName" > '' OR "InDBType" > '' THEN 

	IF "InSubjectArea" > '' THEN 
		"WhereConditionString" = CONCAT("WhereConditionString",'AND LOWER("ObjectGroup") = LOWER(''',"InSubjectArea",''') ');
	END IF;	
	
	IF "InObjectName" > '' THEN 
		"WhereConditionString" = CONCAT("WhereConditionString",'AND COALESCE(b."SchemaName",'''') ||''.''||COALESCE(b."ObjectName",'''') = ''',"InObjectName",''' ');
	END IF;
	
	IF "InDBType" > '' THEN 
		"WhereConditionString" = CONCAT("WhereConditionString",'AND UPPER(f."SystemType") = UPPER(''',"InDBType",''') ');
	END IF;	
	
END IF;

"SelectString" = CONCAT("SelectString","WhereConditionString",')x ',"OrderByString");

RAISE NOTICE 'SelectString: %',"SelectString";

OPEN $6 FOR 
	EXECUTE "SelectString";
RETURN NEXT $6;

OPEN $7 FOR
	SELECT DISTINCT
		a."ChildTableId":: text "target",
		a."ParentTableId":: text "source"	
	FROM erd."ErdRelationDetails" a
	LEFT JOIN erd."ERDSystemObjects" b
		ON a."ChildTableId" = b."ERDSystemObjectsId"
	LEFT JOIN erd."ERDSystemObjects" c
		ON a."ParentTableId" = c."ERDSystemObjectsId"
	WHERE a."ERDiagramId" = "InErdId"::INT
		AND b."ObjectGroup" ILIKE '%'||"InSubjectArea"||'%';
RETURN NEXT $7;

/*
 SELECT erd."Proc_ViewERDiagram_V2"(
	'92',--"InErdId" 		 character varying,
	'',--"InSubjectArea"  character varying,
	'LOGICAL',--"InDisplayType"  character varying,
	'', 
     'SnowFlake',
	'r1',
	'r2');
FETCH ALL IN "r1";

*/

END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ViewFDAMaintainDatabase"(
	"InFDASystemId" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
	DECLARE "OutSystemName" 		VARCHAR;
			"OutSystemOwner" 		VARCHAR;
			"OutSystemAliasName" 	VARCHAR;
			"OutSystemType" 		VARCHAR;
			"OutSystemUserName" 	VARCHAR;
			"OutSystemPassword" 	VARCHAR;
			"OutSystemCategoryType" VARCHAR;
			"OutLastUpdatedBy" 		VARCHAR;
			"OutLastUpdatedOn" 		VARCHAR;
			"OutConnectionDetails" 	VARCHAR;
			"OutSchema" 			VARCHAR;
			"OutWarehouse" 			VARCHAR;
			"OutRoleName" 			VARCHAR;
			"OutAccountName" 		VARCHAR;
			"OutContainerName" 		VARCHAR;
			"OutAccessKeyID" 		VARCHAR;   
			"OutSecretAccessKey" 	VARCHAR;
			"OutBucketName" 		VARCHAR ;
			"OutUsageFlag" 			VARCHAR ;
			"OutLandscapeName"      VARCHAR ;
			"OutRegion"				VARCHAR ;
			"OutS3BucketLocation"	VARCHAR ;
			"OutPortNumber"			VARCHAR ;
			--"OutSpreadSheetId"		VARCHAR ;
			"OutClientEmail"		VARCHAR ;
			"OutPrivateKey"			VARCHAR ;
			"OutProjectId" 			VARCHAR ;
			"OutConnectionOption" 	VARCHAR ;
			
						

BEGIN

	SELECT 
			"SystemName",
			COALESCE("SystemOwner",''),
			"SystemAliasName",
			"SystemType",
			"SystemUserName",
			(CASE WHEN "SystemPassword" > '' THEN '*****'
				ELSE '*****' 
			END) "SystemPassword",
			UPPER("SystemCategoryType"),
			"LastUpdatedBy",
			"LastUpdatedOn",
			"ConnectionDetails",
			"Schema",
			"Warehouse",
			"RoleName",
			COALESCE("AccountName",''),
			COALESCE("ContainerName",''),
			"AccessKeyID" ,  
			"SecretAccessKey" as "SecretAccessKey",
			"BucketName",
			COALESCE("UsageFlag",''),
			COALESCE("LandscapeName",''),
			COALESCE("Region" ,''),
			COALESCE("S3BucketLocation" ,''),
			COALESCE("PortNumber":: TEXT,''),
			--COALESCE("SpreadSheetId",''),
			COALESCE("ProjectId",''),
			COALESCE("ClientEmail",''),
			(CASE WHEN "PrivateKey" > '' THEN '**********'
				ELSE '**********' 
			END) AS "PrivateKey",
			COALESCE("ConnectionOption",'')
			
	INTO 
			"OutSystemName",
			"OutSystemOwner",
			"OutSystemAliasName",
			"OutSystemType",
			"OutSystemUserName",
			"OutSystemPassword",
			"OutSystemCategoryType",
			"OutLastUpdatedBy",
			"OutLastUpdatedOn",
			"OutConnectionDetails",
			"OutSchema",
			"OutWarehouse" ,
			"OutRoleName" ,
			"OutAccountName",
			"OutContainerName",
			"OutAccessKeyID"  ,  
			"OutSecretAccessKey",
			"OutBucketName",
			"OutUsageFlag",
			"OutLandscapeName",
			"OutRegion",				
			"OutS3BucketLocation",	
			"OutPortNumber",
			--"OutSpreadSheetId",
			"OutProjectId",
			"OutClientEmail",	
			"OutPrivateKey",
			"OutConnectionOption"
			
			
	FROM fda."FDASystems"
	WHERE CAST("FDASystemsId" AS VARCHAR) = "InFDASystemId";
	
	OPEN $2 FOR
		SELECT "OutSystemName",
				"OutSystemOwner",
				"OutSystemAliasName",
				"OutSystemType",
				"OutSystemUserName",
				"OutSystemPassword",
				"OutSystemCategoryType",
				"OutLastUpdatedBy",
				"OutLastUpdatedOn",
				"OutConnectionDetails",
				"OutSchema",
				"OutWarehouse" ,
				"OutRoleName",
				"OutAccountName",
				"OutContainerName",
				"OutAccessKeyID" ,   
				"OutSecretAccessKey",
				"OutBucketName",
				"OutUsageFlag",
				"OutLandscapeName",
				"OutRegion",				
				"OutS3BucketLocation",	
				"OutPortNumber",
				--"OutSpreadSheetId",
				"OutProjectId" ,
				"OutClientEmail",	
				"OutPrivateKey",
				"OutConnectionOption";
	RETURN NEXT $2;
END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_InsertFDAMaintainDatabase_V2"(
	"InFDASystemsId" character varying,
	"InSystemName" character varying,
	"InSystemOwner" character varying,
	"InSystemAliasName" character varying,
	"InSystemType" character varying,
	"InSystemUser" character varying,
	"InSystemPassword" character varying,
	"InSystemCategoryType" character varying,
	"InUserName" character varying,
	"InConnectionDetails" character varying,
	"InSchema" character varying,
	"InWarehouse" character varying,
	"InRoleName" character varying,
	"InAccountName" character varying,
	"InContainerName" character varying,
	"InAccessKeyID" character varying,
	"InSecretAccessKey" character varying,
	"InBucketName" character varying,
	"InUsageFlag" character varying,
	"InLandscapeName" character varying,
	"InRegion" character varying,
	"InS3BucketLocation" character varying,
	"InPortNumber" character varying,
	"InProjectId" character varying,
	"InClientEmail" character varying,
	"InPrivateKey" character varying,
	"InConnectionOption" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

DECLARE "OutFDASystemsId" VARCHAR;
		"ErrorIndId" INT;
		"OutStatusmsg" VARCHAR;
		"lvOrgId" BIGINT;
		"lvOrgName" VARCHAR;
		"lvSystemId" BIGINT;
		"lvUserType" VARCHAR;
	
BEGIN		
	
	SELECT "OrganizationId","UserType"
	INTO "lvOrgId","lvUserType"
	FROM fda."FDAUsers"
	WHERE "U_UserName" = "InUserName";
	
	SELECT "OrganizationName"
    INTO "lvOrgName"
	FROM fda."Organization"
    WHERE "OrganizationId" = "lvOrgId";
		
	IF UPPER("lvUserType") = 'PUBLIC' THEN
	
	    SELECT "FDASystemsId"
		INTO "lvSystemId"
		FROM fda."FDASystems"
		WHERE "SystemAliasName" =  "InSystemAliasName"
			AND "OrganizationId" = "lvOrgId"
			AND "CreatedBy" = "InUserName";
		
	 ELSE
	
	    SELECT "FDASystemsId"
		INTO "lvSystemId"
		FROM fda."FDASystems"
		WHERE "SystemAliasName" =  "InSystemAliasName"
			AND "OrganizationId" = "lvOrgId";
		
	END IF;
	
	
		IF "InFDASystemsId" = '' THEN 
		
			IF COALESCE("lvSystemId",0) > 0 THEN
		
				RAISE EXCEPTION 'System Already Exists!!'; 
				"OutStatusmsg" := 'SYSTEM NAME ALREADY EXISTS';
		
			END IF;
		
			RAISE NOTICE 'NOTICE :%','INSERT';
			
			INSERT INTO fda."FDASystems"
			(
				"SystemName",
				"SystemAliasName",
				"SystemType",
				"SystemUserName",
				"SystemPassword",
				"SystemCategoryType",
				"CreatedBy",
				"CreatedOn",
				"ConnectionDetails",
				"Schema",
				"Warehouse",
				"RoleName",
				"OrganizationId",
				"Organization",
				"AccountName",
				"ContainerName",
				"AccessKeyID",
				"SecretAccessKey",
				"BucketName",
				"UsageFlag",
				"LandscapeName",
				"Region",
				"S3BucketLocation",
				"PortNumber",
				"SystemOwner",
				"ProjectId",
				"ClientEmail",  
				"PrivateKey",
				"RowCountOutlierInd",
				"FreshnessOutlierInd",
				"RuleOutllierInd",
				"ConnectionOption"
				
			)
			VALUES
			(
				COALESCE(NULLIF("InSystemName",''),"InSystemAliasName"),
				"InSystemAliasName",
				"InSystemType",
				"InSystemUser",
				"InSystemPassword",
				"InSystemCategoryType",
				"InUserName",
				CURRENT_TIMESTAMP,
				"InConnectionDetails",
				"InSchema",
				"InWarehouse",
				"InRoleName",
				"lvOrgId",
				"lvOrgName",
				"InAccountName",
				"InContainerName",
				"InAccessKeyID"   , 
				"InSecretAccessKey",
				"InBucketName",
				"InUsageFlag",
				"InLandscapeName",
				"InRegion",
				"InS3BucketLocation",
				NULLIF("InPortNumber",'')::bigint,
				"InSystemOwner",
				"InProjectId",
				"InClientEmail",  
				"InPrivateKey",
				'Y',
				'Y',
				'Y',
				"InConnectionOption"
			); 
			
			SELECT "FDASystemsId"
			INTO "OutFDASystemsId"
			FROM fda."FDASystems"
			WHERE "SystemAliasName" = "InSystemAliasName"
				AND "OrganizationId" = "lvOrgId"
				AND "CreatedBy" = "InUserName";
				
			"OutStatusmsg" := 'SUCCESS';	
			
			OPEN $28 FOR
				SELECT "OutFDASystemsId","OutStatusmsg";

			RETURN NEXT $28;
		
		ELSE IF "InFDASystemsId" > '' THEN
		
			RAISE NOTICE 'ErrorIndId :%','UPDATE';
			RAISE NOTICE 'InProjectId :%',"InProjectId";
			
			UPDATE fda."FDASystems"
			SET "SystemAliasName" = "InSystemAliasName",
				"SystemType" = "InSystemType",
				"SystemUserName" = "InSystemUser",
				"CreatedBy" = "InUserName",
				"SystemPassword" = "InSystemPassword",
				"SystemCategoryType" = "InSystemCategoryType",
				"LastUpdatedBy" = "InUserName",
				"LastUpdatedOn" = CURRENT_TIMESTAMP,
				"ConnectionDetails" = "InConnectionDetails",
				"Schema" = "InSchema",
				"Warehouse" = "InWarehouse",
				"RoleName" = "InRoleName",
				"OrganizationId" = "lvOrgId",
				"Organization" = "lvOrgName",
				"AccountName" = "InAccountName",
				"ContainerName" = "InContainerName",
				"AccessKeyID" = "InAccessKeyID",
				"SecretAccessKey" = "InSecretAccessKey",
				"BucketName" = "InBucketName",
				"UsageFlag" = "InUsageFlag",
				"LandscapeName" = "InLandscapeName",
				"Region" = "InRegion",
				"S3BucketLocation" = "InS3BucketLocation",
				"PortNumber" = NULLIF("InPortNumber",'')::bigint,
				"SystemOwner" = "InSystemOwner",
				"ProjectId" = "InProjectId",
				"ClientEmail" = "InClientEmail",  
				"PrivateKey" = "InPrivateKey",
				"ConnectionOption" = "InConnectionOption"
			WHERE "FDASystemsId" =  CAST("InFDASystemsId" AS BIGINT);
			
			"OutStatusmsg" := 'SUCCESS';
			
			OPEN $28 FOR
				SELECT "InFDASystemsId" AS "OutFDASystemsId","OutStatusmsg";
			RETURN NEXT $28;
	
		END IF;	
		END IF;
------------------------------------
	
/*OPEN $9 FOR
SELECT "OutFDASystemsId";
RETURN NEXT $9;*/
	
END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_GetSystemInfo"(
	"InSystemName" character varying,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "OutSystemName" VARCHAR(100);
		"OutSystemAliasName" VARCHAR(100);
		"OutSystemType" VARCHAR(100);
		"OutSystemCategoryType" VARCHAR(100);
		"OutUserFriendlySystemName" VARCHAR(100);
		"OutAutoSyncUpInd" VARCHAR(100);
		"OutSystemUserName" VARCHAR(100);
		"OutConnectionDetails" VARCHAR;
		"OutSystemPassword" VARCHAR;
		"OutSchema" VARCHAR;
		"OutWarehouse" VARCHAR;
		"OutRoleName" VARCHAR;
		"OutFDASystemsId" BIGINT;
		"OutAccountName"  VARCHAR;
		"OutContainerName" VARCHAR;
		"OutAccessKeyID"   VARCHAR;   
		"OutSecretAccessKey"  VARCHAR;
		"OutBucketName"  VARCHAR ;
		"OutLandscapeName" VARCHAR;
		"OutRegion"	VARCHAR ;
		"OutS3BucketLocation" VARCHAR ;
		"OutPortNumber"	VARCHAR ;
		--"OutSpreadSheetId" VARCHAR ;
		"OutClientEmail" VARCHAR ;
		"OutPrivateKey" VARCHAR ;
		"OutProjectId" VARCHAR ;
		"OutConnectionOption"  VARCHAR ;

BEGIN

SELECT 
	"FDASystemsId",
	"SystemName",
	"SystemAliasName",
	"SystemType",
	"SystemCategoryType",
	"UserFriendlySystemName" ,
	"AutoSyncUpInd",
	"SystemUserName",
	"ConnectionDetails",
	"SystemPassword",
	"Schema",
	"Warehouse",
	"RoleName",
	COALESCE("AccountName",''),
	COALESCE("ContainerName",''),
	"AccessKeyID", 
	"SecretAccessKey" ,
	"BucketName",
	"LandscapeName",
	COALESCE("Region",''),
	COALESCE("S3BucketLocation",''),
	COALESCE("PortNumber"::text,''),
	--COALESCE("SpreadSheetId",''),
	COALESCE("ProjectId",''),
	COALESCE("ClientEmail",''),
	COALESCE("PrivateKey",''),
	COALESCE("ConnectionOption",'')
	
	
INTO 
	"OutFDASystemsId",
	"OutSystemName",
	"OutSystemAliasName",
	"OutSystemType",
	"OutSystemCategoryType",
	"OutUserFriendlySystemName" ,
	"OutAutoSyncUpInd",
	"OutSystemUserName",
	"OutConnectionDetails",
	"OutSystemPassword",
	"OutSchema",
	"OutWarehouse",
	"OutRoleName",
	"OutAccountName" ,
	"OutContainerName",
	"OutAccessKeyID", 
	"OutSecretAccessKey" ,
	"OutBucketName" ,
	"OutLandscapeName",
	"OutRegion",
	"OutS3BucketLocation",
	"OutPortNumber"	,
	--"OutSpreadSheetId",
	"OutProjectId",
	"OutClientEmail",
	"OutPrivateKey",
	"OutConnectionOption"
	
FROM fda."FDASystems"
WHERE "SystemAliasName" = "InSystemName";

OPEN $2 FOR --OPEN THE REF CURSOR

	SELECT 
			"OutFDASystemsId",
			"OutSystemName",
			"OutSystemAliasName",
			"OutSystemType",
			"OutSystemCategoryType",
			"OutUserFriendlySystemName" ,
			"OutAutoSyncUpInd",
			"OutSystemUserName",
			"OutConnectionDetails",
			"OutSystemPassword",
			"OutSystemUserName",
			"OutConnectionDetails",
			"OutSystemPassword",
			"OutSchema",
			"OutWarehouse",
			"OutRoleName",
			"OutAccountName" ,
			"OutContainerName",
			"OutAccessKeyID", 
			"OutSecretAccessKey" ,
			"OutBucketName" ,
			"OutLandscapeName",
			"OutRegion",
			"OutS3BucketLocation",
			"OutPortNumber",
			--"OutSpreadSheetId",
			"OutProjectId",
			"OutClientEmail",
			"OutPrivateKey",
			"OutConnectionOption";

RETURN NEXT $2;

/*
SELECT fda."Proc_GetSystemInfo"(
	'dsigma',--"InSystemName" character varying,
	'refcursor');
	FETCH ALL IN "refcursor";
*/

END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListAlertOutputSourceAndTargetValueWithSeviorityAdvanceSec"(
	"InFDAAlertOutputId" bigint,
	"InFDAAlertRulesId" bigint,
	"InOffSet" bigint,
	"InLimit" bigint,
	"InSegmentValue" character varying,
	"InOrderByColumnName" character varying,
	"InOrderBy" character varying,
	"InFromDate" character varying,
	"InToDate" character varying,
	"InTabInd" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "SourceType" VARCHAR(10);
		"TargetType" VARCHAR(10);
		"lvThresholdType" VARCHAR(20);
		"lvAlertTypeInd" VARCHAR(30);
DECLARE 
"SourceSegmentSecondary1" VARCHAR(50);
"SourceSegmentSecondary2" VARCHAR(50);
"SourceSegmentSecondary3" VARCHAR(50);
"SourceSegmentSecondary4" VARCHAR(50);
"SourceSegmentSecondary5" VARCHAR(50);
"TargetSegmentSecondary1" VARCHAR(50);
"TargetSegmentSecondary2" VARCHAR(50);
"TargetSegmentSecondary3" VARCHAR(50);
"TargetSegmentSecondary4" VARCHAR(50);
"TargetSegmentSecondary5" VARCHAR(50);
"OutTotalRecordCount" INT;
		
DECLARE	
"OutAlertName" TEXT;
"OutAlertDescription" TEXT;
"OutNotes" TEXT;
"OutAlertInd" VARCHAR(1);
"OutNewBaseLineInd" VARCHAR(1);
"OutConfirmedByUser" VARCHAR(1);
"OutThreshold" TEXT;
"OutTIMEGMT" TEXT;
"OutAlertStatus" Text;
"OutSegmentCountStatus" Text;
"OutSegmentCountColorInd" Text;
"OutSegmentCountCriticalStatus" Text;
"OutSummaryStatus" Text;
"OutSegmentValues" Text;

"OutThreshold1"  VARCHAR(100);
"OutThreshold2"  VARCHAR(100);
"OutThreshold3"  VARCHAR(100);
"OutThreshold4"  VARCHAR(100);
"OutThreshold5"  VARCHAR(100);
"OutThreshold6"  VARCHAR(100);
"OutThreshold7"  VARCHAR(100);
"OutThreshold8"  VARCHAR(100);
"OutThreshold9"  VARCHAR(100);
"OutThreshold10" VARCHAR(100);
"OutThreshold11" VARCHAR(100);
"OutThreshold12" VARCHAR(100);
"OutThreshold13" VARCHAR(100);
"OutThreshold14" VARCHAR(100);
"OutThreshold15" VARCHAR(100);
"OutThreshold16" VARCHAR(100);
"OutThreshold17" VARCHAR(100);
"OutThreshold18" VARCHAR(100);
"OutThreshold19" VARCHAR(100);
"OutThreshold20" VARCHAR(100);

"OutSegmentName1" VARCHAR(100);
"OutSegmentName2" VARCHAR(100);
"OutSegmentName3" VARCHAR(100);
"OutSegmentName4" VARCHAR(100);
"OutSegmentName5" VARCHAR(100);

"OutSourceColumnName1"  VARCHAR(100);
"OutTargetColumnName1"  VARCHAR(100);
"OutSourceColumnName2"  VARCHAR(100);
"OutTargetColumnName2"  VARCHAR(100);
"OutSourceColumnName3"  VARCHAR(100);
"OutTargetColumnName3"  VARCHAR(100);
"OutSourceColumnName4"  VARCHAR(100);
"OutTargetColumnName4"  VARCHAR(100);
"OutSourceColumnName5"  VARCHAR(100);
"OutTargetColumnName5"  VARCHAR(100);
"OutSourceColumnName6"  VARCHAR(100);
"OutTargetColumnName6"  VARCHAR(100);
"OutSourceColumnName7"  VARCHAR(100);
"OutTargetColumnName7"  VARCHAR(100);
"OutSourceColumnName8"  VARCHAR(100);
"OutTargetColumnName8"  VARCHAR(100);
"OutSourceColumnName9"  VARCHAR(100);
"OutTargetColumnName9"  VARCHAR(100);
"OutSourceColumnName10"  VARCHAR(100);
"OutTargetColumnName10"  VARCHAR(100);
"OutSourceColumnName11"  VARCHAR(100);
"OutTargetColumnName11"  VARCHAR(100);
"OutSourceColumnName12"  VARCHAR(100);
"OutTargetColumnName12"  VARCHAR(100);
"OutSourceColumnName13"  VARCHAR(100);
"OutTargetColumnName13"  VARCHAR(100);
"OutSourceColumnName14"  VARCHAR(100);
"OutTargetColumnName14"  VARCHAR(100);
"OutSourceColumnName15"  VARCHAR(100);
"OutTargetColumnName15"  VARCHAR(100);
"OutSourceColumnName16"  VARCHAR(100);
"OutTargetColumnName16"  VARCHAR(100);
"OutSourceColumnName17"  VARCHAR(100);
"OutTargetColumnName17"  VARCHAR(100);
"OutSourceColumnName18"  VARCHAR(100);
"OutTargetColumnName18"  VARCHAR(100);
"OutSourceColumnName19"  VARCHAR(100);
"OutTargetColumnName19"  VARCHAR(100);
"OutSourceColumnName20"  VARCHAR(100);
"OutTargetColumnName20"  VARCHAR(100);

"OutSourceTargetValue1DifferencePercent" VARCHAR(10);
"OutSourceTargetValue2DifferencePercent" VARCHAR(10);
"OutSourceTargetValue3DifferencePercent" VARCHAR(10);
"OutSourceTargetValue4DifferencePercent" VARCHAR(10);
"OutSourceTargetValue5DifferencePercent" VARCHAR(10);
"OutSourceTargetValue6DifferencePercent" VARCHAR(10);
"OutSourceTargetValue7DifferencePercent" VARCHAR(10);
"OutSourceTargetValue8DifferencePercent" VARCHAR(10);
"OutSourceTargetValue9DifferencePercent" VARCHAR(10);
"OutSourceTargetValue10DifferencePercent" VARCHAR(10);
"OutSourceTargetValue11DifferencePercent" VARCHAR(10);
"OutSourceTargetValue12DifferencePercent" VARCHAR(10);
"OutSourceTargetValue13DifferencePercent" VARCHAR(10);
"OutSourceTargetValue14DifferencePercent" VARCHAR(10);
"OutSourceTargetValue15DifferencePercent" VARCHAR(10);
"OutSourceTargetValue16DifferencePercent" VARCHAR(10);
"OutSourceTargetValue17DifferencePercent" VARCHAR(10);
"OutSourceTargetValue18DifferencePercent" VARCHAR(10);
"OutSourceTargetValue19DifferencePercent" VARCHAR(10);
"OutSourceTargetValue20DifferencePercent" VARCHAR(10);

DECLARE 
"ResultPercentage1"  VARCHAR(100);
"ResultPercentage2"  VARCHAR(100);
"ResultPercentage3"  VARCHAR(100);
"ResultPercentage4"  VARCHAR(100);
"ResultPercentage5"  VARCHAR(100);
"ResultPercentage6"  VARCHAR(100);
"ResultPercentage7"  VARCHAR(100);
"ResultPercentage8"  VARCHAR(100);
"ResultPercentage9"  VARCHAR(100);
"ResultPercentage10" VARCHAR(100);
"ResultPercentage11" VARCHAR(100);
"ResultPercentage12" VARCHAR(100);
"ResultPercentage13" VARCHAR(100);
"ResultPercentage14" VARCHAR(100);
"ResultPercentage15" VARCHAR(100);
"ResultPercentage16" VARCHAR(100);
"ResultPercentage17" VARCHAR(100);
"ResultPercentage18" VARCHAR(100);
"ResultPercentage19" VARCHAR(100);
"ResultPercentage20" VARCHAR(100);

DECLARE 
"SelectQueryString" TEXT;
"FromString" TEXT;
"WhereConditionString" TEXT;
"WhereConditionString2" TEXT;
"OrderByString" TEXT;

DECLARE
/*
SourceSegmentCount BIGINT;
TargetSegmentCount BIGINT;
*/
SourceSegmentCountSecondary BIGINT;
TargetSegmentCountSecondary BIGINT;
SourceColumnCount BIGINT;
TargetColumnCount BIGINT;

"lvBaseLineInd" VARCHAR(20);
"lvBaseLineValue" BIGINT;
"lvAlertType" VARCHAR(20);

"lvSegmentValue" VARCHAR(250);

BEGIN

"InTabInd" := upper("InTabInd");

/*SELECT STRING_AGG("Value",'^')
INTO "lvSegmentValue"
FROM (SELECT "Value"
		FROM UNNEST(STRING_TO_ARRAY(REPLACE("InSegmentValue",',','^'),'^')) "Value"
	 )x
WHERE x."Value" > '';
*/

SELECT "AlertTypeInd"
	INTO "lvAlertType"
FROM fda."FDAAlertRules" 
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";
		
SELECT 
"AlertTypeInd",
CAST("BaseLineValue" AS BIGINT),
"BaseLineValueType",
"SourceInfoEntryType",
"TargetInfoEntryType",
"ThresholdType"
/*CONCAT(
(CASE 
	WHEN "LowerThresholdType" = 'Percentage' THEN CONCAT(CAST("LowerThresholdValue" AS NUMERIC(17,1)),'% LCL')
	WHEN "LowerThresholdType" = 'StandardDeviation' THEN CONCAT(CAST("LowerThresholdValue" AS NUMERIC(17,1)),'σ LCL')
	WHEN "LowerThresholdType" = 'Absolute' THEN  CONCAT("LowerThresholdValue",' LCL')
	ELSE 'No LCL'
END),
'-',
(CASE 
	WHEN "UpperThresholdType" = 'Percentage' THEN CONCAT(CAST("UpperThresholdValue" AS NUMERIC(17,1)),'% UCL')
	WHEN "UpperThresholdType" = 'StandardDeviation' THEN CONCAT(CAST("UpperThresholdValue" AS NUMERIC(17,1)),'σ UCL')
	WHEN "UpperThresholdType" = 'Absolute' THEN  CONCAT("UpperThresholdValue",'UCL')
	ELSE 'No UCL'
 END))*/
INTO 
"lvAlertTypeInd",
"lvBaseLineValue",
"lvBaseLineInd",
"SourceType",
"TargetType",
"lvThresholdType"
--"OutThreshold"
FROM fda."FDAAlertRules"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

SELECT COALESCE("ThresholdInfo",'') 
INTO "OutThreshold"
FROM fda."FDAAlertOutput"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
AND "FDAAlertOutputId" = "InFDAAlertOutputId";

RAISE NOTICE 'VALUE: %','11111';
---------------------------------------------COLUMN AND SEGMENT COUNT----------------------------------------
/*SELECT COUNT(*) 
INTO SourceSegmentCount
FROM fda."FDAAlertRulesSourceSegment"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";

SELECT COUNT(*) 
INTO TargetSegmentCount
FROM fda."FDAAlertRulesTargetSegment"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";
*/

   SELECT COUNT(*) 
INTO SourceSegmentCountSecondary
FROM  fda."FDAAlertRulesSourceSegmentSecondary"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";

      SELECT COUNT(*) 
INTO TargetSegmentCountSecondary
FROM  fda."FDAAlertRulesTargetSegmentSecondary"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId";

SELECT COUNT(*) 
INTO SourceColumnCount
FROM fda."FDAAlertRulesSourceColumn"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId"
AND "Status" = 'true';

SELECT COUNT(*) 
INTO TargetColumnCount
FROM fda."FDAAlertRulesTargetColumn"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId"
AND "Status" = 'true';

--------------------------------------------------------------------------------------------------------------
IF UPPER("lvThresholdType") = 'CUSTOMIZE' THEN

SELECT COALESCE(MAX(CASE WHEN RowNum = 1 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 2 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 3 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 4 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 5 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 6 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 7 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 8 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 9 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 10 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 11 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 12 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 13 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 14 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 15 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 16 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 17 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 18 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 19 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL'),
	   COALESCE(MAX(CASE WHEN RowNum = 20 THEN "ThresholdInfo" ELSE NULL END)::TEXT,'No LCL - No UCL')
INTO
	"OutThreshold1", 
	"OutThreshold2", 
	"OutThreshold3", 
	"OutThreshold4", 
	"OutThreshold5",
	"OutThreshold6", 
	"OutThreshold7", 
	"OutThreshold8", 
	"OutThreshold9", 
	"OutThreshold10",
	"OutThreshold11",
	"OutThreshold12",
	"OutThreshold13",
	"OutThreshold14",
	"OutThreshold15",
	"OutThreshold16",
	"OutThreshold17",
	"OutThreshold18",
	"OutThreshold19",
	"OutThreshold20"
FROM(SELECT	DISTINCT 
			RowNum :: int,
			"ThresholdInfo"	   
	FROM(SELECT SPLIT_PART("VALUE",'(~)',1)::int RowNum,
			   SPLIT_PART("VALUE",'(~)',2) "ThresholdInfo"
		FROM UNNEST(STRING_TO_ARRAY("OutThreshold",'(^)')) "VALUE"
		)X
	)Y;
	
ELSE 

    "OutThreshold1"  := "OutThreshold";
	"OutThreshold2"  := "OutThreshold";
	"OutThreshold3"  := "OutThreshold";
	"OutThreshold4"  := "OutThreshold";
	"OutThreshold5"  := "OutThreshold";
	"OutThreshold6"  := "OutThreshold";
	"OutThreshold7"  := "OutThreshold";
	"OutThreshold8"  := "OutThreshold";
	"OutThreshold9"  := "OutThreshold";
	"OutThreshold10" := "OutThreshold";
	"OutThreshold11" := "OutThreshold";
	"OutThreshold12" := "OutThreshold";
	"OutThreshold13" := "OutThreshold";
	"OutThreshold14" := "OutThreshold";
	"OutThreshold15" := "OutThreshold";
	"OutThreshold16" := "OutThreshold";
	"OutThreshold17" := "OutThreshold";
	"OutThreshold18" := "OutThreshold";
	"OutThreshold19" := "OutThreshold";
	"OutThreshold20" := "OutThreshold";
END IF;

------------------------------------------------------------FETCH SEGMENT NAMES---------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------FETCH SOURCE SEGMENT
IF COALESCE(SourceSegmentCountSecondary,0) > 0 THEN 
	IF UPPER("SourceType") = 'EDITOR' THEN
	RAISE NOTICE 'SourceType: %','SourceType EDITOR';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT DISTINCT 
			a."GroupBySourceColumnName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesSourceSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesSourceSegment" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegmentSecondary1",
		"SourceSegmentSecondary2",
		"SourceSegmentSecondary3",
		"SourceSegmentSecondary4",
		"SourceSegmentSecondary5"
		FROM
		(
		SELECT DISTINCT 
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			  FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
					FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
					WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
					AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
					 AND "SegmentValues" = "InSegmentValue" 
				)Y
			) X
		)Z;
	
	ELSE
	RAISE NOTICE 'SourceType: %','SourceType wizard';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegment1",
		"SourceSegment2",
		"SourceSegment3",
		"SourceSegment4",
		"SourceSegment5"
		FROM
		(
		SELECT  b."FieldName" "SegmentName",
				ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesSourceSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesSourceSegment" a,
			fda."FDASystemObjectFields" b
		WHERE a."GroupBySourceColumnId" = b."FDASystemObjectFieldsId"
		AND a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;
		*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"SourceSegmentSecondary1",
		"SourceSegmentSecondary2",
		"SourceSegmentSecondary3",
		"SourceSegmentSecondary4",
		"SourceSegmentSecondary5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				  AND "SegmentValues" = "InSegmentValue"
				)Y
			) X
		) Z;
	
	
	END IF;
END IF;

/*
RAISE NOTICE 'TargetSegment1: %',"SourceSegment1";
		RAISE NOTICE 'TargetSegment2: %',"SourceSegment2";
		RAISE NOTICE 'TargetSegment3: %',"SourceSegment3";
		RAISE NOTICE 'TargetSegment4: %',"SourceSegment4";
		RAISE NOTICE 'TargetSegment5: %',"SourceSegment5";

*/
RAISE NOTICE 'VALUE: %','FETCH TARGET SEGMENTS';
------------------------------------------------------------FETCH TARGET SEGMENTS

IF COALESCE(TargetSegmentCountSecondary,0) > 0 THEN

	IF UPPER("TargetType") = 'EDITOR' THEN
	
	RAISE NOTICE 'TargetType: %','TargetType EDITOR';
		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegment1",
		"TargetSegment2",
		"TargetSegment3",
		"TargetSegment4",
		"TargetSegment5"
		FROM 
		(
		SELECT  DISTINCT 
			a."GroupByTargetColumnName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesTargetSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesTargetSegment" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		) X;*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegmentSecondary1",
		"TargetSegmentSecondary2",
		"TargetSegmentSecondary3",
		"TargetSegmentSecondary4",
		"TargetSegmentSecondary5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				  AND "SegmentValues" = "InSegmentValue"
				)Y
			) X
		) Z;
		/*	
		RAISE NOTICE 'TargetSegment1: %',"TargetSegment1";
		RAISE NOTICE 'TargetSegment2: %',"TargetSegment2";
		RAISE NOTICE 'TargetSegment3: %',"TargetSegment3";
		RAISE NOTICE 'TargetSegment4: %',"TargetSegment4";
		RAISE NOTICE 'TargetSegment5: %',"TargetSegment5";
	*/
	ELSE
	
			RAISE NOTICE 'TargetType: %','TargetType WIZARD';

		/*SELECT  
		MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegment1",	
		"TargetSegment2",
		"TargetSegment3",
		"TargetSegment4",
		"TargetSegment5"
		FROM
		(
		SELECT  
			b."FieldName" "SegmentName",
			ROW_NUMBER ( ) OVER ( ORDER BY a."FDAAlertRulesTargetSegmentId" ASC )  RowNum
		FROM fda."FDAAlertRulesTargetSegment" a,
			fda."FDASystemObjectFields" b
		WHERE a."GroupByTargetColumnId" = b."FDASystemObjectFieldsId"
		AND a."FDAAlertRulesId" = "InFDAAlertRulesId"
		) X;
		*/
		SELECT  
			MAX(CASE WHEN RowNum = 1 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 4 THEN "SegmentName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 5 THEN "SegmentName" ELSE NULL END) 
		INTO 
		"TargetSegmentSecondary1",	
		"TargetSegmentSecondary2",
		"TargetSegmentSecondary3",
		"TargetSegmentSecondary4",
		"TargetSegmentSecondary5"
		FROM
		(
		SELECT DISTINCT
			RowNum :: int,
			"SegmentName"
			
		FROM (SELECT 
			  		SPLIT_PART("SegmentName",'~','1') ::int RowNum,
			  		SPLIT_PART("SegmentName",'~','2') "SegmentName"
			FROM(SELECT UNNEST(STRING_TO_ARRAY("SegmentInfo",'^')) "SegmentName"
				 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
				 WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
				 AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
				 AND "SegmentValues" = "InSegmentValue"
				)Y
			) X
		) Z;
	
	END IF;

END IF;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 "OutSegmentName1" := COALESCE("SourceSegmentSecondary1","TargetSegmentSecondary1");
 "OutSegmentName2" := COALESCE("SourceSegmentSecondary2","TargetSegmentSecondary2");
 "OutSegmentName3" := COALESCE("SourceSegmentSecondary3","TargetSegmentSecondary3");
 "OutSegmentName4" := COALESCE("SourceSegmentSecondary4","TargetSegmentSecondary4");
 "OutSegmentName5" := COALESCE("SourceSegmentSecondary5","TargetSegmentSecondary5");
 
 
 /*
RAISE NOTICE 'OutSegmentName1: %',"OutSegmentName1";
RAISE NOTICE 'OutSegmentName2: %',"OutSegmentName2";
RAISE NOTICE 'OutSegmentName3: %',"OutSegmentName3";
RAISE NOTICE 'OutSegmentName4: %',"OutSegmentName4";
RAISE NOTICE 'OutSegmentName5: %',"OutSegmentName5";
*/
----------------------------------------------------------COLUMN NAMES---------------------------------------------------------------------------------------------------------
RAISE NOTICE 'VALUE: %','33333';
-----------------------------------------------------------FETCH SOURCE COLUMNS

IF COALESCE(SourceColumnCount,0) > 0 THEN 

	IF UPPER("SourceType") = 'EDITOR' THEN
	
		/*SELECT 
		MAX(CASE WHEN RowNum = 1  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN CONCAT("Function",' Of ',"ColumnName",'')  ELSE NULL END)
		INTO 
		"OutSourceColumnName1" ,
		"OutSourceColumnName2" ,
		"OutSourceColumnName3" ,
		"OutSourceColumnName4" ,
		"OutSourceColumnName5" ,
		"OutSourceColumnName6" ,
		"OutSourceColumnName7" ,
		"OutSourceColumnName8" ,
		"OutSourceColumnName9" ,
		"OutSourceColumnName10",
		"OutSourceColumnName11",
		"OutSourceColumnName12",
		"OutSourceColumnName13",
		"OutSourceColumnName14",
		"OutSourceColumnName15",
		"OutSourceColumnName16",
		"OutSourceColumnName17",
		"OutSourceColumnName18",
		"OutSourceColumnName19",
		"OutSourceColumnName20"
		FROM
		(
		SELECT DISTINCT 
		RANK () OVER ( ORDER BY a."Position" ASC ) RowNum,
		a."SourceColumnName" "ColumnName",
		a."Function" "Function"
		FROM fda."FDAAlertRulesSourceColumn" a
		WHERE a."FDAAlertRulesId" =  "InFDAAlertRulesId"
		AND a."Status" = 'true'
		) X; */
		SELECT 
			MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2  THEN "ColumnName"  ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 10  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 12  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 13  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 14  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 15  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 16  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 17  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 18  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 19  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 20  THEN "ColumnName" ELSE NULL END)
		INTO 
			"OutSourceColumnName1" ,
			"OutSourceColumnName2" ,
			"OutSourceColumnName3" ,
			"OutSourceColumnName4" ,
			"OutSourceColumnName5" ,
			"OutSourceColumnName6" ,
			"OutSourceColumnName7" ,
			"OutSourceColumnName8" ,
			"OutSourceColumnName9" ,
			"OutSourceColumnName10",
			"OutSourceColumnName11",
			"OutSourceColumnName12",
			"OutSourceColumnName13",
			"OutSourceColumnName14",
			"OutSourceColumnName15",
			"OutSourceColumnName16",
			"OutSourceColumnName17",
			"OutSourceColumnName18",
			"OutSourceColumnName19",
			"OutSourceColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT RowNum,
				SPLIT_PART("ColumnName",'^',2) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
		AND  "SegmentValues" = "InSegmentValue")x
		)y;
	
	ELSE
	
		/*SELECT  
		MAX(CASE WHEN RowNum = 1  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN CONCAT("Function",' Of ',"SegmentName",'') ELSE NULL END) 
		INTO 
		"OutSourceColumnName1" ,
		"OutSourceColumnName2" ,
		"OutSourceColumnName3" ,
		"OutSourceColumnName4" ,
		"OutSourceColumnName5" ,
		"OutSourceColumnName6" ,
		"OutSourceColumnName7" ,
		"OutSourceColumnName8" ,
		"OutSourceColumnName9" ,
		"OutSourceColumnName10",
		"OutSourceColumnName11",
		"OutSourceColumnName12",
		"OutSourceColumnName13",
		"OutSourceColumnName14",
		"OutSourceColumnName15",
		"OutSourceColumnName16",
		"OutSourceColumnName17",
		"OutSourceColumnName18",
		"OutSourceColumnName19",
		"OutSourceColumnName20"
		FROM
		(
		SELECT  
		RANK () OVER ( ORDER BY a."Position" ASC ) RowNum,
		a."SourceColumnName" "SegmentName",
		a."Function" "Function"
		FROM fda."FDAAlertRulesSourceColumn" a
		WHERE a."FDAAlertRulesId" = "InFDAAlertRulesId"
		AND a."Status" = 'true'
		) X;*/
		SELECT 
			MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 2  THEN "ColumnName"  ELSE NULL END) ,
			MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 10  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 12  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 13  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 14  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 15  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 16  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 17  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 18  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 19  THEN "ColumnName" ELSE NULL END),
			MAX(CASE WHEN RowNum = 20  THEN "ColumnName" ELSE NULL END)
		INTO 
			"OutSourceColumnName1" ,
			"OutSourceColumnName2" ,
			"OutSourceColumnName3" ,
			"OutSourceColumnName4" ,
			"OutSourceColumnName5" ,
			"OutSourceColumnName6" ,
			"OutSourceColumnName7" ,
			"OutSourceColumnName8" ,
			"OutSourceColumnName9" ,
			"OutSourceColumnName10",
			"OutSourceColumnName11",
			"OutSourceColumnName12",
			"OutSourceColumnName13",
			"OutSourceColumnName14",
			"OutSourceColumnName15",
			"OutSourceColumnName16",
			"OutSourceColumnName17",
			"OutSourceColumnName18",
			"OutSourceColumnName19",
			"OutSourceColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				SPLIT_PART("ColumnName",'^',2) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
		AND "SegmentValues" = "InSegmentValue")x
		)y;
	
	END IF;

END IF;

--------------------------------------------------------------FETCH TARGET COLUMNS

IF COALESCE(TargetColumnCount,0) > 0 THEN

	IF UPPER("TargetType") = 'EDITOR' THEN
	
		SELECT 
		MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN "ColumnName" ELSE NULL END) 
		INTO 
		"OutTargetColumnName1",
		"OutTargetColumnName2",
		"OutTargetColumnName3",
		"OutTargetColumnName4",
		"OutTargetColumnName5",
		"OutTargetColumnName6",
		"OutTargetColumnName7",
		"OutTargetColumnName8",
		"OutTargetColumnName9",
		"OutTargetColumnName10",
		"OutTargetColumnName11",
		"OutTargetColumnName12",
		"OutTargetColumnName13",
		"OutTargetColumnName14",
		"OutTargetColumnName15",
		"OutTargetColumnName16",
		"OutTargetColumnName17",
		"OutTargetColumnName18",
		"OutTargetColumnName19",
		"OutTargetColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				COALESCE(NULLIF(SPLIT_PART("ColumnName",'^',3),''),SPLIT_PART("ColumnName",'^',2)) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
		AND "SegmentValues" = "InSegmentValue")x
		)y;
	
	ELSE
	
		SELECT  
		MAX(CASE WHEN RowNum = 1  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 2  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 3  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 4  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 5  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 6  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 7  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 8  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 9  THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 10 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 11 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 12 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 13 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 14 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 15 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 16 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 17 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 18 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 19 THEN "ColumnName" ELSE NULL END) ,
		MAX(CASE WHEN RowNum = 20 THEN "ColumnName" ELSE NULL END) 
		INTO 
		"OutTargetColumnName1",
		"OutTargetColumnName2",
		"OutTargetColumnName3",
		"OutTargetColumnName4",
		"OutTargetColumnName5",
		"OutTargetColumnName6",
		"OutTargetColumnName7",
		"OutTargetColumnName8",
		"OutTargetColumnName9",
		"OutTargetColumnName10",
		"OutTargetColumnName11",
		"OutTargetColumnName12",
		"OutTargetColumnName13",
		"OutTargetColumnName14",
		"OutTargetColumnName15",
		"OutTargetColumnName16",
		"OutTargetColumnName17",
		"OutTargetColumnName18",
		"OutTargetColumnName19",
		"OutTargetColumnName20"
		FROM
		(SELECT  
				SPLIT_PART("ColumnName",'^',1):: INT  RowNum ,
				COALESCE(NULLIF(SPLIT_PART("ColumnName",'^',3),''),SPLIT_PART("ColumnName",'^',2)) "ColumnName"
	
			FROM (SELECT DISTINCT
		UNNEST(STRING_TO_ARRAY("ColumnInfo",'|')) "ColumnName"
		FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
		WHERE "FDAAlertRulesId" = "InFDAAlertRulesId"
		AND  "FDAAlertOutputId"  = "InFDAAlertOutputId"
		AND "SegmentValues" = "InSegmentValue")x
		)y;
	
	END IF;

END IF;

RAISE NOTICE 'VALUE: %','4444';

IF COALESCE("OutTargetColumnName1",'') = '' AND COALESCE("OutTargetColumnName2",'') = '' 
THEN
RAISE NOTICE 'VALUE: %','row count block';
	"OutSourceColumnName1" := COALESCE("OutSourceColumnName1",'Row Count');
	"OutTargetColumnName1" := COALESCE("OutTargetColumnName1",'Row Count');
END IF;
IF COALESCE("OutSourceColumnName1",'') = '' AND COALESCE("OutTargetColumnName1",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName1",' ( Last Run )') 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName1",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName1",' ( AVG of Last ',"lvBaseLineValue",' Run )')  END )
	INTO "OutSourceColumnName1"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName1",' ( Latest Run )') 
	INTO "OutTargetColumnName1";
END IF;
IF COALESCE("OutSourceColumnName2",'') = '' AND COALESCE("OutTargetColumnName2",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN CONCAT("OutTargetColumnName2",' ( Last Run )') 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName2",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName2",' (AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName2"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName2",' ( Latest Run )')  
	INTO "OutTargetColumnName2";
	
END IF;

IF COALESCE("OutSourceColumnName3",'') = '' AND COALESCE("OutTargetColumnName3",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN CONCAT("OutTargetColumnName3",' ( Last Run )')
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName3",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName3",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName3"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName3",' ( Latest Run )') 
	INTO "OutTargetColumnName3";
	
END IF;
IF COALESCE("OutSourceColumnName4",'') = '' AND COALESCE("OutTargetColumnName4",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName4",' ( Last Run )' )
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName4",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName4",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName4"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName4",' ( Latest Run )') 
	INTO "OutTargetColumnName4";
	
END IF;

IF COALESCE("OutSourceColumnName5",'') = '' AND COALESCE("OutTargetColumnName5",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName5",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName5",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName5",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName5"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName5",' ( Latest Run )')  
	INTO "OutTargetColumnName5";
END IF;

IF COALESCE("OutSourceColumnName6",'') = '' AND COALESCE("OutTargetColumnName6",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName6",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName6",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName6",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName6"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName6",' ( Latest Run )')  
	INTO "OutTargetColumnName6";
END IF;

IF COALESCE("OutSourceColumnName7",'') = '' AND COALESCE("OutTargetColumnName7",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName7",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName7",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName7",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName7"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName7",' ( Latest Run )')  
	INTO "OutTargetColumnName7";
END IF;

IF COALESCE("OutSourceColumnName8",'') = '' AND COALESCE("OutTargetColumnName8",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName8",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName8",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName8",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName8"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName8",' ( Latest Run )')  
	INTO "OutTargetColumnName8";
END IF;

IF COALESCE("OutSourceColumnName9",'') = '' AND COALESCE("OutTargetColumnName9",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName9",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName9",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName9",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName9"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName9",' ( Latest Run )')  
	INTO "OutTargetColumnName9";
END IF;

IF COALESCE("OutSourceColumnName10",'') = '' AND COALESCE("OutTargetColumnName10",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName10",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName10",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName10",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName10"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName10",' ( Latest Run )')  
	INTO "OutTargetColumnName10";
END IF;

IF COALESCE("OutSourceColumnName11",'') = '' AND COALESCE("OutTargetColumnName11",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName11",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName11",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName11",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName11"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName11",' ( Latest Run )')  
	INTO "OutTargetColumnName11";
END IF;

IF COALESCE("OutSourceColumnName12",'') = '' AND COALESCE("OutTargetColumnName12",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName12",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName12",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName12",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName12"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName12",' ( Latest Run )')  
	INTO "OutTargetColumnName12";
END IF;

IF COALESCE("OutSourceColumnName13",'') = '' AND COALESCE("OutTargetColumnName13",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName13",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName13",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName13",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName13"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName13",' ( Latest Run )')  
	INTO "OutTargetColumnName13";
END IF;

IF COALESCE("OutSourceColumnName14",'') = '' AND COALESCE("OutTargetColumnName14",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName14",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName14",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName14",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName14"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName14",' ( Latest Run )')  
	INTO "OutTargetColumnName14";
END IF;

IF COALESCE("OutSourceColumnName15",'') = '' AND COALESCE("OutTargetColumnName15",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName15",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName15",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName15",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName15"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName15",' ( Latest Run )')  
	INTO "OutTargetColumnName15";
END IF;

IF COALESCE("OutSourceColumnName16",'') = '' AND COALESCE("OutTargetColumnName16",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName16",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName16",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName16",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName16"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName16",' ( Latest Run )')  
	INTO "OutTargetColumnName16";
END IF;

IF COALESCE("OutSourceColumnName17",'') = '' AND COALESCE("OutTargetColumnName17",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName17",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName17",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName17",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName17"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName17",' ( Latest Run )')  
	INTO "OutTargetColumnName17";
END IF;

IF COALESCE("OutSourceColumnName18",'') = '' AND COALESCE("OutTargetColumnName18",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName18",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName18",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName18",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName18"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName18",' ( Latest Run )')  
	INTO "OutTargetColumnName18";
END IF;

IF COALESCE("OutSourceColumnName19",'') = '' AND COALESCE("OutTargetColumnName19",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName19",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName19",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName19",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName19"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName19",' ( Latest Run )')  
	INTO "OutTargetColumnName19";
END IF;

IF COALESCE("OutSourceColumnName20",'') = '' AND COALESCE("OutTargetColumnName20",'') > '' 
THEN

    SELECT (CASE WHEN UPPER("BaseLineValueType") = 'LASTVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
				THEN CONCAT("OutTargetColumnName20",' ( Last Run )' ) 
			 WHEN UPPER("BaseLineValueType") = 'FIXEDVALUE' AND UPPER("lvAlertTypeInd") IN ('TARGETVALUE','TARGETCOUNT') 
						THEN  CONCAT("OutTargetColumnName20",' ( FixedValue )')
			ELSE CONCAT("OutTargetColumnName20",' ( AVG of Last ',"lvBaseLineValue",' Run )') END )
	INTO "OutSourceColumnName20"
	FROM fda."FDAAlertRules" WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";
	
	SELECT CONCAT("OutTargetColumnName20",' ( Latest Run )')  
	INTO "OutTargetColumnName20";
END IF;

RAISE NOTICE 'VALUE: %','55555';
----------------------------------------------------------------------------------------------------------------------------------------------------------
"SelectQueryString" := ' 
                SELECT *
				FROM
				(
				SELECT c."FDAAlertOutputByAdvancedSegmentLevel2Id",
                       c."FDAAlertOutputId",c."SegmentValues",
                       SUBSTRING(CAST(c."ReconciliationDate" AS VARCHAR),6,5) "RunDate",
                       CAST(CAST(c."ReconciliationTime" AS TIME)AS VARCHAR(15)) "ReconciliationTime",
					   (CASE WHEN COALESCE(c."SourceSegment1",''TOTAL'')  = COALESCE(c."TargetSegment1",''TOTAL'') 
								THEN COALESCE(c."TargetSegment1",''TOTAL'') 
					   		 WHEN COALESCE(c."SourceSegment1",'''')  = '''' AND COALESCE(c."TargetSegment1",'''') > '''' 
								THEN c."TargetSegment1"
					   		 WHEN COALESCE(c."TargetSegment1",'''')  = '''' AND COALESCE(c."SourceSegment1",'''') > '''' 
								THEN c."SourceSegment1"
					   		 ELSE c."TargetSegment1" 
					   	END) "SegmentValue1",
					    (CASE WHEN COALESCE(c."SourceSegment2",''TOTAL'')  = COALESCE(c."TargetSegment2",''TOTAL'') 
								THEN c."TargetSegment2" 
					    	  WHEN COALESCE(c."SourceSegment2",'''')  = '''' AND COALESCE(c."TargetSegment2",'''') > '''' 
								THEN c."TargetSegment2"
					    	  WHEN COALESCE(c."TargetSegment2",'''')  = '''' AND COALESCE(c."SourceSegment2",'''') > '''' 
								THEN c."SourceSegment2"
					    	  ELSE c."TargetSegment2"
					    END) "SegmentValue2",
					    (CASE WHEN COALESCE(c."SourceSegment3",''TOTAL'')  = COALESCE(c."TargetSegment3",''TOTAL'') 
								THEN c."TargetSegment3"
					    	  WHEN COALESCE(c."SourceSegment3",'''')  = '''' AND COALESCE(c."TargetSegment3",'''') != '''' 
								THEN c."TargetSegment3"
					    	  WHEN COALESCE(c."TargetSegment3",'''')  = '''' AND COALESCE(c."SourceSegment3",'''') != '''' 
								THEN c."SourceSegment3"
					    	  ELSE c."TargetSegment3"
					    END) "SegmentValue3",
					    (CASE WHEN COALESCE(c."SourceSegment4",''TOTAL'')  = COALESCE(c."TargetSegment4",''TOTAL'') 
								THEN c."TargetSegment4"
					    	  WHEN COALESCE(c."SourceSegment4",'''')  = '''' AND COALESCE(c."TargetSegment4",'''') != '''' 
								THEN c."TargetSegment4"
					    	  WHEN COALESCE(c."TargetSegment4",'''')  = '''' AND COALESCE(c."SourceSegment4",'''') != '''' 
								THEN c."SourceSegment4"
					    	  ELSE c."TargetSegment4" 
					    END) "SegmentValue4",
					    (CASE WHEN COALESCE(c."SourceSegment5",''TOTAL'')  = COALESCE(c."TargetSegment5",''TOTAL'') 
								THEN c."TargetSegment5"
					    	  WHEN COALESCE(c."SourceSegment5",'''')  = '''' AND COALESCE(c."TargetSegment5",'''') != '''' 
								THEN c."TargetSegment5"
					    	  WHEN COALESCE(c."TargetSegment5",'''')  = '''' AND COALESCE(c."SourceSegment5",'''') != '''' 
								THEN c."SourceSegment5"
					    	  ELSE c."TargetSegment5"
					    END) "SegmentValue5",		
								
					    CAST(c."SourceValue1" AS  NUMERIC(39,2)) "SourceValue1",
                        CAST(c."TargetValue1" AS   NUMERIC(39,2)) "TargetValue1",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue1" AS  NUMERIC(39,2)),CAST(c."TargetValue1" AS   NUMERIC(39,2))) "ValueDiff1",						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold1",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority1",

					    CAST( c."SourceValue2" AS  NUMERIC(39,2))  "SourceValue2",
                        CAST(c."TargetValue2"   AS  NUMERIC(39,2)) "TargetValue2",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue2" AS  NUMERIC(39,2)),CAST(c."TargetValue2" AS   NUMERIC(39,2))) "ValueDiff2",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = ''93''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold2",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
						END) "ColorBasedSeviority2",

					    CAST( c."SourceValue3"  AS  NUMERIC(39,2)) "SourceValue3",
                        CAST(c."TargetValue3"  AS  NUMERIC(39,2)) "TargetValue3",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue3" AS  NUMERIC(39,2)),CAST(c."TargetValue3" AS   NUMERIC(39,2))) "ValueDiff3",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''1'' THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''2''   THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''3''   THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''9''   THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold3",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority3",

					    CAST(c."SourceValue4" AS  NUMERIC(39,2)) "SourceValue4",
                        CAST(c."TargetValue4"  AS  NUMERIC(39,2)) "TargetValue4",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue4" AS  NUMERIC(39,2)),CAST(c."TargetValue4" AS   NUMERIC(39,2))) "ValueDiff4",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold4",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority4",

					    CAST(c."SourceValue5" AS  NUMERIC(39,2)) "SourceValue5",
                        CAST(c."TargetValue5" AS  NUMERIC(39,2)) "TargetValue5",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue5" AS  NUMERIC(39,2)),CAST(c."TargetValue5" AS   NUMERIC(39,2))) "ValueDiff5",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold5",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority5",
						
						CAST(c."SourceValue6" AS  NUMERIC(39,2)) "SourceValue6",
                        CAST(c."TargetValue6" AS  NUMERIC(39,2)) "TargetValue6",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue6" AS  NUMERIC(39,2)),CAST(c."TargetValue6" AS   NUMERIC(39,2))) "ValueDiff6",						

						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold6",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority6", 
						
						CAST(c."SourceValue7" AS  NUMERIC(39,2)) "SourceValue7",
                        CAST(c."TargetValue7" AS  NUMERIC(39,2)) "TargetValue7",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue7" AS  NUMERIC(39,2)),CAST(c."TargetValue7" AS   NUMERIC(39,2))) "ValueDiff7",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold7",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority7",
						
						CAST(c."SourceValue8" AS  NUMERIC(39,2)) "SourceValue8",
                        CAST(c."TargetValue8" AS  NUMERIC(39,2)) "TargetValue8",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue8" AS  NUMERIC(39,2)),CAST(c."TargetValue8" AS   NUMERIC(39,2))) "ValueDiff8",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold8",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority8",
						
						CAST(c."SourceValue9" AS  NUMERIC(39,2)) "SourceValue9",
                        CAST(c."TargetValue9" AS  NUMERIC(39,2)) "TargetValue9",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue9" AS  NUMERIC(39,2)),CAST(c."TargetValue9" AS   NUMERIC(39,2))) "ValueDiff9",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold9",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority9",
						
						CAST(c."SourceValue10" AS  NUMERIC(39,2)) "SourceValue10",
                        CAST(c."TargetValue10" AS  NUMERIC(39,2)) "TargetValue10",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue10" AS  NUMERIC(39,2)),CAST(c."TargetValue10" AS   NUMERIC(39,2))) "ValueDiff10",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold10",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority10",
						
						CAST(c."SourceValue11" AS  NUMERIC(39,2)) "SourceValue11",
                        CAST(c."TargetValue11" AS  NUMERIC(39,2)) "TargetValue11",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue11" AS  NUMERIC(39,2)),CAST(c."TargetValue11" AS   NUMERIC(39,2))) "ValueDiff11",						

						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold11",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority11",
						
						CAST(c."SourceValue12" AS  NUMERIC(39,2)) "SourceValue12",
                        CAST(c."TargetValue12" AS  NUMERIC(39,2)) "TargetValue12",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue12" AS  NUMERIC(39,2)),CAST(c."TargetValue12" AS   NUMERIC(39,2))) "ValueDiff12",						
						
					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold12",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority12",
						
						CAST(c."SourceValue13" AS  NUMERIC(39,2)) "SourceValue13",
                        CAST(c."TargetValue13" AS  NUMERIC(39,2)) "TargetValue13",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue13" AS  NUMERIC(39,2)),CAST(c."TargetValue13" AS   NUMERIC(39,2))) "ValueDiff13",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold13",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority13",
						
						CAST(c."SourceValue14" AS  NUMERIC(39,2)) "SourceValue14",
                        CAST(c."TargetValue14" AS  NUMERIC(39,2)) "TargetValue14",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue14" AS  NUMERIC(39,2)),CAST(c."TargetValue14" AS   NUMERIC(39,2))) "ValueDiff14",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold14",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority14",
						
						CAST(c."SourceValue15" AS  NUMERIC(39,2)) "SourceValue15",
                        CAST(c."TargetValue15" AS  NUMERIC(39,2)) "TargetValue15",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue15" AS  NUMERIC(39,2)),CAST(c."TargetValue15" AS   NUMERIC(39,2))) "ValueDiff15",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold15",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority15",
						
						CAST(c."SourceValue16" AS  NUMERIC(39,2)) "SourceValue16",
                        CAST(c."TargetValue16" AS  NUMERIC(39,2)) "TargetValue16",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue16" AS  NUMERIC(39,2)),CAST(c."TargetValue16" AS   NUMERIC(39,2))) "ValueDiff16",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold16",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority16",
						
						CAST(c."SourceValue17" AS  NUMERIC(39,2)) "SourceValue17",
                        CAST(c."TargetValue17" AS  NUMERIC(39,2)) "TargetValue17",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue17" AS  NUMERIC(39,2)),CAST(c."TargetValue17" AS   NUMERIC(39,2))) "ValueDiff17",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold17",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority17",
						
						CAST(c."SourceValue18" AS  NUMERIC(39,2)) "SourceValue18",
                        CAST(c."TargetValue18" AS  NUMERIC(39,2)) "TargetValue18",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue18" AS  NUMERIC(39,2)),CAST(c."TargetValue18" AS   NUMERIC(39,2))) "ValueDiff18",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold18",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority18",
						
						CAST(c."SourceValue19" AS  NUMERIC(39,2)) "SourceValue19",
                        CAST(c."TargetValue19" AS  NUMERIC(39,2)) "TargetValue19",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue19" AS  NUMERIC(39,2)),CAST(c."TargetValue19" AS   NUMERIC(39,2))) "ValueDiff19",

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold19",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority19",
						
						CAST(c."SourceValue20" AS  NUMERIC(39,2)) "SourceValue20",
                        CAST(c."TargetValue20" AS  NUMERIC(39,2)) "TargetValue20",
						fda."fn_GetFDASourceTargetDiffPercentage"(CAST(c."SourceValue20" AS  NUMERIC(39,2)),CAST(c."TargetValue20" AS   NUMERIC(39,2))) "ValueDiff20",						

					    (CASE 
							WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''1''  THEN ''RED''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''2''  THEN ''YELLOW''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''3''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''9''  THEN ''WHITE''
							WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = ''93''  THEN ''WHITE''
					    	WHEN COALESCE(c."ColorBasedoThreasold20",'''')  = '''' THEN ''WHITE''
					    	ELSE ''WHITE''
					    END) "ColorBasedSeviority20",
						
						(CASE
							WHEN c."ColorBasedoThreasold1" = ''1'' OR c."ColorBasedoThreasold2"  = ''1'' 
								OR c."ColorBasedoThreasold3" = ''1'' OR c."ColorBasedoThreasold4"  = ''1'' 
									OR c."ColorBasedoThreasold5" = ''1'' OR c."ColorBasedoThreasold6"  = ''1'' 
										OR c."ColorBasedoThreasold7" = ''1'' OR c."ColorBasedoThreasold8"  = ''1'' 
											OR c."ColorBasedoThreasold9" = ''1'' OR c."ColorBasedoThreasold10" = ''1'' 
												OR c."ColorBasedoThreasold11" = ''1'' OR c."ColorBasedoThreasold12" = ''1'' 
													OR c."ColorBasedoThreasold13" = ''1'' OR c."ColorBasedoThreasold14" = ''1'' 
														OR c."ColorBasedoThreasold15" = ''1'' OR c."ColorBasedoThreasold16" = ''1'' 
															OR c."ColorBasedoThreasold17" = ''1'' OR c."ColorBasedoThreasold18" = ''1'' 
																OR c."ColorBasedoThreasold19" = ''1'' OR c."ColorBasedoThreasold20" = ''1''
								THEN ''Y''
							ELSE ''N''
						END) "DrillThroghInd" ';

 "FromString" := CONCAT(' FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"  AS c
 INNER JOIN (SELECT MAX("CreatedDateTime") as "CreatedDateTime"
			FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
			WHERE  "FDAAlertRulesId" = ',"InFDAAlertRulesId",'
			AND "FDAAlertOutputId" =  ',"InFDAAlertOutputId",'
			AND "SegmentValues" =''',replace("InSegmentValue",'''',''''''),''')b
on c."CreatedDateTime" = b."CreatedDateTime"
INNER JOIN  fda."FDAAlertRules" a
ON c."FDAAlertRulesId" = a."FDAAlertRulesId"
 ');

 "WhereConditionString" := CONCAT('

  WHERE c."FDAAlertRulesId" = ',"InFDAAlertRulesId",'
  AND c."FDAAlertOutputId" = ',"InFDAAlertOutputId",'
  AND c."SegmentValues" =''',replace("InSegmentValue",'''',''''''),'''
  AND c."TargetSegment1" NOT IN (SELECT "TargetSegmentValue1"
								FROM fda."FDAAlertRulesTargetSegmentValue"
							    WHERE "FDAAlertRulesId" = ',"InFDAAlertRulesId",'
								  AND "CheckedStatus" = ''FALSE'') )x');
"WhereConditionString2" :=CONCAT(' WHERE CONCAT("ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
												"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20"	) LIKE ''%RED%''
								OR CONCAT("ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
												"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20"	) LIKE ''%YELLOW%'' ');

 "OrderByString" := CASE WHEN "InOrderByColumnName" > '' AND "InOrderBy" > '' AND "InTabInd" = 'Y' THEN
                        CONCAT(' ORDER BY "',"InOrderByColumnName",'","ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
								"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
						 WHEN "InOrderByColumnName" = '' AND "InOrderBy" = '' AND "InTabInd" = 'Y' THEN
                        CONCAT(' ORDER BY "ColorBasedSeviority1","ColorBasedSeviority2","ColorBasedSeviority3","ColorBasedSeviority4","ColorBasedSeviority5","ColorBasedSeviority6","ColorBasedSeviority7","ColorBasedSeviority8","ColorBasedSeviority9","ColorBasedSeviority10",
								"ColorBasedSeviority11","ColorBasedSeviority12","ColorBasedSeviority13","ColorBasedSeviority14","ColorBasedSeviority15","ColorBasedSeviority16","ColorBasedSeviority17","ColorBasedSeviority18","ColorBasedSeviority19","ColorBasedSeviority20" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
						 WHEN "InOrderByColumnName" > '' AND "InOrderBy" > '' THEN
						 CONCAT(' ORDER BY "',"InOrderByColumnName",'" ',"InOrderBy",' 
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
                        ELSE 						
							 CONCAT(' ORDER BY "SegmentValue1","SegmentValue2","SegmentValue3","SegmentValue4","SegmentValue5" ASC
	                     OFFSET ',"InOffSet",' ROWS
	                     FETCH NEXT ',"InLimit",' ROWS ONLY;')
                        /*ELSE CONCAT(' ORDER BY x."ColorBasedSeviority1",
						                       x."ColorBasedSeviority2",
                                               x."ColorBasedSeviority3",
		                                       x."ColorBasedSeviority4",
		                                       x."ColorBasedSeviority5" ASC
                                      OFFSET ',"InOffSet",' ROWS
                                      FETCH NEXT ',"InLimit",' ROWS ONLY')
									*/
                         END;

IF "InTabInd" = 'Y' THEN 
 "SelectQueryString" := CONCAT("SelectQueryString","FromString","WhereConditionString","WhereConditionString2","OrderByString");
 ELSE 
"SelectQueryString" := CONCAT("SelectQueryString","FromString","WhereConditionString","OrderByString");
END IF;
--RAISE NOTICE 'SelectQueryString: %',"SelectQueryString";
--RAISE NOTICE 'WhereConditionString: %',"WhereConditionString";
RAISE NOTICE 'VALUE: %',"SelectQueryString";

OPEN $11 FOR
	EXECUTE  "SelectQueryString" ;
RETURN NEXT $11;
  
--WHERE SegmentValue1 >''
SELECT COUNT(*) INTO "OutTotalRecordCount" 
FROM
(SELECT c."FDAAlertOutputByAdvancedSegmentLevel2Id",
        c."FDAAlertOutputId"  
FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"  AS c
WHERE c."FDAAlertRulesId" = "InFDAAlertRulesId"
  AND c."FDAAlertOutputId" = "InFDAAlertOutputId"
  AND "SegmentValues" = "InSegmentValue")x ;
  

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 "ResultPercentage1" := ((((SELECT COUNT("ColorBasedoThreasold1") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold1",''),'0') AS NUMERIC) NOT IN (1,2)) * 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END 
                                                                                  FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                  WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ) ) *100);
 "ResultPercentage2" := ((((SELECT COUNT("ColorBasedoThreasold2") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold2",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                  FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                  WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage3" := ((((SELECT COUNT("ColorBasedoThreasold3") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold3",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END 
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage4" := ((((SELECT COUNT("ColorBasedoThreasold4") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold4",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage5" := ((((SELECT COUNT("ColorBasedoThreasold5") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold5",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage6" := ((((SELECT COUNT("ColorBasedoThreasold6") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold6",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage7" := ((((SELECT COUNT("ColorBasedoThreasold7") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold7",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage8" := ((((SELECT COUNT("ColorBasedoThreasold8") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold8",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage9" := ((((SELECT COUNT("ColorBasedoThreasold9") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold9",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage10" := ((((SELECT COUNT("ColorBasedoThreasold10") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold10",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage11" := ((((SELECT COUNT("ColorBasedoThreasold11") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold11",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage12" := ((((SELECT COUNT("ColorBasedoThreasold12") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold12",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage13" := ((((SELECT COUNT("ColorBasedoThreasold13") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold13",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage14" := ((((SELECT COUNT("ColorBasedoThreasold14") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold14",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage15" := ((((SELECT COUNT("ColorBasedoThreasold15") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold15",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage16" := ((((SELECT COUNT("ColorBasedoThreasold16") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold16",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage17" := ((((SELECT COUNT("ColorBasedoThreasold17") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold17",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage18" := ((((SELECT COUNT("ColorBasedoThreasold18") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold18",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage19" := ((((SELECT COUNT("ColorBasedoThreasold19") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold19",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);
 "ResultPercentage20" := ((((SELECT COUNT("ColorBasedoThreasold20") 
                                FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
								WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
								AND "SegmentValues" = "InSegmentValue"
								AND CAST(COALESCE(NULLIF("ColorBasedoThreasold20",''),'0') AS NUMERIC) NOT IN (1,2))* 0.1 )/((SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE COUNT(*) END
                                                                                 FROM fda."FDAAlertOutputByAdvancedSegmentLevel2"
												                                 WHERE "FDAAlertOutputId" = "InFDAAlertOutputId"
																				  AND "SegmentValues" = "InSegmentValue" ) * 0.1 ))*100);																				 

--PRINT(123)
SELECT (CASE WHEN  "ResultPercentage1" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage1" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage1",1,2),'.','') END) INTO "OutSourceTargetValue1DifferencePercent";			
SELECT (CASE WHEN  "ResultPercentage2" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage2" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage2",1,2),'.','') END) INTO "OutSourceTargetValue2DifferencePercent";							   
SELECT (CASE WHEN  "ResultPercentage3" LIKE '0.00%' THEN '0'
WHEN  "ResultPercentage3" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage3",1,2),'.','') END) INTO "OutSourceTargetValue3DifferencePercent";							   
SELECT (CASE WHEN "ResultPercentage4" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage4" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage4",1,2),'.','') END) INTO "OutSourceTargetValue4DifferencePercent";							   
SELECT (CASE WHEN "ResultPercentage5" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage5" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage5",1,2),'.','') END) INTO "OutSourceTargetValue5DifferencePercent";
SELECT (CASE WHEN "ResultPercentage6" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage6" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage6",1,2),'.','') END) INTO "OutSourceTargetValue6DifferencePercent";
SELECT (CASE WHEN "ResultPercentage7" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage7" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage7",1,2),'.','') END) INTO "OutSourceTargetValue7DifferencePercent";
SELECT (CASE WHEN "ResultPercentage8" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage8" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage8",1,2),'.','') END) INTO "OutSourceTargetValue8DifferencePercent";
SELECT (CASE WHEN "ResultPercentage9" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage9" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage9",1,2),'.','') END) INTO "OutSourceTargetValue9DifferencePercent";
SELECT (CASE WHEN "ResultPercentage10" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage10" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage10",1,2),'.','') END) INTO "OutSourceTargetValue10DifferencePercent";
SELECT (CASE WHEN "ResultPercentage11" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage11" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage11",1,2),'.','') END) INTO "OutSourceTargetValue11DifferencePercent";
SELECT (CASE WHEN "ResultPercentage12" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage12" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage12",1,2),'.','') END) INTO "OutSourceTargetValue12DifferencePercent";
SELECT (CASE WHEN "ResultPercentage13" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage13" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage13",1,2),'.','') END) INTO "OutSourceTargetValue13DifferencePercent";
SELECT (CASE WHEN "ResultPercentage14" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage14" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage14",1,2),'.','') END) INTO "OutSourceTargetValue14DifferencePercent";
SELECT (CASE WHEN "ResultPercentage15" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage15" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage15",1,2),'.','') END) INTO "OutSourceTargetValue15DifferencePercent";
SELECT (CASE WHEN "ResultPercentage16" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage16" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage16",1,2),'.','') END) INTO "OutSourceTargetValue16DifferencePercent";
SELECT (CASE WHEN "ResultPercentage17" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage17" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage17",1,2),'.','') END) INTO "OutSourceTargetValue17DifferencePercent";
SELECT (CASE WHEN "ResultPercentage18" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage18" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage18",1,2),'.','') END) INTO "OutSourceTargetValue18DifferencePercent";
SELECT (CASE WHEN "ResultPercentage19" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage19" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage19",1,2),'.','') END) INTO "OutSourceTargetValue19DifferencePercent";
SELECT (CASE WHEN "ResultPercentage20" LIKE '0.00%' THEN '0'
WHEN "ResultPercentage20" LIKE '100%' THEN '100'
ELSE REPLACE(SUBSTRING("ResultPercentage20",1,2),'.','') END) INTO "OutSourceTargetValue20DifferencePercent";
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Fetch Notes Added with 
SELECT "Notes",
	"AlertInd",
	"NewBaseLineInd",
	"ConfirmedByUser",
	CONCAT(to_char(cast("LastUpdatedDateTime" as timestamp),'HH24:MI:SS'),' GMT') AS "TIMEGMT",
	"AlertStatus",
	(CASE 
		WHEN  "SourceSegmentCount" is not null 
			OR  "TargetSegmentCount" is not null 
				THEN 
					(CASE 
						WHEN "SourceSegmentCount" = "TargetSegmentCount"
							THEN 'In total there are ' || "SourceSegmentCount" || ' segments in Source and ' || "TargetSegmentCount" || ' in target. Therefore, segment count reconciles perfectly fine.'
						ELSE 'In total there are ' || "SourceSegmentCount" || ' segments in Source and ' || "TargetSegmentCount" || ' in target. Therefore, segment count does not reconcile perfectly.'
					END)
		ELSE ''
	END) AS "SegmentCountStatus",
	(CASE 
	 	WHEN  "SourceSegmentCount" is not null 
			OR  "TargetSegmentCount" is not null 
	 			THEN 
	 				(CASE 
						WHEN "SourceSegmentCount" = "TargetSegmentCount" 
							THEN 'GREEN' 
						ELSE 'RED'
	 				END)
	 	ELSE ''
	END) AS"SegmentCountColorInd",
	(CASE 
		WHEN "SourceSegmentCount" >= 1000 
	 		OR "TargetSegmentCount" >= 1000 
			THEN 'However, in order to limit the number of segments, detailed reconciliation below is only for 1,000 segments.' 
		ELSE '' 
	END) AS"SegmentCountCriticalStatus","SegmentValue" as "SegmentValues"

INTO "OutNotes","OutAlertInd","OutNewBaseLineInd","OutConfirmedByUser","OutTIMEGMT","OutAlertStatus","OutSegmentCountStatus","OutSegmentCountColorInd","OutSegmentCountCriticalStatus","OutSegmentValues"
FROM fda."FDAAlertOutputSecondary"
WHERE "FDAAlertRulesId" =  "InFDAAlertRulesId"
AND "FDAAlertOutputId" = "InFDAAlertOutputId"
AND "SegmentValue" = "InSegmentValue";

 
-------------------------------------------------------------(SUMMARY STATUS)--------------------------------------------------------------------------------------------------------------------
SELECT (CASE WHEN "AlertTypeInd" = 'SourceTargetValue'
				THEN(CASE WHEN "AlertSegmentInd" = 'WHITE' AND "AlertDetailsDataInd" = 'RED' 
								THEN 'In summary, this reconciliation failed because even though total segment count matched, the details data for each segment did not match.'
						  WHEN "AlertSegmentInd" = 'RED' AND ("AlertDetailsDataInd" = 'WHITE' OR "AlertDetailsDataInd" = 'RED')
								THEN 'In summary, this reconciliation failed because even total segment count itself did not match.'
						  ELSE 'In summary, this reconciliation passed because for this total segment matched and details data also matched.'
					END)
			ELSE(CASE WHEN "AlertDetailsDataInd" = 'RED' 
							THEN 'In summary, this reconciliation failed because the details data for each segment did not match.'
					  ELSE 'In summary, this reconciliation passed because the details data for each segment matched.'
				END)
		END) AS "SummaryStatus"
INTO "OutSummaryStatus"
FROM(SELECT	DISTINCT "AlertTypeInd",
			(CASE WHEN "SourceSegmentCount" = "TargetSegmentCount" THEN 'WHITE' ELSE 'RED' END) "AlertSegmentInd",		
			(CASE
				WHEN MIN(CASE 
							WHEN "ColorBasedoThreasold1" = '1' OR "ColorBasedoThreasold2" = '1' OR "ColorBasedoThreasold3" = '1' OR "ColorBasedoThreasold4" = '1'
								OR "ColorBasedoThreasold5" = '1' OR "ColorBasedoThreasold6" = '1' OR "ColorBasedoThreasold7" = '1' OR "ColorBasedoThreasold8" = '1'
									OR "ColorBasedoThreasold9" = '1' OR "ColorBasedoThreasold10" = '1' OR "ColorBasedoThreasold11" = '1' OR "ColorBasedoThreasold12" = '1'
										OR "ColorBasedoThreasold13" = '1' OR "ColorBasedoThreasold14" = '1' OR "ColorBasedoThreasold15" = '1' OR "ColorBasedoThreasold16" = '1'
											OR "ColorBasedoThreasold17" = '1' OR "ColorBasedoThreasold18" = '1' OR "ColorBasedoThreasold19" = '1' OR "ColorBasedoThreasold20" = '1'
								THEN '1'
							ELSE '9'
						END) OVER()  = '1' 
					THEN 'RED' 
				ELSE 'WHITE' 
			END) "AlertDetailsDataInd"			
	FROM fda."FDAAlertRules" a
	INNER JOIN fda."FDAAlertOutputByAdvancedSegmentLevel2" b
		ON a."FDAAlertRulesId" = b."FDAAlertRulesId"
	INNER JOIN fda."FDAAlertOutputSecondary" c
		ON b."FDAAlertRulesId" = c."FDAAlertRulesId"
		AND b."FDAAlertOutputId" = c."FDAAlertOutputId"
		AND c."SegmentValue" = "InSegmentValue"
	WHERE b."FDAAlertRulesId" = "InFDAAlertRulesId"
		AND b."FDAAlertOutputId" = "InFDAAlertOutputId"
	)x;

SELECT  "AlertName","AlertDescription"
INTO "OutAlertName","OutAlertDescription"	
FROM fda."FDAAlertRules"
WHERE "FDAAlertRulesId" = "InFDAAlertRulesId";

OPEN $12 FOR
SELECT  "OutNotes",
		"OutAlertInd",
		"OutNewBaseLineInd",
		"OutConfirmedByUser",
		"OutAlertName",
		"OutAlertDescription",
		"OutTIMEGMT",
		"OutTotalRecordCount",
		"OutAlertStatus",
		"OutSegmentCountStatus",
		"OutSegmentCountColorInd",
		"OutSegmentCountCriticalStatus",
		"OutSummaryStatus",
		"OutSegmentValues",
		
		COALESCE(NULLIF("OutSegmentName1",''),'TOTAL') AS "OutSegmentName1", 
		"OutSegmentName2",
		"OutSegmentName3",
		"OutSegmentName4",
		"OutSegmentName5",
		
		"OutSourceColumnName1" ,
		"OutTargetColumnName1" ,
		"OutSourceColumnName2" ,
		"OutTargetColumnName2" ,
		"OutSourceColumnName3" ,
		"OutTargetColumnName3" ,
		"OutSourceColumnName4" ,
		"OutTargetColumnName4" ,
		"OutSourceColumnName5" ,
		"OutTargetColumnName5" ,
		"OutSourceColumnName6" ,
		"OutTargetColumnName6" ,
		"OutSourceColumnName7" ,
		"OutTargetColumnName7" ,
		"OutSourceColumnName8" ,
		"OutTargetColumnName8" ,
		"OutSourceColumnName9" ,
		"OutTargetColumnName9" ,
		"OutSourceColumnName10",
		"OutTargetColumnName10",
		"OutSourceColumnName11",
		"OutTargetColumnName11",
		"OutSourceColumnName12",
		"OutTargetColumnName12",
		"OutSourceColumnName13",
		"OutTargetColumnName13",
		"OutSourceColumnName14",
		"OutTargetColumnName14",
		"OutSourceColumnName15",
		"OutTargetColumnName15",
		"OutSourceColumnName16",
		"OutTargetColumnName16",
		"OutSourceColumnName17",
		"OutTargetColumnName17",
		"OutSourceColumnName18",
		"OutTargetColumnName18",
		"OutSourceColumnName19",
		"OutTargetColumnName19",
		"OutSourceColumnName20",
		"OutTargetColumnName20",
		
		"OutThreshold1" ,
		"OutThreshold2" ,
		"OutThreshold3" ,
		"OutThreshold4" ,
		"OutThreshold5" ,
		"OutThreshold6" ,
		"OutThreshold7" ,
		"OutThreshold8" ,
		"OutThreshold9" ,
		"OutThreshold10",
		"OutThreshold11",
		"OutThreshold12",
		"OutThreshold13",
		"OutThreshold14",
		"OutThreshold15",
		"OutThreshold16",
		"OutThreshold17",
		"OutThreshold18",
		"OutThreshold19",
		"OutThreshold20",
		
		"OutSourceTargetValue1DifferencePercent" ,
		"OutSourceTargetValue2DifferencePercent" ,
		"OutSourceTargetValue3DifferencePercent" ,
		"OutSourceTargetValue4DifferencePercent" ,
		"OutSourceTargetValue5DifferencePercent" ,
		"OutSourceTargetValue6DifferencePercent" ,
		"OutSourceTargetValue7DifferencePercent" ,
		"OutSourceTargetValue8DifferencePercent" ,
		"OutSourceTargetValue9DifferencePercent" ,
		"OutSourceTargetValue10DifferencePercent",
		"OutSourceTargetValue11DifferencePercent",
		"OutSourceTargetValue12DifferencePercent",
		"OutSourceTargetValue13DifferencePercent",
		"OutSourceTargetValue14DifferencePercent",
		"OutSourceTargetValue15DifferencePercent",
		"OutSourceTargetValue16DifferencePercent",
		"OutSourceTargetValue17DifferencePercent",
		"OutSourceTargetValue18DifferencePercent",
		"OutSourceTargetValue19DifferencePercent",
		"OutSourceTargetValue20DifferencePercent";

RETURN NEXT $12;
--PRINT Out Param
/*
SELECT fda."Proc_ListAlertOutputSourceAndTargetValueWithSeviorityAdvanceSec"(
	'2867',--"InFDAAlertOutputId" bigint,
	'1098',--"InFDAAlertRulesId" bigint,
	'0',--"InOffSet" bigint,
	'10000',--"InLimit" bigint,
	 'Rajasthan',  --"InSegmentValue" character varying,
	'',--"InOrderByColumnName" character varying,
	'',--"InOrderBy" character varying,
	'',--"InFromDate" character varying,
	'',--"InToDate" character varying,
	'',--"InTabInd" character varying,
	'refcursor1',
	'refcursor2');
FETCH ALL IN "refcursor2";
*/
END;
$BODY$;
-----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fda."Proc_ListFDAEntityAttributeDataType"(
	"InOffSet" integer,
	"InLimit" integer,
	"InOrderByColumn" character varying,
	"InOrderBy" character varying,
	"InTabInd" character varying,
	"InSystemName" character varying,
	"InEntityName" character varying,
	"InUserEntityNameInput" character varying,
	"InAttributeName" character varying,
	"InDataType" character varying,
	"InUserFriendlyFieldName" character varying,
	"InUserFriendlyEntityName" character varying,
	"InComment" character varying,
	"InIsNullPossible" character varying,
	"InCharacterMAXimumLength" character varying,
	"InColumnPrecision" character varying,
	"InIsSecured" character varying,
	"InIsGDPRRelevant" character varying,
	"InOwner" character varying,
	"InRefreshFrequency" character varying,
	"InRefreshBy" character varying,
	"InSegmentedBy" character varying,
	refcursor,
	refcursor)
    RETURNS SETOF refcursor 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE "ParmDefinition" VARCHAR(500);
		"lvQuerySelect" TEXT;
		"lvQuerySelectColumn" TEXT;
		"lvQuerySelectTable" TEXT;
		"OrderByString" TEXT;
		"lvQuerySelectCount" TEXT;
		"TotalRowCount" INT;
		"lvWhereClause" TEXT;
		"lvQuerySelect3" TEXT;
		"lvAlertId" VARCHAR(100) ;
		"lvInd1" VARCHAR(5)='N';

DECLARE "lvExecutionId" BIGINT;

--a.ColumnPrecision,
BEGIN

"InSystemName" := UPPER("InSystemName");
"InEntityName" := UPPER("InEntityName");
"InUserEntityNameInput" := UPPER("InUserEntityNameInput");
"InAttributeName" := UPPER("InAttributeName");
"InDataType" := UPPER("InDataType");
"InUserFriendlyFieldName" := UPPER("InUserFriendlyFieldName");
"InUserFriendlyEntityName" := UPPER("InUserFriendlyEntityName");
"InComment" := UPPER("InComment");
"InIsNullPossible" := UPPER("InIsNullPossible");
"InCharacterMAXimumLength" := UPPER("InCharacterMAXimumLength");
"InColumnPrecision" := UPPER("InColumnPrecision");
"InIsSecured" := UPPER("InIsSecured");
"InIsGDPRRelevant" := UPPER("InIsGDPRRelevant");
"InOwner" := UPPER("InOwner");
"InTabInd" := UPPER("InTabInd");
"InRefreshFrequency" := UPPER("InRefreshFrequency");
"InRefreshBy" := UPPER("InRefreshBy");
"InSegmentedBy" := UPPER("InSegmentedBy");

IF COALESCE("InTabInd",'') = 'ATTRIBUTE' THEN

"lvQuerySelectColumn" := '
	SELECT *
	FROM(
	   SELECT DISTINCT
	   a."FDASystemObjectFieldsId",
	   b."FDASystemObjectsId",
	   /*(SELECT COALESCE(SUM(COALESCE(NULLIF("a"::TEXT,'''')::BIGINT,0)),0)
			FROM
			   (SELECT CASE WHEN "RuleName" <> ''Auto Outlier'' THEN
							(CASE WHEN "SegmentedRuleInd" = ''N''  
								THEN  COUNT(CASE WHEN l."LeftFieldValue" IS NOT NULL  AND l."RightFieldValue" IS NOT NULL 
												 THEN l."FDASystemObjectFieldsId"::TEXT 
											ELSE (CASE  WHEN l."LeftFieldValue" IS NOT NULL  AND l."RightFieldValue" IS  NULL 
														THEN l."LeftFieldValue"
														ELSE (CASE  WHEN l."LeftFieldValue" IS  NULL  AND l."RightFieldValue" IS NOT NULL 
																	THEN l."RightFieldValue" 
															  END) 
												   END)
											END) 
							ELSE                                                             
								COUNT(DISTINCT CASE WHEN l."LeftFieldValue" IS NOT NULL  AND l."RightFieldValue" IS NOT NULL 
													THEN l."SegmentedByFieldName"::TEXT 
													ELSE (CASE  WHEN l."LeftFieldValue" IS NOT NULL  AND l."RightFieldValue" IS  NULL 
																THEN l."LeftFieldValue"
																ELSE (CASE  WHEN l."LeftFieldValue" IS  NULL  AND l."RightFieldValue" IS NOT NULL
																			THEN l."RightFieldValue" 
																	  END) 
														   END)
									    END) 
							END)
					ELSE 1 END "a" 					
                FROM  fda."FDAEntityAttributeSegmentRules" l
                WHERE "FDASystemObjectFieldsId"= a."FDASystemObjectFieldsId"
                GROUP BY "SegmentedRuleInd","RuleName")x) "RuleCount",*/
				COALESCE(e."RuleCount",0) AS "RuleCount" ,
	   b."ObjectName" "TableName",
	   a."FieldName" "ColumnName",
       UPPER(a."FieldDataType") "ColumnDataType",
	   (CASE 
	   WHEN UPPER(a."FieldDataType") IN (''TEXT'',''BOOLEAN'',''VARBINARY'',''CHAR'',''VARCHAR'',''NCHAR'',''VARCHAR2'',''STRING'',''NVARCHAR'',''NVARCHAR2'',''TIME'',''BLOB'',''CLOB'',''NCLOB'') THEN ''STRING''
	   WHEN UPPER(a."FieldDataType") IN (''BIT'',''FLOAT'',''FLOAT64'',''INT16'',''INT32'',''INT64'',''BIGNUMERIC'',''INTEGER'',''BINARY'',''INT'',''DOUBLE'',''SMALLINT'',''BIGINT'',''TINYINT'',''NUMBER'',''NUMERIC'',''FLOAT'',''BINARY_FLOAT'',''BINARY_DOUBLE'',''LONG'',''DECIMAL'',''DECIMAL17,3'') THEN ''NUMBER''
	   WHEN UPPER(a."FieldDataType") IN (''DATE'',''DATETIME'',''DATETIME2'',''TIMESTAMP'',''TIMESTAMP_NTZ'',''TIMESTAMP6'') THEN ''DATE''
	   ELSE '''' 
	   END) "TYPE",
	   (CASE 
	   WHEN UPPER(COALESCE(a."UserOverwriteDatatype",a."FieldDataType")) IN (''TEXT'',''BOOLEAN'',''VARBINARY'',''VARCHAR'',''CHAR'',''NCHAR'',''VARCHAR2'',''STRING'',''NVARCHAR'',''NVARCHAR2'',''TIME'',''BLOB'',''CLOB'',''NCLOB'') THEN ''STRING''
	   WHEN UPPER(COALESCE(a."UserOverwriteDatatype",a."FieldDataType")) IN (''BIT'',''FLOAT'',''FLOAT64'',''INT16'',''INT32'',''INT64'',''BIGNUMERIC'',''INTEGER'',''BINARY'',''INT'',''DOUBLE'',''SMALLINT'',''BIGINT'',''TINYINT'',''NUMBER'',''NUMERIC'',''FLOAT'',''BINARY_FLOAT'',''BINARY_DOUBLE'',''LONG'',''DECIMAL'',''DECIMAL17,3'') THEN ''NUMBER''
	   WHEN UPPER(COALESCE(a."UserOverwriteDatatype",a."FieldDataType")) IN (''DATE'',''DATETIME'',''DATETIME2'',''TIMESTAMP'',''TIMESTAMP_NTZ'',''TIMESTAMP6'') THEN ''DATE'' 
	   END) "UserOverwriteDatatype",
	   ---a."IsNullPossible",
       (CASE WHEN a."IsNullPossible" = ''Y'' THEN  ''YES''
		WHEN a."IsNullPossible" = ''N'' THEN  ''NO''
		ELSE a."IsNullPossible" END) "IsNullPossible",
       a."CharacterMaximumLength",
	   (CASE 
	   WHEN a."FieldDataType" IN (''TEXT'',''VARBINARY'',''VARCHAR'',''VARCHAR2'',''STRING'',''CHAR'',''NCHAR'',''NVARCHAR'',''NVARCHAR2'',''BLOB'',''CLOB'',''NCLOB'',''BOOLEAN'') THEN a."CharacterMaximumLength"
	   WHEN a."FieldDataType" IN (''BIT'',''FLOAT'',''FLOAT64'',''INT16'',''INT32'',''INT64'',''BIGNUMERIC'',''INT'',''BINARY'',''DOUBLE'',''SMALLINT'',''BIGINT'',''TINYINT'',''NUMBER'',''NUMERIC'',''DECIMAL'',''FLOAT'',''BINARY_FLOAT'',''BINARY_DOUBLE'',''LONG'') THEN a."ColumnPrecision"
	   WHEN a."FieldDataType" IN (''DATE'',''DATETIME'',''DATETIME2'',''TIME'',''TIMESTAMP'',''TIMESTAMP_NTZ'',''TIMESTAMP6'') THEN a."CharacterMaximumLength"
	   WHEN a."FieldDataType" = ''INTEGER'' THEN (CASE WHEN a."ColumnPrecision" = '''' OR a."ColumnPrecision" IS NULL THEN ''0'' ELSE a."ColumnPrecision" END)
	   ELSE CONCAT(''('','')'') 
	   END) "ColumnPrecision",
       
       b."UserFriendlyObjectName" "LogicalObjectName",
       a."UserFriendlyFieldName" "LogicalFieldName",
       a."Comment",
       a."IsSecured",
       a."IsGDPRRelevant",
       COALESCE(a."Owner",b."Owner",c."SystemOwner") "Owner",
	   COALESCE(f."RuleName",'''') "MasterRuleName",
       COALESCE(a."MasterRuleId",''0'') "MasterRuleId",
	   (CASE WHEN a."AutoMetricsInd" = ''true'' THEN a."AutoMetricsInd" ELSE NULL END)  "AutoMetricsInd",
	   COALESCE(a."SegmentedBy",'''') "SegmentedBy",
	   (CASE WHEN COALESCE(d."SegmentedByFieldName",'''') > '''' THEN ''true'' ELSE NULL END) "SegmentedRuleInd",
		"TestRuleInd" ';

"lvQuerySelectTable" := ' FROM fda."FDASystemObjectFields" a
INNER JOIN fda."FDASystemObjects" b
ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN fda."FDASystems" c
ON a."FDASystemsId" =  c."FDASystemsId"
LEFT OUTER JOIN (SELECT DISTINCT "FDASystemObjectFieldsId","SegmentedByFieldName"
				FROM fda."FDAEntityAttributeSegmentRules" 
				WHERE COALESCE("SegmentedByFieldName",'''') > '''') d
ON a."FDASystemObjectFieldsId" = d."FDASystemObjectFieldsId"
LEFT JOIN (SELECT COUNT(*) "RuleCount",
				"FDADataQualityRulesId"
			FROM(SELECT 
					(CASE WHEN "RuleType" IN (''Enumerated Value'',''Row Count Variation'',''Possible Character'',''Range of Values'',''Date Range'',''Length Check'') AND ("LeftFieldValue" > '''' or "RightFieldValue" > '''')
						  THEN 1::text
						  WHEN "RuleType" IN (''DataType Check'',''Blank/NonBlank'',''Fixed static value'',''Distinct Check'',''Enumerated Value(Query)'',''User Criteria'') AND "LeftFieldValue" > '''' 
						  THEN 1::text  END) "RuleType",
	
					"FDADataQualityRulesId" 
				FROM fda."FDADataQualityMasterRulesDetails"
				)x
			WHERE "RuleType" IS NOT NULL
			GROUP BY x."FDADataQualityRulesId")e 
		ON a."MasterRuleId" = e."FDADataQualityRulesId" 
LEFT JOIN fda."FDADataQualityMasterRules" f
		ON a."MasterRuleId" = f."FDADataQualityRulesId" ';

ELSE IF COALESCE("InTabInd",'') = 'ENTITY' THEN

"lvQuerySelectColumn" := '
	SELECT *
	FROM(
	   SELECT DISTINCT
	   a."FDASystemObjectsId",
	   a."ObjectName" "TableName",
	   ''TABLE'' AS "ObjectType",
       a."UserFriendlyObjectName" "LogicalObjectName",
       a."Comment",
       COALESCE(a."Owner",c."SystemOwner") AS "Owner",
	   a."ObjectGroup",
	   (CASE WHEN a."AutoMetricsInd" = ''true'' THEN a."AutoMetricsInd" ELSE NULL END)  "AutoMetricsInd",
	   (CASE WHEN a."BasicScoreInd" = ''true'' THEN a."BasicScoreInd" ELSE NULL END)  "BasicScoreInd",
	   (CASE WHEN a."AdvanceScoreInd" = ''true'' THEN a."AdvanceScoreInd" ELSE NULL END)  "AdvanceScoreInd",
	   (CASE WHEN COALESCE(d."SegmentedByFieldName",'''') > '''' THEN ''true'' ELSE NULL END) "SegmentedRuleInd",
	   COALESCE(a."SegmentedBy",'''') "SegmentedBy",
	   COALESCE(a."RefreshFrequency",'''') "RefreshFrequency",
	   (CASE WHEN  NULLIF(TO_CHAR(a."RefreshTime",''HH12:MI AM''),'''') is  NULL THEN ''''
		WHEN  NULLIF(TO_CHAR(a."RefreshTime",''HH12:MI AM''),'''') IS NOT  NULL THEN 
			CONCAT(NULLIF(TO_CHAR(a."RefreshTime",''HH12:MI AM''),''''),'' CST'')  
		END) "RefreshBy"
	';
	
"lvQuerySelectTable" := ' FROM fda."FDASystemObjects" a
INNER JOIN fda."FDASystems" c
ON a."FDASystemsId" =  c."FDASystemsId"
LEFT OUTER JOIN fda."FDAEntityAttributeSegmentRules" d
ON a."FDASystemObjectsId" = d."FDASystemObjectId"
AND COALESCE(d."FDASystemObjectFieldsId",0) = 0 ';

END IF;
END IF;

RAISE NOTICE 'InTabInd: %',"InTabInd";
RAISE NOTICE 'lvInd1: %',"lvInd1";

/*
"lvQuerySelectTable" := ' FROM fda."FDASystemObjectFields" a
INNER JOIN fda."FDASystemObjects" b
ON a."FDASystemObjectsId" = b."FDASystemObjectsId"
INNER JOIN fda."FDASystems" c
ON a."FDASystemsId" =  c."FDASystemsId"
LEFT OUTER JOIN fda."FDAEntityAttributeSegmentRules" d
ON a."FDASystemObjectFieldsId" = d."FDASystemObjectFieldsId" ';
*/
-------------
IF COALESCE("InTabInd",'') = 'ATTRIBUTE' THEN

IF  "InSystemName"  > '' OR  "InSystemName"  = '' OR "InEntityName"  > '' OR "InUserEntityNameInput" > '' OR "InAttributeName"  > '' 
OR "InDataType" > '' OR "InUserFriendlyFieldName"  > '' OR "InUserFriendlyEntityName"  > ''  OR "InComment" > '' 
OR "InIsNullPossible" > '' OR "InCharacterMAXimumLength" > '' OR "InColumnPrecision" > '' OR "InIsSecured" > '' 
OR "InIsGDPRRelevant" > '' OR "InOwner" > '' OR "InRefreshFrequency" > '' OR "InRefreshBy" > '' OR "InSegmentedBy" > '' OR "InTabInd" > ''

THEN
	 "lvWhereClause" := ' WHERE  "ObjectType" = ''DATA'' AND UPPER(a."ObsoleteInMetaDataInd") <> ''DELETED'' AND'; 
	
	IF "InSystemName" = ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(c."SystemAliasName")  LIKE ''%',"InSystemName",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",'  UPPER(c."SystemAliasName")  LIKE ''%',"InSystemName",'%'' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InSystemName" > ''
	  THEN
	  RAISE NOTICE 'lvInd1: %',"lvInd1";
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",'  UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InUserEntityNameInput" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(b."ObjectName")  LIKE ''%',"InUserEntityNameInput",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(b."ObjectName")  LIKE ''%',"InUserEntityNameInput",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InEntityName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(b."ObjectName")  = ''',"InEntityName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(b."ObjectName")  = ''',"InEntityName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InAttributeName" > ''
	  THEN
	  
	  	  RAISE NOTICE 'lvInd1: %',"lvInd1";
		  
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."FieldName") LIKE ''%',"InAttributeName",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."FieldName") LIKE ''%',"InAttributeName",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  IF "InDataType" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."FieldDataType") LIKE ''%',"InDataType",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."FieldDataType") LIKE ''%',"InDataType",'%'' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InUserFriendlyFieldName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."UserFriendlyFieldName") LIKE ''%',"InUserFriendlyFieldName",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."UserFriendlyFieldName") LIKE ''%',"InUserFriendlyFieldName",'%'' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InUserFriendlyEntityName"  > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", '  AND UPPER(b."UserFriendlyObjectName") LIKE ''%',"InUserFriendlyEntityName",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' UPPER(b."UserFriendlyObjectName") LIKE ''%',"InUserFriendlyEntityName",'%'' ');
			    "lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InComment" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."Comment") LIKE ''%',"InComment",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' UPPER(a."Comment") LIKE ''%',"InComment",'%'' ');
			    "lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  	IF "InIsNullPossible" > ''
	 THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND (CASE WHEN a."IsNullPossible" = ''Y'' THEN  ''YES'' WHEN a."IsNullPossible" = ''N'' THEN  ''NO''
										ELSE a."IsNullPossible" END) LIKE ''%',"InIsNullPossible",'%''');
	   ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' (CASE WHEN a."IsNullPossible" = ''Y'' THEN  ''YES'' WHEN a."IsNullPossible" = ''N'' THEN  ''NO''
										ELSE a."IsNullPossible" END) LIKE ''%',"InIsNullPossible",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	IF "InCharacterMAXimumLength" > ''
	 THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."CharacterMaximumLength" LIKE ''%',"InCharacterMAXimumLength",'%''');
	   ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."CharacterMaximumLength" LIKE ''%',"InCharacterMAXimumLength",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

   IF "InColumnPrecision" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."ColumnPrecision" LIKE ''%',"InColumnPrecision",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."ColumnPrecision" LIKE ''%',"InColumnPrecision",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

  IF "InIsSecured" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."IsSecured" LIKE ''%',"InIsSecured",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."IsSecured" LIKE ''%',"InIsSecured",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

  IF "InIsGDPRRelevant" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", 'AND a."IsGDPRRelevant" LIKE ''%',"InIsGDPRRelevant",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."IsGDPRRelevant" LIKE ''%',"InIsGDPRRelevant",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	IF "InOwner" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(COALESCE(a."Owner",b."Owner",c."SystemOwner")) LIKE UPPER(''%',"InOwner",'%'')');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(COALESCE(a."Owner",b."Owner",c."SystemOwner")) LIKE UPPER(''%',"InOwner",'%'')');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	  IF "InRefreshFrequency" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(b."RefreshFrequency") LIKE ''%',"InRefreshFrequency",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(b."RefreshFrequency") LIKE ''%',"InRefreshFrequency",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	    IF "InRefreshBy" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND TO_CHAR(b."RefreshTime",''HH:MM'') LIKE ''%',"InRefreshBy",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' TO_CHAR(b."RefreshTime",''HH:MM'') LIKE ''%',"InRefreshBy",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	  IF "InSegmentedBy" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(COALESCE(a."SegmentedBy",''''))  LIKE ''%',"InSegmentedBy",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(COALESCE(a."SegmentedBy",'''')) LIKE ''%',"InSegmentedBy",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
  
	 
END IF;

ELSE IF COALESCE("InTabInd",'') = 'ENTITY' THEN

IF  "InSystemName"  > '' OR "InSystemName" = '' OR  "InEntityName"  > '' OR "InUserEntityNameInput" > '' OR "InAttributeName"  > '' 
OR "InDataType" > '' OR "InUserFriendlyFieldName"  > '' OR "InUserFriendlyEntityName"  > ''  OR "InComment" > '' 
OR "InIsNullPossible" > '' OR "InCharacterMAXimumLength" > '' OR "InColumnPrecision" > '' OR "InIsSecured" > '' 
OR "InIsGDPRRelevant" > '' OR "InOwner" > '' OR "InRefreshFrequency" > '' OR "InRefreshBy" > '' OR "InSegmentedBy" > '' OR "InTabInd" > ''

THEN
	 "lvWhereClause" := ' WHERE  "ObjectType" = ''DATA'' AND ';
	IF "InSystemName" = ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",'  UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  IF "InSystemName" = ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",'  UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  
	  IF "InSystemName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",'  UPPER(c."SystemAliasName")  = ''',"InSystemName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InUserEntityNameInput" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."ObjectName")  LIKE ''%',"InUserEntityNameInput",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."ObjectName")  LIKE ''%',"InUserEntityNameInput",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  
	  IF "InEntityName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."ObjectName")  = ''',"InEntityName",''' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."ObjectName")  = ''',"InEntityName",''' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InAttributeName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."FieldName") LIKE ''%',"InAttributeName",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."FieldName") LIKE ''%',"InAttributeName",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	  IF "InDataType" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."FieldDataType") LIKE ''%',"InDataType",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."FieldDataType") LIKE ''%',"InDataType",'%'' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InUserFriendlyFieldName" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."UserFriendlyFieldName") LIKE ''%',"InUserFriendlyFieldName",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."UserFriendlyFieldName") LIKE ''%',"InUserFriendlyFieldName",'%'' ');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InUserFriendlyEntityName"  > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", '  AND UPPER(a."UserFriendlyObjectName") LIKE ''%',"InUserFriendlyEntityName",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' UPPER(a."UserFriendlyObjectName") LIKE ''%',"InUserFriendlyEntityName",'%'' ');
			    "lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  IF "InComment" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."Comment") LIKE ''%',"InComment",'%'' ');
		ELSE IF "lvInd1" = 'N' THEN
				"lvWhereClause" := CONCAT("lvWhereClause", ' UPPER(a."Comment") LIKE ''%',"InComment",'%'' ');
			    "lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	  	IF "InIsNullPossible" > ''
	 THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."IsNullPossible" LIKE ''%',"InIsNullPossible",'%''');
	   ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."IsNullPossible" LIKE ''%',"InIsNullPossible",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;
	IF "InCharacterMAXimumLength" > ''
	 THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."CharacterMaximumLength" LIKE ''%',"InCharacterMAXimumLength",'%''');
	   ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."CharacterMaximumLength" LIKE ''%',"InCharacterMAXimumLength",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

   IF "InColumnPrecision" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."ColumnPrecision" LIKE ''%',"InColumnPrecision",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."ColumnPrecision" LIKE ''%',"InColumnPrecision",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

  IF "InIsSecured" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND a."IsSecured" LIKE ''%',"InIsSecured",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."IsSecured" LIKE ''%',"InIsSecured",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

  IF "InIsGDPRRelevant" > ''
	  THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", 'AND a."IsGDPRRelevant" LIKE ''%',"InIsGDPRRelevant",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' a."IsGDPRRelevant" LIKE ''%',"InIsGDPRRelevant",'%''');
			"lvInd1" := 'Y';
      END IF;
      END IF;
	  END IF;

	IF "InOwner" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(COALESCE(a."Owner",c."SystemOwner")) LIKE UPPER(''%',"InOwner",'%'')');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(COALESCE(a."Owner",c."SystemOwner")) LIKE UPPER(''%',"InOwner",'%'')');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	  IF "InRefreshFrequency" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(a."RefreshFrequency") LIKE ''%',"InRefreshFrequency",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(a."RefreshFrequency") LIKE ''%',"InRefreshFrequency",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	    IF "InRefreshBy" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND TO_CHAR(a."RefreshTime",''HH:MM'') LIKE ''%',"InRefreshBy",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' TO_CHAR(a."RefreshTime",''HH:MM'') LIKE ''%',"InRefreshBy",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
	  
	    IF "InSegmentedBy" > '' THEN
		IF "lvInd1" = 'Y' THEN
			"lvWhereClause" := CONCAT("lvWhereClause", ' AND UPPER(COALESCE(a."SegmentedBy",'''')) LIKE ''%',"InSegmentedBy",'%''');
		ELSE IF "lvInd1" = 'N' THEN
	  		"lvWhereClause" := CONCAT("lvWhereClause",' UPPER(COALESCE(a."SegmentedBy",'''')) LIKE ''%',"InSegmentedBy",'%''');
			"lvInd1" := 'Y';
    END IF;
      END IF;
	  END IF;
  
	 
END IF;

END IF;
END IF;

----------------

	"OrderByString" := CASE WHEN "InOrderByColumn" > '' AND "InOrderBy" > '' THEN
	CONCAT(' ORDER BY "',"InOrderByColumn",'"  ',"InOrderBy",'
	OFFSET ',"InOffSet",' ROWS
	FETCH NEXT ',"InLimit",' ROWS ONLY ')
	WHEN "InOrderByColumn" = '' 
	THEN '
	ORDER BY "FDASystemObjectsId" DESC
	OFFSET '||"InOffSet"||' ROWS
	FETCH NEXT '||"InLimit"||' ROWS ONLY'
	
	END;

	"lvQuerySelect" := CONCAT("lvQuerySelect","lvQuerySelectColumn", "lvQuerySelectTable", "lvWhereClause",') x ', "OrderByString");

RAISE NOTICE 'lvQuerySelect: %',"lvQuerySelect"; 

	"lvQuerySelectCount" := CONCAT('SELECT COUNT(*) AS "OutTotalRecordCount"', "lvQuerySelectTable" , "lvWhereClause");

RAISE NOTICE 'lvQuerySelectCount: %',"lvQuerySelectCount";

 OPEN $23 FOR
   EXECUTE "lvQuerySelect";
 RETURN NEXT $23;
 OPEN $24 FOR
   EXECUTE "lvQuerySelectCount";
 RETURN NEXT $24;
/*
SELECT fda."Proc_ListFDAEntityAttributeDataType"(
	0,--"InOffSet" integer,
	10,--"InLimit" integer,
	'',--"InOrderByColumn" character varying,
	'',--"InOrderBy" character varying,
	'ENTITY',--"InTabInd" character varying,
	'',--"InSystemName" character varying,
	'',--"InEntityName" character varying,
	'',--"InUserEntityNameInput" character varying,
	'',--"InAttributeName" character varying,
	'',--"InDataType" character varying,
	'',--"InUserFriendlyFieldName" character varying,
	'',--"InUserFriendlyEntityName" character varying,
	'',--"InComment" character varying,
	'',--"InIsNullPossible" character varying,
	'',--"InCharacterMAXimumLength" character varying,
	'',--"InColumnPrecision" character varying,
	'',--"InIsSecured" character varying,
	'',--"InIsGDPRRelevant" character varying,
	'',--"InOwner" character varying,
	'',--"InRefreshFrequency" character varying,
	'',--"InRefreshBy" character varying,
    '',--"InSegmentedBy" character varying,
	'R1',--refcursor,
	'R2');--refcursor
	FETCH ALL IN "R1";
	FETCH ALL IN "R2";

*/
END;
$BODY$;
-----------------------------------------------(END)------------------------------------------------------------------